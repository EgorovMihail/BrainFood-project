-- phpMyAdmin SQL Dump
-- version 5.0.4
-- https://www.phpmyadmin.net/
--
-- Хост: 127.0.0.1:3306
-- Время создания: Окт 03 2021 г., 18:16
-- Версия сервера: 8.0.19
-- Версия PHP: 7.1.33

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `brainfood-project-wp`
--

-- --------------------------------------------------------

--
-- Структура таблицы `wp_commentmeta`
--

CREATE TABLE `wp_commentmeta` (
  `meta_id` bigint UNSIGNED NOT NULL,
  `comment_id` bigint UNSIGNED NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_520_ci
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

-- --------------------------------------------------------

--
-- Структура таблицы `wp_comments`
--

CREATE TABLE `wp_comments` (
  `comment_ID` bigint UNSIGNED NOT NULL,
  `comment_post_ID` bigint UNSIGNED NOT NULL DEFAULT '0',
  `comment_author` tinytext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `comment_author_email` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `comment_karma` int NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_type` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'comment',
  `comment_parent` bigint UNSIGNED NOT NULL DEFAULT '0',
  `user_id` bigint UNSIGNED NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

-- --------------------------------------------------------

--
-- Структура таблицы `wp_links`
--

CREATE TABLE `wp_links` (
  `link_id` bigint UNSIGNED NOT NULL,
  `link_url` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_name` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_image` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_target` varchar(25) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_description` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_visible` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'Y',
  `link_owner` bigint UNSIGNED NOT NULL DEFAULT '1',
  `link_rating` int NOT NULL DEFAULT '0',
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_notes` mediumtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `link_rss` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT ''
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

-- --------------------------------------------------------

--
-- Структура таблицы `wp_mlw_qm_audit_trail`
--

CREATE TABLE `wp_mlw_qm_audit_trail` (
  `trail_id` mediumint NOT NULL,
  `action_user` text NOT NULL,
  `action` text NOT NULL,
  `time` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `wp_mlw_qm_audit_trail`
--

INSERT INTO `wp_mlw_qm_audit_trail` (`trail_id`, `action_user`, `action`, `time`) VALUES
(1, 'admin', 'New Quiz/Survey Has Been Created: Тест по mpi', '04:30:15 PM 05/26/2021'),
(2, 'admin', 'Quiz/Survey Status Has Been Updated: 91', '04:34:44 PM 05/26/2021'),
(3, 'admin', 'New Quiz/Survey Has Been Created: Тест по Javascript', '12:03:33 PM 05/27/2021'),
(4, 'admin', 'Quiz/Survey Status Has Been Updated: 98', '12:10:39 PM 05/27/2021'),
(5, 'admin', 'Styles Have Been Saved For Quiz Number 2', '02:06:51 PM 05/27/2021'),
(6, 'admin', 'Results Has Been Deleted From: Тест по Javascript', '03:44:27 PM 05/27/2021'),
(7, 'admin', 'New Quiz/Survey Has Been Created: Тест по mpi2', '04:56:15 PM 06/04/2021'),
(8, 'admin', 'Quiz/Survey Has Been Deleted: 3', '03:15:23 PM 06/09/2021'),
(9, 'admin', 'Settings Have Been Edited', '03:17:31 PM 06/09/2021'),
(10, 'admin', 'Settings Have Been Edited', '03:19:45 PM 06/09/2021');

-- --------------------------------------------------------

--
-- Структура таблицы `wp_mlw_questions`
--

CREATE TABLE `wp_mlw_questions` (
  `question_id` mediumint NOT NULL,
  `quiz_id` int NOT NULL,
  `question_name` text NOT NULL,
  `answer_array` text NOT NULL,
  `answer_one` text NOT NULL,
  `answer_one_points` int NOT NULL,
  `answer_two` text NOT NULL,
  `answer_two_points` int NOT NULL,
  `answer_three` text NOT NULL,
  `answer_three_points` int NOT NULL,
  `answer_four` text NOT NULL,
  `answer_four_points` int NOT NULL,
  `answer_five` text NOT NULL,
  `answer_five_points` int NOT NULL,
  `answer_six` text NOT NULL,
  `answer_six_points` int NOT NULL,
  `correct_answer` int NOT NULL,
  `question_answer_info` text NOT NULL,
  `comments` int NOT NULL,
  `hints` text NOT NULL,
  `question_order` int NOT NULL,
  `question_type` int NOT NULL,
  `question_type_new` text NOT NULL,
  `question_settings` text NOT NULL,
  `category` text NOT NULL,
  `deleted` int NOT NULL,
  `deleted_question_bank` int NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `wp_mlw_questions`
--

INSERT INTO `wp_mlw_questions` (`question_id`, `quiz_id`, `question_name`, `answer_array`, `answer_one`, `answer_one_points`, `answer_two`, `answer_two_points`, `answer_three`, `answer_three_points`, `answer_four`, `answer_four_points`, `answer_five`, `answer_five_points`, `answer_six`, `answer_six_points`, `correct_answer`, `question_answer_info`, `comments`, `hints`, `question_order`, `question_type`, `question_type_new`, `question_settings`, `category`, `deleted`, `deleted_question_bank`) VALUES
(1, 1, 'Add description here!', 'a:5:{i:0;a:3:{i:0;s:74:\"MPI_AlltoAll ( &amp;buf, count, datatype, source, tag, comm, &amp;status )\";i:1;d:0;i:2;i:0;}i:1;a:3:{i:0;s:96:\"MPI_Alltoall ( &amp;sendbuf, sendcount, sendtype, &amp;recvbuf, recvcount,recvtype, root, comm )\";i:1;d:0;i:2;i:0;}i:2;a:3:{i:0;s:91:\"MPI_AllToAll ( &amp;sendbuf, sendcount, sendtype, &amp;recvbuf, recvcount, recvtype, comm )\";i:1;d:0;i:2;i:0;}i:3;a:3:{i:0;s:91:\"MPI_Alltoall ( &amp;sendbuf, sendcount, sendtype, &amp;recvbuf, recvcount, recvtype, comm )\";i:1;d:0;i:2;i:1;}i:4;a:3:{i:0;s:59:\"MPI_Alltoall ( &amp;buf, count, datatype, dest, tag, comm )\";i:1;d:0;i:2;i:0;}}', '', 0, '', 0, '', 0, '', 0, '', 0, '', 0, 0, '', 1, '', 1, 0, '0', 'a:10:{s:8:\"required\";i:1;s:12:\"answerEditor\";s:4:\"text\";s:14:\"question_title\";s:436:\"Каждый процесс отдельные части своего передающего буфера рассылает всем остальным процессам; каждый процесс получает эти части от всех остальных и размещает их по порядку рангов процессов, от которых они получены. Формат вызова функции?\";s:8:\"comments\";s:1:\"1\";s:4:\"hint\";s:0:\"\";s:8:\"autofill\";s:1:\"0\";s:10:\"limit_text\";s:1:\"0\";s:23:\"limit_multiple_response\";s:1:\"0\";s:17:\"file_upload_limit\";s:1:\"0\";s:16:\"file_upload_type\";s:0:\"\";}', '', 0, 0),
(2, 1, '', 'a:5:{i:0;a:3:{i:0;s:67:\"MPI_PACK(inbuf, incount, datatype, outbuf, outsize, position, comm)\";i:1;d:0;i:2;i:0;}i:1;a:3:{i:0;s:48:\"MPI_PACK( sbuf, rbuf, count, datatype, op, comm)\";i:1;d:0;i:2;i:0;}i:2;a:3:{i:0;s:67:\"MPI_Pack(inbuf, incount, datatype, outbuf, outsize, position, comm)\";i:1;d:0;i:2;i:1;}i:3;a:3:{i:0;s:48:\"MPI_Pack( sbuf, rbuf, count, datatype, op, comm)\";i:1;d:0;i:2;i:0;}i:4;a:3:{i:0;s:79:\"MPI_Pack(inbuf, incount, datatype, outbuf, outsize, position, comm,&amp;status)\";i:1;d:0;i:2;i:0;}}', '', 0, '', 0, '', 0, '', 0, '', 0, '', 0, 0, '', 1, '', 1, 0, '0', 'a:10:{s:8:\"required\";i:1;s:12:\"answerEditor\";s:4:\"text\";s:14:\"question_title\";s:51:\"Синтаксис функции упаковки?\";s:8:\"comments\";s:1:\"1\";s:4:\"hint\";s:0:\"\";s:8:\"autofill\";s:1:\"0\";s:10:\"limit_text\";s:1:\"0\";s:23:\"limit_multiple_response\";s:1:\"0\";s:17:\"file_upload_limit\";s:1:\"0\";s:16:\"file_upload_type\";s:0:\"\";}', '', 0, 0),
(3, 2, '', 'a:4:{i:0;a:3:{i:0;s:41:\"язык программирования\";i:1;d:0;i:2;i:1;}i:1;a:3:{i:0;s:32:\"новый вид болезни\";i:1;d:0;i:2;i:0;}i:2;a:3:{i:0;s:28:\"ерунда какая то\";i:1;d:0;i:2;i:0;}i:3;a:3:{i:0;s:3:\"123\";i:1;d:0;i:2;i:0;}}', '', 0, '', 0, '', 0, '', 0, '', 0, '', 0, 0, '', 1, '', 1, 0, '0', 'a:10:{s:8:\"required\";i:1;s:12:\"answerEditor\";s:4:\"text\";s:14:\"question_title\";s:20:\"Что такое JS\";s:8:\"comments\";s:1:\"1\";s:4:\"hint\";s:0:\"\";s:8:\"autofill\";s:1:\"0\";s:10:\"limit_text\";s:1:\"0\";s:23:\"limit_multiple_response\";s:1:\"0\";s:17:\"file_upload_limit\";s:1:\"0\";s:16:\"file_upload_type\";s:0:\"\";}', '', 0, 0),
(4, 2, '', 'a:4:{i:0;a:3:{i:0;s:7:\"split()\";i:1;d:0;i:2;i:1;}i:1;a:3:{i:0;s:7:\"slice()\";i:1;d:0;i:2;i:1;}i:2;a:3:{i:0;s:5:\"map()\";i:1;d:0;i:2;i:1;}i:3;a:3:{i:0;s:6:\"receve\";i:1;d:0;i:2;i:0;}}', '', 0, '', 0, '', 0, '', 0, '', 0, '', 0, 0, '', 1, '', 1, 0, '0', 'a:10:{s:8:\"required\";i:1;s:12:\"answerEditor\";s:4:\"text\";s:14:\"question_title\";s:52:\"Какие функции в JS существуюь\";s:8:\"comments\";s:1:\"1\";s:4:\"hint\";s:0:\"\";s:8:\"autofill\";s:1:\"0\";s:10:\"limit_text\";s:1:\"0\";s:23:\"limit_multiple_response\";s:1:\"0\";s:17:\"file_upload_limit\";s:1:\"0\";s:16:\"file_upload_type\";s:0:\"\";}', '', 0, 0),
(5, 2, '', 'a:0:{}', '', 0, '', 0, '', 0, '', 0, '', 0, '', 0, 0, '', 1, '', 1, 0, '0', 'a:3:{s:8:\"required\";i:1;s:12:\"answerEditor\";s:4:\"text\";s:14:\"question_title\";s:0:\"\";}', '', 0, 0),
(6, 3, '', 'a:0:{}', '', 0, '', 0, '', 0, '', 0, '', 0, '', 0, 0, '', 1, '', 1, 0, '0', 'a:3:{s:8:\"required\";i:1;s:12:\"answerEditor\";s:4:\"text\";s:14:\"question_title\";s:0:\"\";}', '', 1, 0),
(7, 1, '', 'a:5:{i:0;a:3:{i:0;s:8:\"MPI_Send\";i:1;d:0;i:2;i:0;}i:1;a:3:{i:0;s:12:\"MPI_Alltoall\";i:1;d:0;i:2;i:0;}i:2;a:3:{i:0;s:10:\"MPI_Gather\";i:1;d:0;i:2;i:1;}i:3;a:3:{i:0;s:11:\"MPI_Scatter\";i:1;d:0;i:2;i:0;}i:4;a:3:{i:0;s:13:\"MPI_Allgather\";i:1;d:0;i:2;i:0;}}', '', 0, '', 0, '', 0, '', 0, '', 0, '', 0, 0, '', 1, '', 1, 0, '0', 'a:10:{s:8:\"required\";i:1;s:12:\"answerEditor\";s:4:\"text\";s:14:\"question_title\";s:185:\"Функция собирающая сообщения от каждого из процессов в группе в приемный буфер процесса с рангом \'root\"\";s:8:\"comments\";s:1:\"1\";s:4:\"hint\";s:0:\"\";s:8:\"autofill\";s:1:\"0\";s:10:\"limit_text\";s:1:\"0\";s:23:\"limit_multiple_response\";s:1:\"0\";s:17:\"file_upload_limit\";s:1:\"0\";s:16:\"file_upload_type\";s:0:\"\";}', '', 0, 0),
(8, 1, '', 'a:5:{i:0;a:3:{i:0;s:137:\"Для получения всех собираемых данных на каждом из процессов коммуникатора\";i:1;d:0;i:2;i:0;}i:1;a:3:{i:0;s:134:\"Операция обобщенной передачи данных от всех процессоров одному процессу\";i:1;d:0;i:2;i:0;}i:2;a:3:{i:0;s:51:\"Такой функции не существует\";i:1;d:0;i:2;i:1;}i:3;a:3:{i:0;s:248:\"Рассылка данных из буфера buf, содержащего count элементов типа type с процесса, имеющего номер root, всем процессам, входящим в коммуникатор comm\";i:1;d:0;i:2;i:0;}i:4;a:3:{i:0;s:110:\"Операции передачи данных от всех процессов одному процессу.\";i:1;d:0;i:2;i:0;}}', '', 0, '', 0, '', 0, '', 0, '', 0, '', 0, 0, '', 1, '', 1, 0, '0', 'a:10:{s:8:\"required\";i:1;s:12:\"answerEditor\";s:4:\"text\";s:14:\"question_title\";s:39:\"Суть работы MPI_ScatterGather\";s:8:\"comments\";s:1:\"1\";s:4:\"hint\";s:0:\"\";s:8:\"autofill\";s:1:\"0\";s:10:\"limit_text\";s:1:\"0\";s:23:\"limit_multiple_response\";s:1:\"0\";s:17:\"file_upload_limit\";s:1:\"0\";s:16:\"file_upload_type\";s:0:\"\";}', '', 0, 0),
(9, 1, '', 'a:5:{i:0;a:3:{i:0;s:192:\"Данная процедура разбивает все множество процессов, входящих в группу comm, на непересекающиеся подгруппы\";i:1;d:0;i:2;i:1;}i:1;a:3:{i:0;s:147:\"Рассылка сообщения от процесса source всем процессам, включая рассылающий процесс.\";i:1;d:0;i:2;i:0;}i:2;a:3:{i:0;s:255:\"Блокирует работу процессов, вызвавших данную процедуру, до тех пор, пока все оставшиеся процессы группы comm также не выполнят эту процедуру.\";i:1;d:0;i:2;i:0;}i:3;a:3:{i:0;s:203:\"Уничтожает группу, ассоциированную с идентификатором comm, который после возвращения устанавливается в MPI_COMM_NULL.\";i:1;d:0;i:2;i:0;}i:4;a:3:{i:0;s:52:\"Такой функции не существует.\";i:1;d:0;i:2;i:0;}}', '', 0, '', 0, '', 0, '', 0, '', 0, '', 0, 0, '', 1, '', 1, 0, '0', 'a:10:{s:8:\"required\";i:1;s:12:\"answerEditor\";s:4:\"text\";s:14:\"question_title\";s:52:\"Суть работы функции MPI_Comm_split?\";s:8:\"comments\";s:1:\"1\";s:4:\"hint\";s:0:\"\";s:8:\"autofill\";s:1:\"0\";s:10:\"limit_text\";s:1:\"0\";s:23:\"limit_multiple_response\";s:1:\"0\";s:17:\"file_upload_limit\";s:1:\"0\";s:16:\"file_upload_type\";s:0:\"\";}', '', 0, 0),
(10, 1, '', 'a:5:{i:0;a:3:{i:0;s:9:\"MPI_Bcast\";i:1;d:0;i:2;i:0;}i:1;a:3:{i:0;s:10:\"MPI_Unpack\";i:1;d:0;i:2;i:0;}i:2;a:3:{i:0;s:13:\"MPI_Comm_rank\";i:1;d:0;i:2;i:0;}i:3;a:3:{i:0;s:9:\"MPI_Wtime\";i:1;d:0;i:2;i:0;}i:4;a:3:{i:0;s:8:\"MPI_Init\";i:1;d:0;i:2;i:1;}}', '', 0, '', 0, '', 0, '', 0, '', 0, '', 0, 0, '', 1, '', 1, 0, '0', 'a:10:{s:8:\"required\";i:1;s:12:\"answerEditor\";s:4:\"text\";s:14:\"question_title\";s:398:\"Функция инициализации. В результате выполнения этой функции создается группа процессов, в которую помещаются все процессы приложения, и создается область связи, описываемая предопределенным коммуникатором MPI_COMM_WORLD.\";s:8:\"comments\";s:1:\"1\";s:4:\"hint\";s:0:\"\";s:8:\"autofill\";s:1:\"0\";s:10:\"limit_text\";s:1:\"0\";s:23:\"limit_multiple_response\";s:1:\"0\";s:17:\"file_upload_limit\";s:1:\"0\";s:16:\"file_upload_type\";s:0:\"\";}', '', 0, 0),
(11, 1, '', 'a:5:{i:0;a:3:{i:0;s:30:\"MPI_Comm_size(COMM, &amp;rank)\";i:1;d:0;i:2;i:0;}i:1;a:3:{i:0;s:30:\"MPI_Comm_size(COMM, &amp;size)\";i:1;d:0;i:2;i:1;}i:2;a:3:{i:0;s:30:\"MPI_Comm_rank(COMM, &amp;size)\";i:1;d:0;i:2;i:0;}i:3;a:3:{i:0;s:40:\"MPI_Comm_size(COMM, &amp;&amp;&amp;size)\";i:1;d:0;i:2;i:0;}i:4;a:3:{i:0;s:30:\"MPI_Comm_size(comm, &amp;size)\";i:1;d:0;i:2;i:0;}}', '', 0, '', 0, '', 0, '', 0, '', 0, '', 0, 0, '', 1, '', 1, 0, '0', 'a:10:{s:8:\"required\";i:1;s:12:\"answerEditor\";s:4:\"text\";s:14:\"question_title\";s:120:\"Как узнать общее количество процессов в некоем коммуни-каторе COMM?\";s:8:\"comments\";s:1:\"1\";s:4:\"hint\";s:0:\"\";s:8:\"autofill\";s:1:\"0\";s:10:\"limit_text\";s:1:\"0\";s:23:\"limit_multiple_response\";s:1:\"0\";s:17:\"file_upload_limit\";s:1:\"0\";s:16:\"file_upload_type\";s:0:\"\";}', '', 0, 0),
(12, 1, '', 'a:5:{i:0;a:3:{i:0;s:30:\"MPI_Comm_size(COMM, &amp;rank)\";i:1;d:0;i:2;i:0;}i:1;a:3:{i:0;s:30:\"MPI_Comm_rank(COMM, &amp;size)\";i:1;d:0;i:2;i:0;}i:2;a:3:{i:0;s:26:\"MPI_Comm_rank(COMM, *rank)\";i:1;d:0;i:2;i:0;}i:3;a:3:{i:0;s:30:\"MPI_Comm_rank(COMM, &amp;rank)\";i:1;d:0;i:2;i:1;}i:4;a:3:{i:0;s:30:\"MPI_Comm_size(size, &amp;rank)\";i:1;d:0;i:2;i:0;}}', '', 0, '', 0, '', 0, '', 0, '', 0, '', 0, 0, '', 1, '', 1, 0, '0', 'a:10:{s:8:\"required\";i:1;s:12:\"answerEditor\";s:4:\"text\";s:14:\"question_title\";s:80:\"Какой функцией можно узнать номер процесса?\";s:8:\"comments\";s:1:\"1\";s:4:\"hint\";s:0:\"\";s:8:\"autofill\";s:1:\"0\";s:10:\"limit_text\";s:1:\"0\";s:23:\"limit_multiple_response\";s:1:\"0\";s:17:\"file_upload_limit\";s:1:\"0\";s:16:\"file_upload_type\";s:0:\"\";}', '', 0, 0),
(13, 1, '', 'a:5:{i:0;a:3:{i:0;s:15:\"MPI_LONG_DOUBLE\";i:1;d:0;i:2;i:0;}i:1;a:3:{i:0;s:8:\"MPI_LONG\";i:1;d:0;i:2;i:0;}i:2;a:3:{i:0;s:8:\"MPI_CHAR\";i:1;d:0;i:2;i:0;}i:3;a:3:{i:0;s:9:\"MPI_FLOAT\";i:1;d:0;i:2;i:0;}i:4;a:3:{i:0;s:10:\"MPI_STRING\";i:1;d:0;i:2;i:1;}}', '', 0, '', 0, '', 0, '', 0, '', 0, '', 0, 0, '', 1, '', 1, 0, '0', 'a:10:{s:8:\"required\";i:1;s:12:\"answerEditor\";s:4:\"text\";s:14:\"question_title\";s:49:\"Какого типа данных нет в MPI?\";s:8:\"comments\";s:1:\"1\";s:4:\"hint\";s:0:\"\";s:8:\"autofill\";s:1:\"0\";s:10:\"limit_text\";s:1:\"0\";s:23:\"limit_multiple_response\";s:1:\"0\";s:17:\"file_upload_limit\";s:1:\"0\";s:16:\"file_upload_type\";s:0:\"\";}', '', 0, 0),
(14, 1, '', 'a:5:{i:0;a:3:{i:0;s:14:\"MPI_Any_Source\";i:1;d:0;i:2;i:0;}i:1;a:3:{i:0;s:11:\"MPI_ANY_TAG\";i:1;d:0;i:2;i:0;}i:2;a:3:{i:0;s:14:\"MPI_ANY_SOURCE\";i:1;d:0;i:2;i:1;}i:3;a:3:{i:0;s:11:\"MPI_TAG_ANY\";i:1;d:0;i:2;i:0;}i:4;a:3:{i:0;s:14:\"MPI_SOURCE_ANY\";i:1;d:0;i:2;i:0;}}', '', 0, '', 0, '', 0, '', 0, '', 0, '', 0, 0, '', 1, '', 1, 0, '0', 'a:10:{s:8:\"required\";i:1;s:12:\"answerEditor\";s:4:\"text\";s:14:\"question_title\";s:149:\"Какой параметр в функции MPI_Recv() позволяет принимать сообщение от любого процесса?\";s:8:\"comments\";s:1:\"1\";s:4:\"hint\";s:0:\"\";s:8:\"autofill\";s:1:\"0\";s:10:\"limit_text\";s:1:\"0\";s:23:\"limit_multiple_response\";s:1:\"0\";s:17:\"file_upload_limit\";s:1:\"0\";s:16:\"file_upload_type\";s:0:\"\";}', '', 0, 0);

-- --------------------------------------------------------

--
-- Структура таблицы `wp_mlw_quizzes`
--

CREATE TABLE `wp_mlw_quizzes` (
  `quiz_id` mediumint NOT NULL,
  `quiz_name` text NOT NULL,
  `message_before` text NOT NULL,
  `message_after` text NOT NULL,
  `message_comment` text NOT NULL,
  `message_end_template` text NOT NULL,
  `user_email_template` longtext NOT NULL,
  `admin_email_template` text NOT NULL,
  `submit_button_text` text NOT NULL,
  `name_field_text` text NOT NULL,
  `business_field_text` text NOT NULL,
  `email_field_text` text NOT NULL,
  `phone_field_text` text NOT NULL,
  `comment_field_text` text NOT NULL,
  `email_from_text` text NOT NULL,
  `question_answer_template` text NOT NULL,
  `leaderboard_template` text NOT NULL,
  `quiz_system` int NOT NULL,
  `randomness_order` int NOT NULL,
  `loggedin_user_contact` int NOT NULL,
  `show_score` int NOT NULL,
  `send_user_email` int NOT NULL,
  `send_admin_email` int NOT NULL,
  `contact_info_location` int NOT NULL,
  `user_name` int NOT NULL,
  `user_comp` int NOT NULL,
  `user_email` int NOT NULL,
  `user_phone` int NOT NULL,
  `admin_email` text NOT NULL,
  `comment_section` int NOT NULL,
  `question_from_total` int NOT NULL,
  `total_user_tries` int NOT NULL,
  `total_user_tries_text` text NOT NULL,
  `certificate_template` text NOT NULL,
  `social_media` int NOT NULL,
  `social_media_text` text NOT NULL,
  `pagination` int NOT NULL,
  `pagination_text` text NOT NULL,
  `timer_limit` int NOT NULL,
  `quiz_stye` text NOT NULL,
  `question_numbering` int NOT NULL,
  `quiz_settings` text NOT NULL,
  `theme_selected` text NOT NULL,
  `last_activity` datetime NOT NULL,
  `require_log_in` int NOT NULL,
  `require_log_in_text` text NOT NULL,
  `limit_total_entries` int NOT NULL,
  `limit_total_entries_text` text NOT NULL,
  `scheduled_timeframe` text NOT NULL,
  `scheduled_timeframe_text` text NOT NULL,
  `disable_answer_onselect` int NOT NULL,
  `ajax_show_correct` int NOT NULL,
  `quiz_views` int NOT NULL,
  `quiz_taken` int NOT NULL,
  `deleted` int NOT NULL,
  `quiz_author_id` int NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `wp_mlw_quizzes`
--

INSERT INTO `wp_mlw_quizzes` (`quiz_id`, `quiz_name`, `message_before`, `message_after`, `message_comment`, `message_end_template`, `user_email_template`, `admin_email_template`, `submit_button_text`, `name_field_text`, `business_field_text`, `email_field_text`, `phone_field_text`, `comment_field_text`, `email_from_text`, `question_answer_template`, `leaderboard_template`, `quiz_system`, `randomness_order`, `loggedin_user_contact`, `show_score`, `send_user_email`, `send_admin_email`, `contact_info_location`, `user_name`, `user_comp`, `user_email`, `user_phone`, `admin_email`, `comment_section`, `question_from_total`, `total_user_tries`, `total_user_tries_text`, `certificate_template`, `social_media`, `social_media_text`, `pagination`, `pagination_text`, `timer_limit`, `quiz_stye`, `question_numbering`, `quiz_settings`, `theme_selected`, `last_activity`, `require_log_in`, `require_log_in_text`, `limit_total_entries`, `limit_total_entries_text`, `scheduled_timeframe`, `scheduled_timeframe_text`, `disable_answer_onselect`, `ajax_show_correct`, `quiz_views`, `quiz_taken`, `deleted`, `quiz_author_id`) VALUES
(1, 'Тест по mpi', 'Welcome to your %QUIZ_NAME%', 'a:1:{i:0;a:3:{s:10:\"conditions\";a:1:{i:0;a:3:{s:8:\"criteria\";s:6:\"points\";s:8:\"operator\";s:13:\"greater-equal\";s:5:\"value\";s:1:\"0\";}}s:4:\"page\";s:55:\"Тест пройден!<br /><br />%QUESTIONS_ANSWERS%\";s:8:\"redirect\";b:0;}}', 'Please fill in the comment box below.', '', 'a:1:{i:0;a:5:{s:10:\"conditions\";a:1:{i:0;a:3:{s:8:\"criteria\";s:6:\"points\";s:8:\"operator\";s:13:\"greater-equal\";s:5:\"value\";s:1:\"0\";}}s:2:\"to\";s:22:\"489257mihail@gmail.com\";s:7:\"subject\";s:56:\"Результаты прохождения: %QUIZ_NAME%\";s:7:\"content\";s:305:\"<span style=\"vertical-align: inherit;\">Имя студента: %USER_NAME%<br />Время выполнения теста %TIMER_MINUTES%<br />Количество правильных ответов: %CORRECT_SCORE% %<br />Дата прохождения тестирования: %CURRENT_DATE%</span>\";s:7:\"replyTo\";b:0;}}', '%QUESTIONS_ANSWERS_EMAIL%', 'Submit', 'Name', 'Business', 'Email', 'Phone Number', 'Comments', 'Wordpress', '%QUESTION%<br />%USER_ANSWERS_DEFAULT%', '', 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, '489257mihail@gmail.com', 1, 0, 0, 'You have utilized all of your attempts to pass this quiz.', '', 0, 'I just scored %CORRECT_SCORE%% on %QUIZ_NAME%!', 0, 'Next', 0, '', 0, 'a:5:{s:12:\"quiz_options\";s:1528:\"a:43:{s:9:\"quiz_name\";s:17:\"Тест по mpi\";s:9:\"form_type\";s:1:\"0\";s:6:\"system\";s:1:\"0\";s:11:\"timer_limit\";i:10;s:14:\"score_roundoff\";s:0:\"\";s:12:\"progress_bar\";s:1:\"1\";s:14:\"require_log_in\";s:1:\"1\";s:10:\"pagination\";i:0;s:29:\"enable_result_after_timer_end\";s:1:\"1\";s:27:\"skip_validation_time_expire\";s:1:\"1\";s:16:\"total_user_tries\";i:0;s:19:\"limit_total_entries\";i:0;s:19:\"question_from_total\";i:0;s:20:\"scheduled_time_start\";s:0:\"\";s:18:\"scheduled_time_end\";s:0:\"\";s:16:\"randomness_order\";s:1:\"0\";s:15:\"randon_category\";s:0:\"\";s:21:\"contact_info_location\";s:1:\"0\";s:21:\"loggedin_user_contact\";s:1:\"0\";s:15:\"comment_section\";s:1:\"1\";s:18:\"question_numbering\";s:1:\"0\";s:15:\"store_responses\";s:1:\"1\";s:23:\"disable_answer_onselect\";s:1:\"0\";s:17:\"ajax_show_correct\";s:1:\"0\";s:24:\"contact_disable_autofill\";s:1:\"0\";s:21:\"form_disable_autofill\";s:1:\"0\";s:22:\"show_category_on_front\";s:1:\"0\";s:22:\"enable_quick_result_mc\";s:1:\"0\";s:17:\"end_quiz_if_wrong\";s:1:\"0\";s:32:\"enable_quick_correct_answer_info\";s:1:\"0\";s:25:\"enable_retake_quiz_button\";s:1:\"0\";s:22:\"enable_pagination_quiz\";s:1:\"0\";s:22:\"enable_deselect_option\";s:1:\"0\";s:29:\"disable_description_on_result\";s:1:\"0\";s:34:\"disable_scroll_next_previous_click\";s:1:\"0\";s:14:\"quiz_animation\";s:0:\"\";s:20:\"result_page_fb_image\";s:84:\"http://brainfood-project/wp-content/plugins/quiz-master-next/assets/icon-200x200.png\";s:14:\"legacy_options\";s:0:\"\";s:12:\"social_media\";s:1:\"0\";s:9:\"user_name\";s:1:\"2\";s:9:\"user_comp\";s:1:\"2\";s:10:\"user_email\";s:1:\"2\";s:10:\"user_phone\";s:1:\"2\";}\";s:17:\"quiz_leaderboards\";s:28:\"a:1:{s:8:\"template\";s:0:\"\";}\";s:9:\"quiz_text\";s:2025:\"a:30:{s:14:\"message_before\";s:11:\"%QUIZ_NAME%\";s:15:\"message_comment\";s:37:\"Please fill in the comment box below.\";s:20:\"message_end_template\";s:0:\"\";s:18:\"comment_field_text\";s:33:\"Поле комментариев\";s:24:\"question_answer_template\";s:38:\"%QUESTION%<br />%USER_ANSWERS_DEFAULT%\";s:18:\"submit_button_text\";s:18:\"Отправить\";s:15:\"name_field_text\";s:4:\"Name\";s:19:\"business_field_text\";s:8:\"Business\";s:16:\"email_field_text\";s:5:\"Email\";s:16:\"phone_field_text\";s:12:\"Phone Number\";s:21:\"total_user_tries_text\";s:57:\"You have utilized all of your attempts to pass this quiz.\";s:20:\"twitter_sharing_text\";s:46:\"I just scored %CORRECT_SCORE%% on %QUIZ_NAME%!\";s:21:\"facebook_sharing_text\";s:46:\"I just scored %CORRECT_SCORE%% on %QUIZ_NAME%!\";s:20:\"previous_button_text\";s:20:\"Предыдущий\";s:16:\"next_button_text\";s:18:\"Следующий\";s:19:\"require_log_in_text\";s:38:\"This quiz is for logged in users only.\";s:24:\"limit_total_entries_text\";s:107:\"Unfortunately, this quiz has a limited amount of entries it can recieve and has already reached that limit.\";s:24:\"scheduled_timeframe_text\";s:0:\"\";s:30:\"question_answer_email_template\";s:121:\"%QUESTION%<br />Answer Provided: %USER_ANSWER%<br/>Correct Answer: %CORRECT_ANSWER%<br/>Comments Entered: %USER_COMMENTS%\";s:14:\"button_section\";s:0:\"\";s:23:\"validation_text_section\";s:0:\"\";s:16:\"empty_error_text\";s:80:\"Пожалуйста, заполните все необходимые поля!\";s:16:\"email_error_text\";s:61:\"Неверный адрес электронной почты\";s:17:\"number_error_text\";s:35:\"Неправильный номер\";s:20:\"incorrect_error_text\";s:27:\"Неверная капча\";s:18:\"other_text_section\";s:0:\"\";s:9:\"hint_text\";s:29:\"Текст подсказки\";s:32:\"quick_result_correct_answer_text\";s:55:\"Правильный ответ на сообщение\";s:30:\"quick_result_wrong_answer_text\";s:61:\"Сообщение с неправильным ответом\";s:14:\"legacy_options\";s:0:\"\";}\";s:6:\"qpages\";s:259:\"a:1:{i:0;a:5:{s:2:\"id\";s:1:\"1\";s:6:\"quizID\";s:1:\"1\";s:7:\"pagekey\";s:8:\"r7FvDE2Y\";s:12:\"hide_prevbtn\";s:1:\"0\";s:9:\"questions\";a:10:{i:0;s:1:\"1\";i:1;s:1:\"2\";i:2;s:1:\"7\";i:3;s:1:\"8\";i:4;s:1:\"9\";i:5;s:2:\"10\";i:6;s:2:\"11\";i:7;s:2:\"12\";i:8;s:2:\"13\";i:9;s:2:\"14\";}}}\";s:5:\"pages\";s:142:\"a:1:{i:0;a:10:{i:0;s:1:\"1\";i:1;s:1:\"2\";i:2;s:1:\"7\";i:3;s:1:\"8\";i:4;s:1:\"9\";i:5;s:2:\"10\";i:6;s:2:\"11\";i:7;s:2:\"12\";i:8;s:2:\"13\";i:9;s:2:\"14\";}}\";}', 'primary', '2021-05-26 19:30:15', 0, 'This quiz is for logged in users only.', 0, 'Unfortunately, this quiz has a limited amount of entries it can recieve and has already reached that limit.', '', '', 0, 0, 53, 6, 0, 1),
(2, 'Тест по Javascript', 'Welcome to your %QUIZ_NAME%', 'a:1:{i:0;a:3:{s:10:\"conditions\";a:0:{}s:4:\"page\";s:132:\"Thanks for submitting your response! You can edit this message on the \"Results Pages\" tab. <br>%CONTACT_ALL% <br>%QUESTIONS_ANSWERS%\";s:8:\"redirect\";b:0;}}', 'Please fill in the comment box below.', '', 'a:1:{i:0;a:5:{s:10:\"conditions\";a:1:{i:0;a:3:{s:8:\"criteria\";s:6:\"points\";s:8:\"operator\";s:13:\"greater-equal\";s:5:\"value\";s:1:\"0\";}}s:2:\"to\";s:22:\"489257mihail@gmail.com\";s:7:\"subject\";s:58:\"Результаты тестирования: %QUIZ_NAME%\";s:7:\"content\";s:365:\"<span style=\"vertical-align: inherit;\"><span style=\"vertical-align: inherit;\"><span style=\"vertical-align: inherit;\"><span style=\"vertical-align: inherit;\">Имя студента: %USER_NAME%<br />Время выполнения теста %TIMER_MINUTES%<br />Количество правильных ответов: %CORRECT_SCORE% %</span></span></span></span>\";s:7:\"replyTo\";b:0;}}', '%QUESTIONS_ANSWERS_EMAIL%', 'Submit', 'Name', 'Business', 'Email', 'Phone Number', 'Comments', 'Wordpress', '%QUESTION%<br />%USER_ANSWERS_DEFAULT%', '', 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, '489257mihail@gmail.com', 1, 0, 0, 'You have utilized all of your attempts to pass this quiz.', '', 0, 'I just scored %CORRECT_SCORE%% on %QUIZ_NAME%!', 0, 'Next', 0, '', 0, 'a:5:{s:12:\"quiz_options\";s:1424:\"a:43:{s:9:\"quiz_name\";s:24:\"Тест по Javascript\";s:9:\"form_type\";s:1:\"0\";s:6:\"system\";s:1:\"0\";s:11:\"timer_limit\";s:2:\"10\";s:14:\"score_roundoff\";i:0;s:12:\"progress_bar\";i:0;s:14:\"require_log_in\";i:0;s:10:\"pagination\";i:0;s:29:\"enable_result_after_timer_end\";i:0;s:27:\"skip_validation_time_expire\";i:1;s:16:\"total_user_tries\";i:0;s:19:\"limit_total_entries\";i:0;s:19:\"question_from_total\";i:0;s:20:\"scheduled_time_start\";s:0:\"\";s:18:\"scheduled_time_end\";s:0:\"\";s:16:\"randomness_order\";i:0;s:15:\"randon_category\";s:0:\"\";s:21:\"contact_info_location\";i:0;s:21:\"loggedin_user_contact\";i:0;s:15:\"comment_section\";i:1;s:18:\"question_numbering\";i:0;s:15:\"store_responses\";i:1;s:23:\"disable_answer_onselect\";i:0;s:17:\"ajax_show_correct\";i:0;s:24:\"contact_disable_autofill\";i:0;s:21:\"form_disable_autofill\";i:0;s:22:\"show_category_on_front\";i:0;s:22:\"enable_quick_result_mc\";i:0;s:17:\"end_quiz_if_wrong\";i:0;s:32:\"enable_quick_correct_answer_info\";i:0;s:25:\"enable_retake_quiz_button\";i:0;s:22:\"enable_pagination_quiz\";i:0;s:22:\"enable_deselect_option\";i:0;s:29:\"disable_description_on_result\";i:0;s:34:\"disable_scroll_next_previous_click\";i:0;s:14:\"quiz_animation\";s:0:\"\";s:20:\"result_page_fb_image\";s:84:\"http://brainfood-project/wp-content/plugins/quiz-master-next/assets/icon-200x200.png\";s:14:\"legacy_options\";s:0:\"\";s:12:\"social_media\";i:0;s:9:\"user_name\";i:2;s:9:\"user_comp\";i:2;s:10:\"user_email\";i:2;s:10:\"user_phone\";i:2;}\";s:17:\"quiz_leaderboards\";s:28:\"a:1:{s:8:\"template\";s:0:\"\";}\";s:9:\"quiz_text\";s:1823:\"a:30:{s:14:\"message_before\";s:27:\"Welcome to your %QUIZ_NAME%\";s:15:\"message_comment\";s:37:\"Please fill in the comment box below.\";s:20:\"message_end_template\";s:0:\"\";s:18:\"comment_field_text\";s:8:\"Comments\";s:24:\"question_answer_template\";s:38:\"%QUESTION%<br />%USER_ANSWERS_DEFAULT%\";s:18:\"submit_button_text\";s:6:\"Submit\";s:15:\"name_field_text\";s:4:\"Name\";s:19:\"business_field_text\";s:8:\"Business\";s:16:\"email_field_text\";s:5:\"Email\";s:16:\"phone_field_text\";s:12:\"Phone Number\";s:21:\"total_user_tries_text\";s:57:\"You have utilized all of your attempts to pass this quiz.\";s:20:\"twitter_sharing_text\";s:46:\"I just scored %CORRECT_SCORE%% on %QUIZ_NAME%!\";s:21:\"facebook_sharing_text\";s:46:\"I just scored %CORRECT_SCORE%% on %QUIZ_NAME%!\";s:20:\"previous_button_text\";s:8:\"Previous\";s:16:\"next_button_text\";s:4:\"Next\";s:19:\"require_log_in_text\";s:38:\"This quiz is for logged in users only.\";s:24:\"limit_total_entries_text\";s:107:\"Unfortunately, this quiz has a limited amount of entries it can recieve and has already reached that limit.\";s:24:\"scheduled_timeframe_text\";s:0:\"\";s:30:\"question_answer_email_template\";s:121:\"%QUESTION%<br />Answer Provided: %USER_ANSWER%<br/>Correct Answer: %CORRECT_ANSWER%<br/>Comments Entered: %USER_COMMENTS%\";s:14:\"button_section\";i:0;s:23:\"validation_text_section\";i:0;s:16:\"empty_error_text\";s:36:\"Please complete all required fields!\";s:16:\"email_error_text\";s:27:\"Not a valid e-mail address!\";s:17:\"number_error_text\";s:28:\"This field must be a number!\";s:20:\"incorrect_error_text\";s:32:\"The entered text is not correct!\";s:18:\"other_text_section\";i:0;s:9:\"hint_text\";s:4:\"Hint\";s:32:\"quick_result_correct_answer_text\";s:42:\"Correct! You have selected correct answer.\";s:30:\"quick_result_wrong_answer_text\";s:38:\"Wrong! You have selected wrong answer.\";s:14:\"legacy_options\";s:0:\"\";}\";s:6:\"qpages\";s:163:\"a:1:{i:0;a:5:{s:2:\"id\";s:1:\"1\";s:6:\"quizID\";s:1:\"2\";s:7:\"pagekey\";s:13:\"60af8b5e2d13f\";s:12:\"hide_prevbtn\";s:1:\"0\";s:9:\"questions\";a:2:{i:0;s:1:\"3\";i:1;s:1:\"4\";}}}\";s:5:\"pages\";s:40:\"a:1:{i:0;a:2:{i:0;s:1:\"3\";i:1;s:1:\"4\";}}\";}', 'turquoise', '2021-05-27 14:06:51', 0, 'This quiz is for logged in users only.', 0, 'Unfortunately, this quiz has a limited amount of entries it can recieve and has already reached that limit.', '', '', 0, 0, 17, 10, 0, 1),
(3, 'Тест по mpi2', 'Welcome to your %QUIZ_NAME%', 'Thanks for submitting your response! You can edit this message on the \"Results Pages\" tab. <br>%CONTACT_ALL% <br>%QUESTIONS_ANSWERS%', 'Please fill in the comment box below.', '', '%QUESTIONS_ANSWERS_EMAIL%', '%QUESTIONS_ANSWERS_EMAIL%', 'Submit', 'Имя', 'Бизнес', 'Электронное письмо', 'Phone Number', 'Comments', 'Wordpress', '%QUESTION%<br />%USER_ANSWERS_DEFAULT%', '', 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, '489257mihail@gmail.com', 1, 0, 0, 'You have utilized all of your attempts to pass this quiz.', '', 0, 'I just scored %CORRECT_SCORE%% on %QUIZ_NAME%!', 0, 'Следующий', 0, '', 0, 'a:5:{s:12:\"quiz_options\";s:1417:\"a:43:{s:9:\"quiz_name\";s:18:\"Тест по mpi2\";s:9:\"form_type\";s:1:\"0\";s:6:\"system\";s:1:\"0\";s:14:\"require_log_in\";s:1:\"0\";s:14:\"score_roundoff\";i:0;s:12:\"progress_bar\";i:0;s:10:\"pagination\";i:0;s:11:\"timer_limit\";i:0;s:29:\"enable_result_after_timer_end\";i:0;s:27:\"skip_validation_time_expire\";i:1;s:16:\"total_user_tries\";i:0;s:19:\"limit_total_entries\";i:0;s:19:\"question_from_total\";i:0;s:20:\"scheduled_time_start\";s:0:\"\";s:18:\"scheduled_time_end\";s:0:\"\";s:16:\"randomness_order\";i:0;s:15:\"randon_category\";s:0:\"\";s:21:\"contact_info_location\";i:0;s:21:\"loggedin_user_contact\";i:0;s:15:\"comment_section\";i:1;s:18:\"question_numbering\";i:0;s:15:\"store_responses\";i:1;s:23:\"disable_answer_onselect\";i:0;s:17:\"ajax_show_correct\";i:0;s:24:\"contact_disable_autofill\";i:0;s:21:\"form_disable_autofill\";i:0;s:22:\"show_category_on_front\";i:0;s:22:\"enable_quick_result_mc\";i:0;s:17:\"end_quiz_if_wrong\";i:0;s:32:\"enable_quick_correct_answer_info\";i:0;s:25:\"enable_retake_quiz_button\";i:0;s:22:\"enable_pagination_quiz\";i:0;s:22:\"enable_deselect_option\";i:0;s:29:\"disable_description_on_result\";i:0;s:34:\"disable_scroll_next_previous_click\";i:0;s:14:\"quiz_animation\";s:0:\"\";s:20:\"result_page_fb_image\";s:84:\"http://brainfood-project/wp-content/plugins/quiz-master-next/assets/icon-200x200.png\";s:14:\"legacy_options\";s:0:\"\";s:12:\"social_media\";i:0;s:9:\"user_name\";i:2;s:9:\"user_comp\";i:2;s:10:\"user_email\";i:2;s:10:\"user_phone\";i:2;}\";s:17:\"quiz_leaderboards\";s:28:\"a:1:{s:8:\"template\";s:0:\"\";}\";s:9:\"quiz_text\";s:1904:\"a:30:{s:14:\"message_before\";s:27:\"Welcome to your %QUIZ_NAME%\";s:15:\"message_comment\";s:37:\"Please fill in the comment box below.\";s:20:\"message_end_template\";s:0:\"\";s:18:\"comment_field_text\";s:8:\"Comments\";s:24:\"question_answer_template\";s:38:\"%QUESTION%<br />%USER_ANSWERS_DEFAULT%\";s:18:\"submit_button_text\";s:6:\"Submit\";s:15:\"name_field_text\";s:6:\"Имя\";s:19:\"business_field_text\";s:12:\"Бизнес\";s:16:\"email_field_text\";s:35:\"Электронное письмо\";s:16:\"phone_field_text\";s:12:\"Phone Number\";s:21:\"total_user_tries_text\";s:57:\"You have utilized all of your attempts to pass this quiz.\";s:20:\"twitter_sharing_text\";s:46:\"I just scored %CORRECT_SCORE%% on %QUIZ_NAME%!\";s:21:\"facebook_sharing_text\";s:46:\"I just scored %CORRECT_SCORE%% on %QUIZ_NAME%!\";s:20:\"previous_button_text\";s:20:\"Предыдущий\";s:16:\"next_button_text\";s:18:\"Следующий\";s:19:\"require_log_in_text\";s:38:\"This quiz is for logged in users only.\";s:24:\"limit_total_entries_text\";s:107:\"Unfortunately, this quiz has a limited amount of entries it can recieve and has already reached that limit.\";s:24:\"scheduled_timeframe_text\";s:0:\"\";s:30:\"question_answer_email_template\";s:121:\"%QUESTION%<br />Answer Provided: %USER_ANSWER%<br/>Correct Answer: %CORRECT_ANSWER%<br/>Comments Entered: %USER_COMMENTS%\";s:14:\"button_section\";i:0;s:23:\"validation_text_section\";i:0;s:16:\"empty_error_text\";s:36:\"Please complete all required fields!\";s:16:\"email_error_text\";s:27:\"Not a valid e-mail address!\";s:17:\"number_error_text\";s:28:\"This field must be a number!\";s:20:\"incorrect_error_text\";s:32:\"The entered text is not correct!\";s:18:\"other_text_section\";i:0;s:9:\"hint_text\";s:18:\"намекнуть\";s:32:\"quick_result_correct_answer_text\";s:42:\"Correct! You have selected correct answer.\";s:30:\"quick_result_wrong_answer_text\";s:38:\"Wrong! You have selected wrong answer.\";s:14:\"legacy_options\";s:0:\"\";}\";s:6:\"qpages\";s:6:\"a:0:{}\";s:5:\"pages\";s:6:\"a:0:{}\";}', 'primary', '2021-06-04 19:56:15', 0, 'This quiz is for logged in users only.', 0, 'Unfortunately, this quiz has a limited amount of entries it can recieve and has already reached that limit.', '', '', 0, 0, 0, 0, 1, 1);

-- --------------------------------------------------------

--
-- Структура таблицы `wp_mlw_results`
--

CREATE TABLE `wp_mlw_results` (
  `result_id` mediumint NOT NULL,
  `quiz_id` int NOT NULL,
  `quiz_name` text NOT NULL,
  `quiz_system` int NOT NULL,
  `point_score` float NOT NULL,
  `correct_score` int NOT NULL,
  `correct` int NOT NULL,
  `total` int NOT NULL,
  `name` text NOT NULL,
  `business` text NOT NULL,
  `email` text NOT NULL,
  `phone` text NOT NULL,
  `user` int NOT NULL,
  `user_ip` text NOT NULL,
  `time_taken` text NOT NULL,
  `time_taken_real` datetime NOT NULL,
  `quiz_results` mediumtext NOT NULL,
  `deleted` int NOT NULL,
  `unique_id` varchar(255) NOT NULL,
  `form_type` int NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `wp_mlw_results`
--

INSERT INTO `wp_mlw_results` (`result_id`, `quiz_id`, `quiz_name`, `quiz_system`, `point_score`, `correct_score`, `correct`, `total`, `name`, `business`, `email`, `phone`, `user`, `user_ip`, `time_taken`, `time_taken_real`, `quiz_results`, `deleted`, `unique_id`, `form_type`) VALUES
(1, 1, 'Тест по mpi', 0, 0, 100, 1, 1, 'admin', 'None', '489257mihail@gmail.com', 'None', 1, '127.0.0.1', '07:35:52 PM 05/26/2021', '2021-05-26 19:35:52', 'a:9:{i:0;i:16;i:1;a:1:{i:0;a:11:{i:0;s:21:\"Add description here!\";i:1;s:44:\"функция передачи данных\";i:2;s:44:\"функция передачи данных\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"1\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:28:\"Функция receve это\";s:17:\"user_compare_text\";s:0:\"\";}}i:2;s:0:\"\";s:7:\"contact\";a:0:{}s:8:\"timer_ms\";i:16311;s:8:\"pagetime\";a:0:{}s:16:\"hidden_questions\";N;s:21:\"total_possible_points\";i:0;s:25:\"total_attempted_questions\";i:1;}', 0, 'fdcfa4575bdef8d3284eb0ebee118d2c', 0),
(2, 1, 'Тест по mpi', 0, 0, 100, 2, 2, 'admin', 'None', '489257mihail@gmail.com', 'None', 1, '127.0.0.1', '07:51:31 PM 05/26/2021', '2021-05-26 19:51:31', 'a:9:{i:0;i:43;i:1;a:2:{i:0;a:11:{i:0;s:21:\"Add description here!\";i:1;s:44:\"функция передачи данных\";i:2;s:44:\"функция передачи данных\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"1\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:28:\"Функция receve это\";s:17:\"user_compare_text\";s:0:\"\";}i:1;a:11:{i:0;s:0:\"\";i:1;s:3:\"213\";i:2;s:3:\"213\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"2\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:30:\"Функция receve это 1\";s:17:\"user_compare_text\";s:0:\"\";}}i:2;s:0:\"\";s:7:\"contact\";a:0:{}s:8:\"timer_ms\";i:43991;s:8:\"pagetime\";a:0:{}s:16:\"hidden_questions\";N;s:21:\"total_possible_points\";i:0;s:25:\"total_attempted_questions\";i:2;}', 0, '42602b43bedd2022c0199b4a5dc689d5', 0),
(3, 1, 'Тест по mpi', 0, 0, 50, 1, 2, 'admin12323', 'None', '13224@gmail.com', 'None', 4, '127.0.0.1', '02:45:31 PM 05/27/2021', '2021-05-27 14:45:31', 'a:9:{i:0;i:6;i:1;a:2:{i:0;a:11:{i:0;s:21:\"Add description here!\";i:1;s:9:\"1ысыв\";i:2;s:44:\"функция передачи данных\";i:3;s:0:\"\";s:7:\"correct\";s:9:\"incorrect\";s:2:\"id\";s:1:\"1\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:28:\"Функция receve это\";s:17:\"user_compare_text\";s:0:\"\";}i:1;a:11:{i:0;s:0:\"\";i:1;s:3:\"213\";i:2;s:3:\"213\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"2\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:30:\"Функция receve это 1\";s:17:\"user_compare_text\";s:0:\"\";}}i:2;s:0:\"\";s:7:\"contact\";a:0:{}s:8:\"timer_ms\";i:6316;s:8:\"pagetime\";a:0:{}s:16:\"hidden_questions\";N;s:21:\"total_possible_points\";i:0;s:25:\"total_attempted_questions\";i:2;}', 0, '24442cf94db9400df03169f4472c7344', 0),
(4, 2, 'Тест по Javascript', 0, 0, 50, 1, 2, 'admin', 'None', '489257mihail@gmail.com', 'None', 1, '127.0.0.1', '03:26:07 PM 05/27/2021', '2021-05-27 15:26:07', 'a:9:{i:0;i:6;i:1;a:2:{i:0;a:11:{i:0;s:0:\"\";i:1;s:41:\"язык программирования\";i:2;s:41:\"язык программирования\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"3\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:20:\"Что такое JS\";s:17:\"user_compare_text\";s:0:\"\";}i:1;a:11:{i:0;s:0:\"\";i:1;s:6:\"receve\";i:2;s:21:\"split().slice().map()\";i:3;s:0:\"\";s:7:\"correct\";s:9:\"incorrect\";s:2:\"id\";s:1:\"4\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:52:\"Какие функции в JS существуюь\";s:17:\"user_compare_text\";s:0:\"\";}}i:2;s:0:\"\";s:7:\"contact\";a:0:{}s:8:\"timer_ms\";i:6037;s:8:\"pagetime\";a:0:{}s:16:\"hidden_questions\";N;s:21:\"total_possible_points\";i:0;s:25:\"total_attempted_questions\";i:2;}', 0, 'fd191e909cfc6e079bd7600666288958', 0),
(5, 2, 'Тест по Javascript', 0, 0, 50, 1, 2, 'admin', 'None', '489257mihail@gmail.com', 'None', 1, '127.0.0.1', '03:34:17 PM 05/27/2021', '2021-05-27 15:34:17', 'a:9:{i:0;i:8;i:1;a:2:{i:0;a:11:{i:0;s:0:\"\";i:1;s:41:\"язык программирования\";i:2;s:41:\"язык программирования\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"3\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:20:\"Что такое JS\";s:17:\"user_compare_text\";s:0:\"\";}i:1;a:11:{i:0;s:0:\"\";i:1;s:6:\"receve\";i:2;s:21:\"split().slice().map()\";i:3;s:0:\"\";s:7:\"correct\";s:9:\"incorrect\";s:2:\"id\";s:1:\"4\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:52:\"Какие функции в JS существуюь\";s:17:\"user_compare_text\";s:0:\"\";}}i:2;s:0:\"\";s:7:\"contact\";a:0:{}s:8:\"timer_ms\";i:8203;s:8:\"pagetime\";a:0:{}s:16:\"hidden_questions\";N;s:21:\"total_possible_points\";i:0;s:25:\"total_attempted_questions\";i:2;}', 0, '817d3fd89c319c23af5ed204c90d4950', 0),
(6, 2, 'Тест по Javascript', 0, 0, 50, 1, 2, 'admin', 'None', '489257mihail@gmail.com', 'None', 1, '127.0.0.1', '03:52:58 PM 05/27/2021', '2021-05-27 15:52:58', 'a:9:{i:0;i:6;i:1;a:2:{i:0;a:11:{i:0;s:0:\"\";i:1;s:41:\"язык программирования\";i:2;s:41:\"язык программирования\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"3\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:20:\"Что такое JS\";s:17:\"user_compare_text\";s:0:\"\";}i:1;a:11:{i:0;s:0:\"\";i:1;s:6:\"receve\";i:2;s:21:\"split().slice().map()\";i:3;s:0:\"\";s:7:\"correct\";s:9:\"incorrect\";s:2:\"id\";s:1:\"4\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:52:\"Какие функции в JS существуюь\";s:17:\"user_compare_text\";s:0:\"\";}}i:2;s:0:\"\";s:7:\"contact\";a:0:{}s:8:\"timer_ms\";i:6657;s:8:\"pagetime\";a:0:{}s:16:\"hidden_questions\";N;s:21:\"total_possible_points\";i:0;s:25:\"total_attempted_questions\";i:2;}', 0, '2e25cffd1ea46b6da6ef7bf671f13e9e', 0),
(7, 2, 'Тест по Javascript', 0, 0, 50, 1, 2, 'admin', 'None', '489257mihail@gmail.com', 'None', 1, '127.0.0.1', '04:03:08 PM 05/27/2021', '2021-05-27 16:03:08', 'a:9:{i:0;i:12;i:1;a:2:{i:0;a:11:{i:0;s:0:\"\";i:1;s:41:\"язык программирования\";i:2;s:41:\"язык программирования\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"3\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:20:\"Что такое JS\";s:17:\"user_compare_text\";s:0:\"\";}i:1;a:11:{i:0;s:0:\"\";i:1;s:6:\"receve\";i:2;s:21:\"split().slice().map()\";i:3;s:0:\"\";s:7:\"correct\";s:9:\"incorrect\";s:2:\"id\";s:1:\"4\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:52:\"Какие функции в JS существуюь\";s:17:\"user_compare_text\";s:0:\"\";}}i:2;s:0:\"\";s:7:\"contact\";a:0:{}s:8:\"timer_ms\";i:12418;s:8:\"pagetime\";a:0:{}s:16:\"hidden_questions\";N;s:21:\"total_possible_points\";i:0;s:25:\"total_attempted_questions\";i:2;}', 0, '19db915e4c609191fbe09fae24e226fc', 0),
(8, 2, 'Тест по Javascript', 0, 0, 50, 1, 2, 'admin', 'None', '489257mihail@gmail.com', 'None', 1, '127.0.0.1', '04:16:43 PM 05/27/2021', '2021-05-27 16:16:43', 'a:9:{i:0;i:8;i:1;a:2:{i:0;a:11:{i:0;s:0:\"\";i:1;s:41:\"язык программирования\";i:2;s:41:\"язык программирования\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"3\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:20:\"Что такое JS\";s:17:\"user_compare_text\";s:0:\"\";}i:1;a:11:{i:0;s:0:\"\";i:1;s:6:\"receve\";i:2;s:21:\"split().slice().map()\";i:3;s:0:\"\";s:7:\"correct\";s:9:\"incorrect\";s:2:\"id\";s:1:\"4\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:52:\"Какие функции в JS существуюь\";s:17:\"user_compare_text\";s:0:\"\";}}i:2;s:0:\"\";s:7:\"contact\";a:0:{}s:8:\"timer_ms\";i:8514;s:8:\"pagetime\";a:0:{}s:16:\"hidden_questions\";N;s:21:\"total_possible_points\";i:0;s:25:\"total_attempted_questions\";i:2;}', 0, '7ff80ce3babbb9d4d002faaa5fa03bc5', 0),
(9, 2, 'Тест по Javascript', 0, 0, 50, 1, 2, 'Mihail', 'None', '487mihail@gmail.com', 'None', 5, '127.0.0.1', '04:19:30 PM 05/27/2021', '2021-05-27 16:19:30', 'a:9:{i:0;i:5;i:1;a:2:{i:0;a:11:{i:0;s:0:\"\";i:1;s:41:\"язык программирования\";i:2;s:41:\"язык программирования\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"3\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:20:\"Что такое JS\";s:17:\"user_compare_text\";s:0:\"\";}i:1;a:11:{i:0;s:0:\"\";i:1;s:6:\"receve\";i:2;s:21:\"split().slice().map()\";i:3;s:0:\"\";s:7:\"correct\";s:9:\"incorrect\";s:2:\"id\";s:1:\"4\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:52:\"Какие функции в JS существуюь\";s:17:\"user_compare_text\";s:0:\"\";}}i:2;s:0:\"\";s:7:\"contact\";a:0:{}s:8:\"timer_ms\";i:5320;s:8:\"pagetime\";a:0:{}s:16:\"hidden_questions\";N;s:21:\"total_possible_points\";i:0;s:25:\"total_attempted_questions\";i:2;}', 0, '0e201043f142fd9cd222ae457d2a3714', 0),
(10, 2, 'Тест по Javascript', 0, 0, 50, 1, 2, 'admin', 'None', '489257mihail@gmail.com', 'None', 1, '127.0.0.1', '04:27:02 PM 05/27/2021', '2021-05-27 16:27:02', 'a:9:{i:0;i:5;i:1;a:2:{i:0;a:11:{i:0;s:0:\"\";i:1;s:41:\"язык программирования\";i:2;s:41:\"язык программирования\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"3\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:20:\"Что такое JS\";s:17:\"user_compare_text\";s:0:\"\";}i:1;a:11:{i:0;s:0:\"\";i:1;s:6:\"receve\";i:2;s:21:\"split().slice().map()\";i:3;s:0:\"\";s:7:\"correct\";s:9:\"incorrect\";s:2:\"id\";s:1:\"4\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:52:\"Какие функции в JS существуюь\";s:17:\"user_compare_text\";s:0:\"\";}}i:2;s:0:\"\";s:7:\"contact\";a:0:{}s:8:\"timer_ms\";i:5476;s:8:\"pagetime\";a:0:{}s:16:\"hidden_questions\";N;s:21:\"total_possible_points\";i:0;s:25:\"total_attempted_questions\";i:2;}', 0, '51204403f9eeeda41e9dfe3a00b84de5', 0),
(11, 2, 'Тест по Javascript', 0, 0, 50, 1, 2, 'admin', 'None', '489257mihail@gmail.com', 'None', 1, '127.0.0.1', '04:47:03 PM 05/27/2021', '2021-05-27 16:47:03', 'a:9:{i:0;i:4;i:1;a:2:{i:0;a:11:{i:0;s:0:\"\";i:1;s:41:\"язык программирования\";i:2;s:41:\"язык программирования\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"3\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:20:\"Что такое JS\";s:17:\"user_compare_text\";s:0:\"\";}i:1;a:11:{i:0;s:0:\"\";i:1;s:6:\"receve\";i:2;s:21:\"split().slice().map()\";i:3;s:0:\"\";s:7:\"correct\";s:9:\"incorrect\";s:2:\"id\";s:1:\"4\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:52:\"Какие функции в JS существуюь\";s:17:\"user_compare_text\";s:0:\"\";}}i:2;s:0:\"\";s:7:\"contact\";a:0:{}s:8:\"timer_ms\";i:4449;s:8:\"pagetime\";a:0:{}s:16:\"hidden_questions\";N;s:21:\"total_possible_points\";i:0;s:25:\"total_attempted_questions\";i:2;}', 0, '40aecc20cfd27cc55eecdb90067f49d8', 0),
(12, 2, 'Тест по Javascript', 0, 0, 100, 2, 2, 'admin', 'None', '489257mihail@gmail.com', 'None', 1, '127.0.0.1', '04:49:50 PM 05/27/2021', '2021-05-27 16:49:50', 'a:9:{i:0;i:13;i:1;a:2:{i:0;a:11:{i:0;s:0:\"\";i:1;s:41:\"язык программирования\";i:2;s:41:\"язык программирования\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"3\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:20:\"Что такое JS\";s:17:\"user_compare_text\";s:0:\"\";}i:1;a:11:{i:0;s:0:\"\";i:1;s:7:\"slice()\";i:2;s:21:\"split().slice().map()\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"4\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:52:\"Какие функции в JS существуюь\";s:17:\"user_compare_text\";s:0:\"\";}}i:2;s:0:\"\";s:7:\"contact\";a:0:{}s:8:\"timer_ms\";i:13109;s:8:\"pagetime\";a:0:{}s:16:\"hidden_questions\";N;s:21:\"total_possible_points\";i:0;s:25:\"total_attempted_questions\";i:2;}', 0, '17a6f1fe77c5640d3b1c6bb2091e13f6', 0),
(13, 2, 'Тест по Javascript', 0, 0, 100, 2, 2, 'None', 'None', 'None', 'None', 0, '127.0.0.1', '06:02:09 PM 05/27/2021', '2021-05-27 18:02:09', 'a:9:{i:0;i:3;i:1;a:2:{i:0;a:11:{i:0;s:0:\"\";i:1;s:41:\"язык программирования\";i:2;s:41:\"язык программирования\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"3\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:20:\"Что такое JS\";s:17:\"user_compare_text\";s:0:\"\";}i:1;a:11:{i:0;s:0:\"\";i:1;s:7:\"split()\";i:2;s:21:\"split().slice().map()\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"4\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:52:\"Какие функции в JS существуюь\";s:17:\"user_compare_text\";s:0:\"\";}}i:2;s:0:\"\";s:7:\"contact\";a:0:{}s:8:\"timer_ms\";i:3965;s:8:\"pagetime\";a:0:{}s:16:\"hidden_questions\";N;s:21:\"total_possible_points\";i:0;s:25:\"total_attempted_questions\";i:2;}', 1, '5d67f7be127ccac412aad3cc503bb14d', 0),
(14, 1, 'Тест по mpi', 0, 0, 0, 0, 2, 'admin', 'None', '489257mihail@gmail.com', 'None', 1, '127.0.0.1', '01:29:07 PM 06/06/2021', '2021-06-06 13:29:07', 'a:9:{i:0;i:12;i:1;a:2:{i:0;a:11:{i:0;s:21:\"Add description here!\";i:1;s:0:\"\";i:2;s:44:\"функция передачи данных\";i:3;s:0:\"\";s:7:\"correct\";s:9:\"incorrect\";s:2:\"id\";s:1:\"1\";s:6:\"points\";i:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:28:\"Функция receve это\";s:17:\"user_compare_text\";s:0:\"\";}i:1;a:11:{i:0;s:0:\"\";i:1;s:0:\"\";i:2;s:3:\"213\";i:3;s:0:\"\";s:7:\"correct\";s:9:\"incorrect\";s:2:\"id\";s:1:\"2\";s:6:\"points\";i:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:30:\"Функция receve это 1\";s:17:\"user_compare_text\";s:0:\"\";}}i:2;s:0:\"\";s:7:\"contact\";a:0:{}s:8:\"timer_ms\";i:12058;s:8:\"pagetime\";a:0:{}s:16:\"hidden_questions\";N;s:21:\"total_possible_points\";i:0;s:25:\"total_attempted_questions\";i:0;}', 0, '7c82675aaf6f7dc26f356bcca6c9c7d2', 0),
(15, 1, 'Тест по mpi', 0, 0, 100, 2, 2, 'admin', 'None', '489257mihail@gmail.com', 'None', 1, '127.0.0.1', '06:09:57 PM 06/09/2021', '2021-06-09 18:09:57', 'a:9:{i:0;i:4;i:1;a:2:{i:0;a:11:{i:0;s:21:\"Add description here!\";i:1;s:44:\"функция передачи данных\";i:2;s:44:\"функция передачи данных\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"1\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:28:\"Функция receve это\";s:17:\"user_compare_text\";s:0:\"\";}i:1;a:11:{i:0;s:0:\"\";i:1;s:3:\"213\";i:2;s:3:\"213\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"2\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:30:\"Функция receve это 1\";s:17:\"user_compare_text\";s:0:\"\";}}i:2;s:0:\"\";s:7:\"contact\";a:0:{}s:8:\"timer_ms\";i:4646;s:8:\"pagetime\";a:0:{}s:16:\"hidden_questions\";N;s:21:\"total_possible_points\";i:0;s:25:\"total_attempted_questions\";i:2;}', 0, '448d6d3daef3fa090452e60cd29c1008', 0),
(16, 1, 'Тест по mpi', 0, 0, 100, 10, 10, 'admin', 'None', '489257mihail@gmail.com', 'None', 1, '127.0.0.1', '06:48:48 PM 06/09/2021', '2021-06-09 18:48:48', 'a:9:{i:0;i:187;i:1;a:10:{i:0;a:11:{i:0;s:21:\"Add description here!\";i:1;s:99:\"MPI_Alltoall ( &amp;amp;sendbuf, sendcount, sendtype, &amp;amp;recvbuf, recvcount, recvtype, comm )\";i:2;s:91:\"MPI_Alltoall ( &amp;sendbuf, sendcount, sendtype, &amp;recvbuf, recvcount, recvtype, comm )\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"1\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:436:\"Каждый процесс отдельные части своего передающего буфера рассылает всем остальным процессам; каждый процесс получает эти части от всех остальных и размещает их по порядку рангов процессов, от которых они получены. Формат вызова функции?\";s:17:\"user_compare_text\";s:0:\"\";}i:1;a:11:{i:0;s:0:\"\";i:1;s:67:\"MPI_Pack(inbuf, incount, datatype, outbuf, outsize, position, comm)\";i:2;s:67:\"MPI_Pack(inbuf, incount, datatype, outbuf, outsize, position, comm)\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"2\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:51:\"Синтаксис функции упаковки?\";s:17:\"user_compare_text\";s:0:\"\";}i:2;a:11:{i:0;s:0:\"\";i:1;s:10:\"MPI_Gather\";i:2;s:10:\"MPI_Gather\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"7\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:185:\"Функция собирающая сообщения от каждого из процессов в группе в приемный буфер процесса с рангом \'root\"\";s:17:\"user_compare_text\";s:0:\"\";}i:3;a:11:{i:0;s:0:\"\";i:1;s:51:\"Такой функции не существует\";i:2;s:51:\"Такой функции не существует\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"8\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:39:\"Суть работы MPI_ScatterGather\";s:17:\"user_compare_text\";s:0:\"\";}i:4;a:11:{i:0;s:0:\"\";i:1;s:192:\"Данная процедура разбивает все множество процессов, входящих в группу comm, на непересекающиеся подгруппы\";i:2;s:192:\"Данная процедура разбивает все множество процессов, входящих в группу comm, на непересекающиеся подгруппы\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:1:\"9\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:52:\"Суть работы функции MPI_Comm_split?\";s:17:\"user_compare_text\";s:0:\"\";}i:5;a:11:{i:0;s:0:\"\";i:1;s:8:\"MPI_Init\";i:2;s:8:\"MPI_Init\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:2:\"10\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:398:\"Функция инициализации. В результате выполнения этой функции создается группа процессов, в которую помещаются все процессы приложения, и создается область связи, описываемая предопределенным коммуникатором MPI_COMM_WORLD.\";s:17:\"user_compare_text\";s:0:\"\";}i:6;a:11:{i:0;s:0:\"\";i:1;s:34:\"MPI_Comm_size(COMM, &amp;amp;size)\";i:2;s:30:\"MPI_Comm_size(COMM, &amp;size)\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:2:\"11\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:120:\"Как узнать общее количество процессов в некоем коммуни-каторе COMM?\";s:17:\"user_compare_text\";s:0:\"\";}i:7;a:11:{i:0;s:0:\"\";i:1;s:34:\"MPI_Comm_rank(COMM, &amp;amp;rank)\";i:2;s:30:\"MPI_Comm_rank(COMM, &amp;rank)\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:2:\"12\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:80:\"Какой функцией можно узнать номер процесса?\";s:17:\"user_compare_text\";s:0:\"\";}i:8;a:11:{i:0;s:0:\"\";i:1;s:10:\"MPI_STRING\";i:2;s:10:\"MPI_STRING\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:2:\"13\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:49:\"Какого типа данных нет в MPI?\";s:17:\"user_compare_text\";s:0:\"\";}i:9;a:11:{i:0;s:0:\"\";i:1;s:14:\"MPI_ANY_SOURCE\";i:2;s:14:\"MPI_ANY_SOURCE\";i:3;s:0:\"\";s:7:\"correct\";s:7:\"correct\";s:2:\"id\";s:2:\"14\";s:6:\"points\";d:0;s:8:\"category\";s:0:\"\";s:13:\"question_type\";s:1:\"0\";s:14:\"question_title\";s:149:\"Какой параметр в функции MPI_Recv() позволяет принимать сообщение от любого процесса?\";s:17:\"user_compare_text\";s:0:\"\";}}i:2;s:0:\"\";s:7:\"contact\";a:0:{}s:8:\"timer_ms\";i:187827;s:8:\"pagetime\";a:0:{}s:16:\"hidden_questions\";N;s:21:\"total_possible_points\";i:0;s:25:\"total_attempted_questions\";i:10;}', 0, '54bdb254466f0df3eb3fdc2675a9ed96', 0);

-- --------------------------------------------------------

--
-- Структура таблицы `wp_options`
--

CREATE TABLE `wp_options` (
  `option_id` bigint UNSIGNED NOT NULL,
  `option_name` varchar(191) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `option_value` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `autoload` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'yes'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- Дамп данных таблицы `wp_options`
--

INSERT INTO `wp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(1, 'siteurl', 'http://brainfood-project', 'yes'),
(2, 'home', 'http://brainfood-project', 'yes'),
(3, 'blogname', '', 'yes'),
(4, 'blogdescription', 'Ещё один сайт на WordPress', 'yes'),
(5, 'users_can_register', '1', 'yes'),
(6, 'admin_email', '489257mihail@gmail.com', 'yes'),
(7, 'start_of_week', '1', 'yes'),
(8, 'use_balanceTags', '0', 'yes'),
(9, 'use_smilies', '1', 'yes'),
(10, 'require_name_email', '1', 'yes'),
(11, 'comments_notify', '1', 'yes'),
(12, 'posts_per_rss', '10', 'yes'),
(13, 'rss_use_excerpt', '0', 'yes'),
(14, 'mailserver_url', 'mail.example.com', 'yes'),
(15, 'mailserver_login', 'login@example.com', 'yes'),
(16, 'mailserver_pass', 'password', 'yes'),
(17, 'mailserver_port', '110', 'yes'),
(18, 'default_category', '1', 'yes'),
(19, 'default_comment_status', 'open', 'yes'),
(20, 'default_ping_status', 'open', 'yes'),
(21, 'default_pingback_flag', '1', 'yes'),
(22, 'posts_per_page', '10', 'yes'),
(23, 'date_format', 'd.m.Y', 'yes'),
(24, 'time_format', 'H:i', 'yes'),
(25, 'links_updated_date_format', 'd.m.Y H:i', 'yes'),
(26, 'comment_moderation', '0', 'yes'),
(27, 'moderation_notify', '1', 'yes'),
(28, 'permalink_structure', '/%postname%/', 'yes'),
(29, 'rewrite_rules', 'a:152:{s:11:\"^wp-json/?$\";s:22:\"index.php?rest_route=/\";s:14:\"^wp-json/(.*)?\";s:33:\"index.php?rest_route=/$matches[1]\";s:21:\"^index.php/wp-json/?$\";s:22:\"index.php?rest_route=/\";s:24:\"^index.php/wp-json/(.*)?\";s:33:\"index.php?rest_route=/$matches[1]\";s:17:\"^wp-sitemap\\.xml$\";s:23:\"index.php?sitemap=index\";s:17:\"^wp-sitemap\\.xsl$\";s:36:\"index.php?sitemap-stylesheet=sitemap\";s:23:\"^wp-sitemap-index\\.xsl$\";s:34:\"index.php?sitemap-stylesheet=index\";s:48:\"^wp-sitemap-([a-z]+?)-([a-z\\d_-]+?)-(\\d+?)\\.xml$\";s:75:\"index.php?sitemap=$matches[1]&sitemap-subtype=$matches[2]&paged=$matches[3]\";s:34:\"^wp-sitemap-([a-z]+?)-(\\d+?)\\.xml$\";s:47:\"index.php?sitemap=$matches[1]&paged=$matches[2]\";s:7:\"quiz/?$\";s:28:\"index.php?post_type=qsm_quiz\";s:37:\"quiz/feed/(feed|rdf|rss|rss2|atom)/?$\";s:45:\"index.php?post_type=qsm_quiz&feed=$matches[1]\";s:32:\"quiz/(feed|rdf|rss|rss2|atom)/?$\";s:45:\"index.php?post_type=qsm_quiz&feed=$matches[1]\";s:24:\"quiz/page/([0-9]{1,})/?$\";s:46:\"index.php?post_type=qsm_quiz&paged=$matches[1]\";s:47:\"category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:42:\"category/(.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:23:\"category/(.+?)/embed/?$\";s:46:\"index.php?category_name=$matches[1]&embed=true\";s:35:\"category/(.+?)/page/?([0-9]{1,})/?$\";s:53:\"index.php?category_name=$matches[1]&paged=$matches[2]\";s:17:\"category/(.+?)/?$\";s:35:\"index.php?category_name=$matches[1]\";s:44:\"tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:39:\"tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:20:\"tag/([^/]+)/embed/?$\";s:36:\"index.php?tag=$matches[1]&embed=true\";s:32:\"tag/([^/]+)/page/?([0-9]{1,})/?$\";s:43:\"index.php?tag=$matches[1]&paged=$matches[2]\";s:14:\"tag/([^/]+)/?$\";s:25:\"index.php?tag=$matches[1]\";s:45:\"type/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:40:\"type/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:21:\"type/([^/]+)/embed/?$\";s:44:\"index.php?post_format=$matches[1]&embed=true\";s:33:\"type/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?post_format=$matches[1]&paged=$matches[2]\";s:15:\"type/([^/]+)/?$\";s:33:\"index.php?post_format=$matches[1]\";s:53:\"qmn_log_type/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:65:\"index.php?taxonomy=qmn_log_type&term=$matches[1]&feed=$matches[2]\";s:48:\"qmn_log_type/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:65:\"index.php?taxonomy=qmn_log_type&term=$matches[1]&feed=$matches[2]\";s:29:\"qmn_log_type/([^/]+)/embed/?$\";s:59:\"index.php?taxonomy=qmn_log_type&term=$matches[1]&embed=true\";s:41:\"qmn_log_type/([^/]+)/page/?([0-9]{1,})/?$\";s:66:\"index.php?taxonomy=qmn_log_type&term=$matches[1]&paged=$matches[2]\";s:23:\"qmn_log_type/([^/]+)/?$\";s:48:\"index.php?taxonomy=qmn_log_type&term=$matches[1]\";s:32:\"quiz/[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:42:\"quiz/[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:62:\"quiz/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:57:\"quiz/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:57:\"quiz/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:38:\"quiz/[^/]+/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:21:\"quiz/([^/]+)/embed/?$\";s:41:\"index.php?qsm_quiz=$matches[1]&embed=true\";s:25:\"quiz/([^/]+)/trackback/?$\";s:35:\"index.php?qsm_quiz=$matches[1]&tb=1\";s:45:\"quiz/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?qsm_quiz=$matches[1]&feed=$matches[2]\";s:40:\"quiz/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?qsm_quiz=$matches[1]&feed=$matches[2]\";s:33:\"quiz/([^/]+)/page/?([0-9]{1,})/?$\";s:48:\"index.php?qsm_quiz=$matches[1]&paged=$matches[2]\";s:40:\"quiz/([^/]+)/comment-page-([0-9]{1,})/?$\";s:48:\"index.php?qsm_quiz=$matches[1]&cpage=$matches[2]\";s:29:\"quiz/([^/]+)(?:/([0-9]+))?/?$\";s:47:\"index.php?qsm_quiz=$matches[1]&page=$matches[2]\";s:21:\"quiz/[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:31:\"quiz/[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:51:\"quiz/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:46:\"quiz/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:46:\"quiz/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:27:\"quiz/[^/]+/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:39:\"disciplines/[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:49:\"disciplines/[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:69:\"disciplines/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:64:\"disciplines/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:64:\"disciplines/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:45:\"disciplines/[^/]+/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:28:\"disciplines/([^/]+)/embed/?$\";s:42:\"index.php?disciplin=$matches[1]&embed=true\";s:32:\"disciplines/([^/]+)/trackback/?$\";s:36:\"index.php?disciplin=$matches[1]&tb=1\";s:40:\"disciplines/([^/]+)/page/?([0-9]{1,})/?$\";s:49:\"index.php?disciplin=$matches[1]&paged=$matches[2]\";s:47:\"disciplines/([^/]+)/comment-page-([0-9]{1,})/?$\";s:49:\"index.php?disciplin=$matches[1]&cpage=$matches[2]\";s:36:\"disciplines/([^/]+)(?:/([0-9]+))?/?$\";s:48:\"index.php?disciplin=$matches[1]&page=$matches[2]\";s:28:\"disciplines/[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:38:\"disciplines/[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:58:\"disciplines/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:53:\"disciplines/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:53:\"disciplines/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:34:\"disciplines/[^/]+/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:61:\"disciplin-categories/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:59:\"index.php?disciplin-categories=$matches[1]&feed=$matches[2]\";s:56:\"disciplin-categories/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:59:\"index.php?disciplin-categories=$matches[1]&feed=$matches[2]\";s:37:\"disciplin-categories/([^/]+)/embed/?$\";s:53:\"index.php?disciplin-categories=$matches[1]&embed=true\";s:49:\"disciplin-categories/([^/]+)/page/?([0-9]{1,})/?$\";s:60:\"index.php?disciplin-categories=$matches[1]&paged=$matches[2]\";s:31:\"disciplin-categories/([^/]+)/?$\";s:42:\"index.php?disciplin-categories=$matches[1]\";s:12:\"robots\\.txt$\";s:18:\"index.php?robots=1\";s:13:\"favicon\\.ico$\";s:19:\"index.php?favicon=1\";s:48:\".*wp-(atom|rdf|rss|rss2|feed|commentsrss2)\\.php$\";s:18:\"index.php?feed=old\";s:20:\".*wp-app\\.php(/.*)?$\";s:19:\"index.php?error=403\";s:18:\".*wp-register.php$\";s:23:\"index.php?register=true\";s:32:\"feed/(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:27:\"(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:8:\"embed/?$\";s:21:\"index.php?&embed=true\";s:20:\"page/?([0-9]{1,})/?$\";s:28:\"index.php?&paged=$matches[1]\";s:27:\"comment-page-([0-9]{1,})/?$\";s:39:\"index.php?&page_id=10&cpage=$matches[1]\";s:24:\"edit-password(/(.*))?/?$\";s:36:\"index.php?&edit-password=$matches[2]\";s:23:\"edit-profile(/(.*))?/?$\";s:35:\"index.php?&edit-profile=$matches[2]\";s:24:\"lost-password(/(.*))?/?$\";s:36:\"index.php?&lost-password=$matches[2]\";s:22:\"user-logout(/(.*))?/?$\";s:34:\"index.php?&user-logout=$matches[2]\";s:41:\"comments/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:36:\"comments/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:17:\"comments/embed/?$\";s:21:\"index.php?&embed=true\";s:44:\"search/(.+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:39:\"search/(.+)/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:20:\"search/(.+)/embed/?$\";s:34:\"index.php?s=$matches[1]&embed=true\";s:32:\"search/(.+)/page/?([0-9]{1,})/?$\";s:41:\"index.php?s=$matches[1]&paged=$matches[2]\";s:14:\"search/(.+)/?$\";s:23:\"index.php?s=$matches[1]\";s:47:\"author/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:42:\"author/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:23:\"author/([^/]+)/embed/?$\";s:44:\"index.php?author_name=$matches[1]&embed=true\";s:35:\"author/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?author_name=$matches[1]&paged=$matches[2]\";s:17:\"author/([^/]+)/?$\";s:33:\"index.php?author_name=$matches[1]\";s:69:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:64:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:45:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/embed/?$\";s:74:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&embed=true\";s:57:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&paged=$matches[4]\";s:39:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/?$\";s:63:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]\";s:56:\"([0-9]{4})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:51:\"([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:32:\"([0-9]{4})/([0-9]{1,2})/embed/?$\";s:58:\"index.php?year=$matches[1]&monthnum=$matches[2]&embed=true\";s:44:\"([0-9]{4})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&paged=$matches[3]\";s:26:\"([0-9]{4})/([0-9]{1,2})/?$\";s:47:\"index.php?year=$matches[1]&monthnum=$matches[2]\";s:43:\"([0-9]{4})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:38:\"([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:19:\"([0-9]{4})/embed/?$\";s:37:\"index.php?year=$matches[1]&embed=true\";s:31:\"([0-9]{4})/page/?([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&paged=$matches[2]\";s:13:\"([0-9]{4})/?$\";s:26:\"index.php?year=$matches[1]\";s:27:\".?.+?/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:37:\".?.+?/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:57:\".?.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:33:\".?.+?/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:16:\"(.?.+?)/embed/?$\";s:41:\"index.php?pagename=$matches[1]&embed=true\";s:20:\"(.?.+?)/trackback/?$\";s:35:\"index.php?pagename=$matches[1]&tb=1\";s:40:\"(.?.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:35:\"(.?.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:28:\"(.?.+?)/page/?([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&paged=$matches[2]\";s:35:\"(.?.+?)/comment-page-([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&cpage=$matches[2]\";s:32:\"(.?.+?)/edit-password(/(.*))?/?$\";s:56:\"index.php?pagename=$matches[1]&edit-password=$matches[3]\";s:31:\"(.?.+?)/edit-profile(/(.*))?/?$\";s:55:\"index.php?pagename=$matches[1]&edit-profile=$matches[3]\";s:32:\"(.?.+?)/lost-password(/(.*))?/?$\";s:56:\"index.php?pagename=$matches[1]&lost-password=$matches[3]\";s:30:\"(.?.+?)/user-logout(/(.*))?/?$\";s:54:\"index.php?pagename=$matches[1]&user-logout=$matches[3]\";s:24:\"(.?.+?)(?:/([0-9]+))?/?$\";s:47:\"index.php?pagename=$matches[1]&page=$matches[2]\";s:27:\"[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:37:\"[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:57:\"[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\"[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\"[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:33:\"[^/]+/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:16:\"([^/]+)/embed/?$\";s:37:\"index.php?name=$matches[1]&embed=true\";s:20:\"([^/]+)/trackback/?$\";s:31:\"index.php?name=$matches[1]&tb=1\";s:40:\"([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?name=$matches[1]&feed=$matches[2]\";s:35:\"([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?name=$matches[1]&feed=$matches[2]\";s:28:\"([^/]+)/page/?([0-9]{1,})/?$\";s:44:\"index.php?name=$matches[1]&paged=$matches[2]\";s:35:\"([^/]+)/comment-page-([0-9]{1,})/?$\";s:44:\"index.php?name=$matches[1]&cpage=$matches[2]\";s:24:\"([^/]+)(?:/([0-9]+))?/?$\";s:43:\"index.php?name=$matches[1]&page=$matches[2]\";s:16:\"[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:26:\"[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:46:\"[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:41:\"[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:41:\"[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:22:\"[^/]+/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";}', 'yes'),
(30, 'hack_file', '0', 'yes'),
(31, 'blog_charset', 'UTF-8', 'yes'),
(32, 'moderation_keys', '', 'no'),
(33, 'active_plugins', 'a:8:{i:0;s:73:\"advanced-responsive-video-embedder/advanced-responsive-video-embedder.php\";i:1;s:23:\"loco-translate/loco.php\";i:2;s:22:\"page-menu/pagemenu.php\";i:3;s:36:\"quiz-master-next/mlw_quizmaster2.php\";i:4;s:47:\"regenerate-thumbnails/regenerate-thumbnails.php\";i:5;s:27:\"svg-support/svg-support.php\";i:6;s:39:\"user-registration/user-registration.php\";i:7;s:33:\"wp-translitera/wp-translitera.php\";}', 'yes'),
(34, 'category_base', '', 'yes'),
(35, 'ping_sites', 'http://rpc.pingomatic.com/', 'yes'),
(36, 'comment_max_links', '2', 'yes'),
(37, 'gmt_offset', '3', 'yes'),
(38, 'default_email_category', '1', 'yes'),
(39, 'recently_edited', '', 'no'),
(40, 'template', 'brainfood', 'yes'),
(41, 'stylesheet', 'brainfood', 'yes'),
(42, 'comment_registration', '0', 'yes'),
(43, 'html_type', 'text/html', 'yes'),
(44, 'use_trackback', '0', 'yes'),
(45, 'default_role', 'subscriber', 'yes'),
(46, 'db_version', '49752', 'yes'),
(47, 'uploads_use_yearmonth_folders', '1', 'yes'),
(48, 'upload_path', '', 'yes'),
(49, 'blog_public', '1', 'yes'),
(50, 'default_link_category', '2', 'yes'),
(51, 'show_on_front', 'page', 'yes'),
(52, 'tag_base', '', 'yes'),
(53, 'show_avatars', '1', 'yes'),
(54, 'avatar_rating', 'G', 'yes'),
(55, 'upload_url_path', '', 'yes'),
(56, 'thumbnail_size_w', '150', 'yes'),
(57, 'thumbnail_size_h', '150', 'yes'),
(58, 'thumbnail_crop', '1', 'yes'),
(59, 'medium_size_w', '300', 'yes'),
(60, 'medium_size_h', '300', 'yes'),
(61, 'avatar_default', 'mystery', 'yes'),
(62, 'large_size_w', '1024', 'yes'),
(63, 'large_size_h', '1024', 'yes'),
(64, 'image_default_link_type', 'none', 'yes'),
(65, 'image_default_size', '', 'yes'),
(66, 'image_default_align', '', 'yes'),
(67, 'close_comments_for_old_posts', '0', 'yes'),
(68, 'close_comments_days_old', '14', 'yes'),
(69, 'thread_comments', '1', 'yes'),
(70, 'thread_comments_depth', '5', 'yes'),
(71, 'page_comments', '0', 'yes'),
(72, 'comments_per_page', '50', 'yes'),
(73, 'default_comments_page', 'newest', 'yes'),
(74, 'comment_order', 'asc', 'yes'),
(75, 'sticky_posts', 'a:0:{}', 'yes'),
(76, 'widget_categories', 'a:2:{i:2;a:4:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:12:\"hierarchical\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}', 'yes'),
(77, 'widget_text', 'a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}', 'yes'),
(78, 'widget_rss', 'a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}', 'yes'),
(79, 'uninstall_plugins', 'a:0:{}', 'no'),
(80, 'timezone_string', '', 'yes'),
(81, 'page_for_posts', '0', 'yes'),
(82, 'page_on_front', '10', 'yes'),
(83, 'default_post_format', '0', 'yes'),
(84, 'link_manager_enabled', '0', 'yes'),
(85, 'finished_splitting_shared_terms', '1', 'yes'),
(86, 'site_icon', '0', 'yes'),
(87, 'medium_large_size_w', '768', 'yes'),
(88, 'medium_large_size_h', '0', 'yes'),
(89, 'wp_page_for_privacy_policy', '3', 'yes'),
(90, 'show_comments_cookies_opt_in', '1', 'yes'),
(91, 'admin_email_lifespan', '1636637800', 'yes'),
(92, 'disallowed_keys', '', 'no'),
(93, 'comment_previously_approved', '1', 'yes'),
(94, 'auto_plugin_theme_update_emails', 'a:0:{}', 'no'),
(95, 'auto_update_core_dev', 'enabled', 'yes'),
(96, 'auto_update_core_minor', 'enabled', 'yes'),
(97, 'auto_update_core_major', 'enabled', 'yes'),
(98, 'initial_db_version', '49752', 'yes'),
(99, 'wp_user_roles', 'a:6:{s:13:\"administrator\";a:2:{s:4:\"name\";s:13:\"Administrator\";s:12:\"capabilities\";a:80:{s:13:\"switch_themes\";b:1;s:11:\"edit_themes\";b:1;s:16:\"activate_plugins\";b:1;s:12:\"edit_plugins\";b:1;s:10:\"edit_users\";b:1;s:10:\"edit_files\";b:1;s:14:\"manage_options\";b:1;s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:6:\"import\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:8:\"level_10\";b:1;s:7:\"level_9\";b:1;s:7:\"level_8\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:12:\"delete_users\";b:1;s:12:\"create_users\";b:1;s:17:\"unfiltered_upload\";b:1;s:14:\"edit_dashboard\";b:1;s:14:\"update_plugins\";b:1;s:14:\"delete_plugins\";b:1;s:15:\"install_plugins\";b:1;s:13:\"update_themes\";b:1;s:14:\"install_themes\";b:1;s:11:\"update_core\";b:1;s:10:\"list_users\";b:1;s:12:\"remove_users\";b:1;s:13:\"promote_users\";b:1;s:18:\"edit_theme_options\";b:1;s:13:\"delete_themes\";b:1;s:6:\"export\";b:1;s:10:\"loco_admin\";b:1;s:24:\"manage_user_registration\";b:1;s:22:\"edit_user_registration\";b:1;s:22:\"read_user_registration\";b:1;s:24:\"delete_user_registration\";b:1;s:23:\"edit_user_registrations\";b:1;s:30:\"edit_others_user_registrations\";b:1;s:26:\"publish_user_registrations\";b:1;s:31:\"read_private_user_registrations\";b:1;s:25:\"delete_user_registrations\";b:1;s:33:\"delete_private_user_registrations\";b:1;s:35:\"delete_published_user_registrations\";b:1;s:32:\"delete_others_user_registrations\";b:1;s:31:\"edit_private_user_registrations\";b:1;s:33:\"edit_published_user_registrations\";b:1;s:30:\"manage_user_registration_terms\";b:1;s:28:\"edit_user_registration_terms\";b:1;s:30:\"delete_user_registration_terms\";b:1;s:30:\"assign_user_registration_terms\";b:1;}}s:6:\"editor\";a:2:{s:4:\"name\";s:6:\"Editor\";s:12:\"capabilities\";a:34:{s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;}}s:6:\"author\";a:2:{s:4:\"name\";s:6:\"Author\";s:12:\"capabilities\";a:10:{s:12:\"upload_files\";b:1;s:10:\"edit_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;s:22:\"delete_published_posts\";b:1;}}s:11:\"contributor\";a:2:{s:4:\"name\";s:11:\"Contributor\";s:12:\"capabilities\";a:5:{s:10:\"edit_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;}}s:10:\"subscriber\";a:2:{s:4:\"name\";s:10:\"Subscriber\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:7:\"level_0\";b:1;}}s:10:\"translator\";a:2:{s:4:\"name\";s:10:\"Translator\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:10:\"loco_admin\";b:1;}}}', 'yes'),
(100, 'fresh_site', '0', 'yes'),
(101, 'WPLANG', 'ru_RU', 'yes'),
(102, 'widget_search', 'a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(103, 'widget_recent-posts', 'a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}', 'yes'),
(104, 'widget_recent-comments', 'a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}', 'yes'),
(105, 'widget_archives', 'a:2:{i:2;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}', 'yes'),
(106, 'widget_meta', 'a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(107, 'sidebars_widgets', 'a:3:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}s:13:\"array_version\";i:3;}', 'yes'),
(108, 'cron', 'a:7:{i:1633275401;a:1:{s:34:\"wp_privacy_delete_old_export_files\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:6:\"hourly\";s:4:\"args\";a:0:{}s:8:\"interval\";i:3600;}}}i:1633311401;a:4:{s:18:\"wp_https_detection\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:16:\"wp_version_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:17:\"wp_update_plugins\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:16:\"wp_update_themes\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1633354601;a:1:{s:32:\"recovery_mode_clean_expired_keys\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1633354616;a:2:{s:19:\"wp_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}s:25:\"delete_expired_transients\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1633354617;a:1:{s:30:\"wp_scheduled_auto_draft_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1633873001;a:1:{s:30:\"wp_site_health_scheduled_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:6:\"weekly\";s:4:\"args\";a:0:{}s:8:\"interval\";i:604800;}}}s:7:\"version\";i:2;}', 'yes'),
(109, 'widget_pages', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(110, 'widget_calendar', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(111, 'widget_media_audio', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(112, 'widget_media_image', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(113, 'widget_media_gallery', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(114, 'widget_media_video', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(115, 'widget_tag_cloud', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(116, 'widget_nav_menu', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(117, 'widget_custom_html', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(119, 'recovery_keys', 'a:0:{}', 'yes'),
(120, 'theme_mods_twentytwentyone', 'a:3:{s:18:\"custom_css_post_id\";i:-1;s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1621087522;s:4:\"data\";a:2:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}}}s:18:\"nav_menu_locations\";a:0:{}}', 'yes'),
(121, 'https_detection_errors', 'a:1:{s:23:\"ssl_verification_failed\";a:1:{i:0;s:38:\"Проверка SSL неудачна.\";}}', 'yes'),
(139, 'can_compress_scripts', '1', 'no'),
(152, 'finished_updating_comment_type', '1', 'yes'),
(153, 'current_theme', 'BrainFood', 'yes'),
(154, 'theme_mods_BrainFood', 'a:4:{i:0;b:0;s:18:\"nav_menu_locations\";a:2:{s:14:\"menu_disciplin\";i:12;s:25:\"menu_header_authorization\";i:12;}s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1621086658;s:4:\"data\";a:1:{s:19:\"wp_inactive_widgets\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}}}s:18:\"custom_css_post_id\";i:-1;}', 'yes'),
(155, 'theme_switched', '', 'yes'),
(160, 'theme_mods_brainfood/brainfood', 'a:3:{s:18:\"custom_css_post_id\";i:-1;s:18:\"nav_menu_locations\";a:0:{}s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1621087471;s:4:\"data\";a:2:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}}}}', 'yes'),
(173, '_transient_health-check-site-status-result', '{\"good\":12,\"recommended\":6,\"critical\":2}', 'yes'),
(217, 'recently_activated', 'a:0:{}', 'yes'),
(227, 'wp_translitera', 'a:9:{s:25:\"tranliterate_uploads_file\";s:1:\"1\";s:16:\"tranliterate_404\";s:1:\"1\";s:7:\"fileext\";a:1:{i:0;s:0:\"\";}s:26:\"use_force_transliterations\";s:1:\"1\";s:16:\"disable_in_front\";N;s:18:\"lowercase_filename\";s:1:\"1\";s:22:\"use_global_mu_settings\";N;s:12:\"custom_rules\";s:2:\"[]\";s:7:\"version\";s:6:\"p1.2.5\";}', 'yes'),
(234, 'recovery_mode_email_last_sent', '1621689353', 'yes'),
(242, 'bodhi_svgs_plugin_version', '2.3.18', 'yes'),
(260, '_site_logo', '12', 'no'),
(261, '_site_youtube_url', 'https://www.youtube.com/', 'no'),
(262, '_site_vk_url', 'https://vk.com/id269772892', 'no'),
(263, '_site_telegram_url', 'https://web.telegram.org/#/login', 'no'),
(264, 'nav_menu_options', 'a:2:{i:0;b:0;s:8:\"auto_add\";a:0:{}}', 'yes'),
(339, 'disciplin-categories_children', 'a:2:{i:3;a:3:{i:0;i:6;i:1;i:7;i:2;i:8;}i:4;a:1:{i:0;i:9;}}', 'yes'),
(436, 'category_children', 'a:0:{}', 'yes'),
(489, 'qmn_original_version', '7.1.16', 'yes'),
(490, 'qmn-settings', 'a:2:{s:24:\"results_details_template\";s:565:\"<h2>Quiz Results for %QUIZ_NAME%</h2>\n     		<p>%CONTACT_ALL%</p>\n     		<p>Name Provided: %USER_NAME%</p>\n     		<p>Business Provided: %USER_BUSINESS%</p>\n     		<p>Phone Provided: %USER_PHONE%</p>\n     		<p>Email Provided: %USER_EMAIL%</p>\n     		<p>Score Received: %AMOUNT_CORRECT%/%TOTAL_QUESTIONS% or %CORRECT_SCORE%% or %POINT_SCORE% points</p>\n     		<h2>Answers Provided:</h2>\n     		<p>The user took %TIMER% to complete quiz.</p>\n     		<p>Comments entered were: %COMMENT_SECTION%</p>\n     		<p>The answers were as follows:</p>\n         %QUESTIONS_ANSWERS%\";s:16:\"tracking_allowed\";s:1:\"2\";}', 'yes'),
(491, 'mlw_quiz_master_version', '7.1.16', 'yes'),
(492, 'mlw_advert_shows', 'true', 'yes'),
(493, 'qsm_update_db_column', '1', 'yes'),
(494, 'qsm_update_result_db_column', '1', 'yes'),
(495, 'qsm_update_quiz_db_column', '1', 'yes'),
(496, 'qsm_update_result_db_column_datatype', '1', 'yes'),
(497, 'qsm_add_new_column_question_table_table', '4', 'yes'),
(498, 'qsm_change_the_post_type', '1', 'yes'),
(499, 'qmn_review_message_trigger', '20', 'yes'),
(500, 'qmn-tracking-notice', '1', 'yes'),
(501, 'qmn_tracker_last_time', '1623256109', 'yes'),
(502, 'qsm_dashboard_widget_arr', 'a:4:{s:23:\"dashboard_popular_addon\";a:3:{s:7:\"sidebar\";s:6:\"normal\";s:8:\"callback\";s:27:\"qsm_dashboard_popular_addon\";s:5:\"title\";s:14:\"Popular Addons\";}s:27:\"dashboard_recent_taken_quiz\";a:3:{s:7:\"sidebar\";s:6:\"normal\";s:8:\"callback\";s:31:\"qsm_dashboard_recent_taken_quiz\";s:5:\"title\";s:17:\"Recent Taken Quiz\";}s:18:\"dashboard_what_new\";a:3:{s:7:\"sidebar\";s:4:\"side\";s:8:\"callback\";s:22:\"qsm_dashboard_what_new\";s:5:\"title\";s:11:\"Latest news\";}s:18:\"dashboard_chagelog\";a:3:{s:7:\"sidebar\";s:4:\"side\";s:8:\"callback\";s:22:\"qsm_dashboard_chagelog\";s:5:\"title\";s:9:\"Changelog\";}}', 'yes'),
(503, 'qmn_quiz_taken_cnt', '16', 'yes'),
(535, 'new_admin_email', '489257mihail@gmail.com', 'yes'),
(547, 'user_registration_general_setting_login_options', 'auto_login', 'yes'),
(548, 'user_registration_general_setting_disabled_user_roles', 'a:1:{i:0;s:10:\"subscriber\";}', 'yes'),
(549, 'user_registration_login_option_hide_show_password', 'yes', 'yes'),
(550, 'user_registration_general_setting_uninstall_option', 'no', 'yes'),
(551, 'user_registration_myaccount_page_id', '10', 'yes'),
(552, 'user_registration_ajax_form_submission_on_edit_profile', 'no', 'yes'),
(553, 'user_registration_disable_profile_picture', 'no', 'yes'),
(554, 'user_registration_disable_logout_confirmation', 'no', 'yes'),
(555, 'user_registration_my_account_layout', 'vertical', 'yes'),
(556, 'user_registration_myaccount_edit_profile_endpoint', 'edit-profile', 'yes'),
(557, 'user_registration_myaccount_change_password_endpoint', 'edit-password', 'yes'),
(558, 'user_registration_myaccount_lost_password_endpoint', 'lost-password', 'yes'),
(559, 'user_registration_logout_endpoint', 'user-logout', 'yes'),
(560, 'user_registration_integration_setting_recaptcha_version', 'v2', 'yes'),
(561, 'user_registration_integration_setting_recaptcha_site_key', '', 'yes'),
(562, 'user_registration_integration_setting_recaptcha_site_secret', '', 'yes'),
(563, 'user_registration_integration_setting_recaptcha_site_key_v3', '', 'yes'),
(564, 'user_registration_integration_setting_recaptcha_site_secret_v3', '', 'yes'),
(565, 'user_registration_email_setting_disable_email', 'no', 'no'),
(566, 'user_registration_email_from_name', '', 'no'),
(567, 'user_registration_email_from_address', '489257mihail@gmail.com', 'no'),
(568, 'user_registration_default_form_page_id', '94', 'yes'),
(571, 'user_registration_version', '1.9.7', 'yes'),
(572, 'user_registration_db_version', '1.9.7', 'yes'),
(573, 'user_registration_activated', '2021-05-27', 'yes'),
(574, 'user_registration_admin_notices', 'a:0:{}', 'yes'),
(575, 'user_registration_users_listing_viewed', '2021-06-06 14:04:26', 'yes'),
(576, 'user_registration_registration_page_id', '96', 'yes'),
(578, 'user_registration_login_options_form_template', 'rounded', 'yes'),
(579, 'ur_login_ajax_submission', 'yes', 'yes'),
(580, 'user_registration_login_options_remember_me', 'yes', 'yes'),
(581, 'user_registration_login_options_lost_password', 'yes', 'yes'),
(582, 'user_registration_login_options_hide_labels', 'no', 'yes'),
(583, 'user_registration_login_options_enable_recaptcha', 'no', 'yes'),
(584, 'user_registration_general_setting_registration_url_options', '', 'yes'),
(585, 'user_registration_general_setting_registration_label', 'Not a member yet? Register now.', 'yes'),
(586, 'user_registration_login_options_prevent_core_login', 'no', 'yes'),
(587, 'user_registration_login_options_login_redirect_url', '', 'yes'),
(588, 'user_registration_label_username_or_email', 'Имя пользователя или адрес электронной почты', 'yes'),
(589, 'user_registration_label_password', 'Пароль', 'yes'),
(590, 'user_registration_label_remember_me', 'Запомни меня', 'yes'),
(591, 'user_registration_label_login', 'Авторизоваться', 'yes'),
(592, 'user_registration_label_lost_your_password', 'Забыли пароль?', 'yes'),
(593, 'user_registration_placeholder_username_or_email', '', 'yes'),
(594, 'user_registration_placeholder_password', '', 'yes'),
(595, 'user_registration_message_username_required', 'Требуется имя пользователя', 'yes'),
(596, 'user_registration_message_empty_password', 'Пустой пароль', 'yes'),
(597, 'user_registration_message_invalid_username', 'Неверное / неизвестное имя пользователя', 'yes'),
(598, 'user_registration_message_unknown_email', 'Неизвестный адрес электронной почты', 'yes'),
(599, 'user_registration_message_pending_approval', 'В ожидании утверждения', 'yes'),
(600, 'user_registration_message_denied_account', 'Отказанный аккаунт', 'yes'),
(666, 'loco_recent', 'a:4:{s:1:\"c\";s:21:\"Loco_data_RecentItems\";s:1:\"v\";i:0;s:1:\"d\";a:1:{s:6:\"bundle\";a:2:{s:43:\"plugin.quiz-master-next/mlw_quizmaster2.php\";i:1622825530;s:46:\"plugin.user-registration/user-registration.php\";i:1623259761;}}s:1:\"t\";i:1623259761;}', 'no');
INSERT INTO `wp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(857, '_transient_dirsize_cache', 'a:542:{s:64:\"C:\\OpenServer\\domains\\BrainFood-project/wp-admin/css/colors/blue\";i:77947;s:66:\"C:\\OpenServer\\domains\\BrainFood-project/wp-admin/css/colors/coffee\";i:75422;s:69:\"C:\\OpenServer\\domains\\BrainFood-project/wp-admin/css/colors/ectoplasm\";i:77953;s:65:\"C:\\OpenServer\\domains\\BrainFood-project/wp-admin/css/colors/light\";i:78535;s:68:\"C:\\OpenServer\\domains\\BrainFood-project/wp-admin/css/colors/midnight\";i:77912;s:66:\"C:\\OpenServer\\domains\\BrainFood-project/wp-admin/css/colors/modern\";i:78026;s:65:\"C:\\OpenServer\\domains\\BrainFood-project/wp-admin/css/colors/ocean\";i:75444;s:67:\"C:\\OpenServer\\domains\\BrainFood-project/wp-admin/css/colors/sunrise\";i:77972;s:59:\"C:\\OpenServer\\domains\\BrainFood-project/wp-admin/css/colors\";i:642361;s:52:\"C:\\OpenServer\\domains\\BrainFood-project/wp-admin/css\";i:2459900;s:55:\"C:\\OpenServer\\domains\\BrainFood-project/wp-admin/images\";i:829649;s:57:\"C:\\OpenServer\\domains\\BrainFood-project/wp-admin/includes\";i:2847159;s:59:\"C:\\OpenServer\\domains\\BrainFood-project/wp-admin/js/widgets\";i:139504;s:51:\"C:\\OpenServer\\domains\\BrainFood-project/wp-admin/js\";i:1887773;s:54:\"C:\\OpenServer\\domains\\BrainFood-project/wp-admin/maint\";i:7260;s:56:\"C:\\OpenServer\\domains\\BrainFood-project/wp-admin/network\";i:123297;s:53:\"C:\\OpenServer\\domains\\BrainFood-project/wp-admin/user\";i:3418;s:48:\"C:\\OpenServer\\domains\\BrainFood-project/wp-admin\";i:9011931;s:68:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/languages/plugins\";i:548449;s:67:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/languages/themes\";i:0;s:60:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/languages\";i:3684225;s:58:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/upgrade\";i:0;s:50:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content\";i:3684253;s:58:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/assets\";i:9253;s:66:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/block-patterns\";i:17482;s:66:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/block-supports\";i:14925;s:67:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/archives\";i:328;s:64:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/audio\";i:791;s:64:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/block\";i:244;s:65:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/button\";i:1150;s:66:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/buttons\";i:354;s:67:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/calendar\";i:234;s:69:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/categories\";i:433;s:63:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/code\";i:251;s:65:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/column\";i:327;s:66:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/columns\";i:360;s:64:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/embed\";i:601;s:63:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/file\";i:815;s:67:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/freeform\";i:282;s:66:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/gallery\";i:1545;s:64:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/group\";i:500;s:66:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/heading\";i:1330;s:63:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/html\";i:273;s:64:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/image\";i:1390;s:74:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/latest-comments\";i:539;s:71:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/latest-posts\";i:1513;s:63:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/list\";i:661;s:69:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/media-text\";i:1661;s:66:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/missing\";i:387;s:63:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/more\";i:338;s:67:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/nextpage\";i:235;s:68:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/paragraph\";i:695;s:71:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/preformatted\";i:325;s:68:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/pullquote\";i:656;s:64:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/quote\";i:458;s:62:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/rss\";i:712;s:65:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/search\";i:670;s:68:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/separator\";i:323;s:68:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/shortcode\";i:280;s:70:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/social-link\";i:439;s:71:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/social-links\";i:830;s:65:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/spacer\";i:253;s:66:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/subhead\";i:339;s:64:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/table\";i:2449;s:68:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/tag-cloud\";i:324;s:71:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/text-columns\";i:538;s:64:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/verse\";i:430;s:64:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks/video\";i:1409;s:58:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/blocks\";i:119336;s:64:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/certificates\";i:234459;s:76:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/css/dist/block-directory\";i:19946;s:73:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/css/dist/block-editor\";i:401180;s:74:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/css/dist/block-library\";i:514190;s:71:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/css/dist/components\";i:491170;s:70:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/css/dist/edit-post\";i:195299;s:67:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/css/dist/editor\";i:110295;s:75:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/css/dist/format-library\";i:11438;s:81:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/css/dist/list-reusable-blocks\";i:16656;s:64:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/css/dist/nux\";i:14076;s:60:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/css/dist\";i:1774250;s:55:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/css\";i:2412529;s:61:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/customize\";i:170161;s:57:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/fonts\";i:289826;s:55:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/ID3\";i:1134191;s:66:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/images/crystal\";i:15541;s:64:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/images/media\";i:2419;s:66:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/images/smilies\";i:10082;s:62:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/images/wlw\";i:4413;s:58:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/images\";i:103747;s:55:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/IXR\";i:33999;s:65:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/codemirror\";i:1287141;s:59:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/crop\";i:20004;s:66:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/dist/vendor\";i:2543129;s:59:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/dist\";i:13709894;s:68:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/imgareaselect\";i:49029;s:60:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/jcrop\";i:18340;s:64:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/jquery/ui\";i:793452;s:61:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/jquery\";i:1307925;s:77:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/mediaelement/renderers\";i:18880;s:67:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/mediaelement\";i:719405;s:63:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/plupload\";i:487963;s:64:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/swfupload\";i:8715;s:63:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/thickbox\";i:31185;s:68:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/langs\";i:15529;s:78:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/charmap\";i:31811;s:82:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/colorpicker\";i:4910;s:83:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/compat3x/css\";i:8179;s:79:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/compat3x\";i:21758;s:85:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/directionality\";i:2749;s:81:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/fullscreen\";i:7779;s:73:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/hr\";i:1347;s:76:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/image\";i:55874;s:75:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/link\";i:32949;s:76:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/lists\";i:97383;s:76:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/media\";i:57914;s:76:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/paste\";i:113193;s:79:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/tabfocus\";i:5336;s:80:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/textcolor\";i:16237;s:80:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/wordpress\";i:50606;s:83:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/wpautoresize\";i:8332;s:80:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/wpdialogs\";i:3761;s:82:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/wpeditimage\";i:37716;s:78:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/wpemoji\";i:5099;s:80:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/wpgallery\";i:4806;s:77:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/wplink\";i:26476;s:84:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/wptextpattern\";i:11927;s:77:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins/wpview\";i:8994;s:70:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/plugins\";i:606957;s:84:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/skins/lightgray/fonts\";i:155760;s:82:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/skins/lightgray/img\";i:2856;s:78:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/skins/lightgray\";i:210254;s:85:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/skins/wordpress/images\";i:14207;s:78:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/skins/wordpress\";i:22831;s:68:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/skins\";i:233085;s:76:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/themes/inlite\";i:452642;s:76:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/themes/modern\";i:446221;s:69:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/themes\";i:898863;s:68:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce/utils\";i:18822;s:62:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js/tinymce\";i:2853643;s:54:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/js\";i:22869559;s:61:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/PHPMailer\";i:219649;s:56:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/pomo\";i:52183;s:65:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/random_compat\";i:40843;s:65:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/Requests/Auth\";i:1941;s:67:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/Requests/Cookie\";i:3818;s:75:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/Requests/Exception/HTTP\";i:14334;s:80:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/Requests/Exception/Transport\";i:918;s:70:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/Requests/Exception\";i:16745;s:66:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/Requests/Proxy\";i:3471;s:69:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/Requests/Response\";i:2125;s:70:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/Requests/Transport\";i:27761;s:68:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/Requests/Utility\";i:3393;s:60:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/Requests\";i:136596;s:70:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/rest-api/endpoints\";i:497137;s:67:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/rest-api/fields\";i:22171;s:67:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/rest-api/search\";i:15180;s:60:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/rest-api\";i:617757;s:67:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/SimplePie/Cache\";i:39593;s:74:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/SimplePie/Content/Type\";i:8015;s:69:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/SimplePie/Content\";i:8015;s:73:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/SimplePie/Decode/HTML\";i:17241;s:68:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/SimplePie/Decode\";i:17241;s:66:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/SimplePie/HTTP\";i:11515;s:65:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/SimplePie/Net\";i:7493;s:67:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/SimplePie/Parse\";i:20551;s:77:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/SimplePie/XML/Declaration\";i:7098;s:65:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/SimplePie/XML\";i:7098;s:61:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/SimplePie\";i:455756;s:70:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sitemaps/providers\";i:15133;s:60:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sitemaps\";i:45054;s:69:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat/lib\";i:76084;s:90:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat/namespaced/Core/ChaCha20\";i:224;s:95:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat/namespaced/Core/Curve25519/Ge\";i:602;s:92:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat/namespaced/Core/Curve25519\";i:820;s:90:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat/namespaced/Core/Poly1305\";i:112;s:81:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat/namespaced/Core\";i:2444;s:76:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat/namespaced\";i:2698;s:81:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat/src/Core/Base64\";i:22135;s:83:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat/src/Core/ChaCha20\";i:5152;s:88:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat/src/Core/Curve25519/Ge\";i:7881;s:85:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat/src/Core/Curve25519\";i:119831;s:83:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat/src/Core/Poly1305\";i:12912;s:87:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat/src/Core/SecretStream\";i:3624;s:74:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat/src/Core\";i:388928;s:85:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat/src/Core32/ChaCha20\";i:6295;s:90:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat/src/Core32/Curve25519/Ge\";i:8177;s:87:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat/src/Core32/Curve25519\";i:122399;s:85:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat/src/Core32/Poly1305\";i:15980;s:89:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat/src/Core32/SecretStream\";i:3656;s:76:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat/src/Core32\";i:437457;s:75:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat/src/PHP52\";i:4116;s:69:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat/src\";i:1128619;s:65:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/sodium_compat\";i:1213152;s:68:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/Text/Diff/Engine\";i:31662;s:70:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/Text/Diff/Renderer\";i:5535;s:61:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/Text/Diff\";i:44010;s:56:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/Text\";i:56925;s:64:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/theme-compat\";i:15414;s:59:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes/widgets\";i:148359;s:51:\"C:\\OpenServer\\domains\\BrainFood-project/wp-includes\";i:36546778;s:39:\"C:\\OpenServer\\domains\\BrainFood-project\";i:49416571;s:78:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/assets/css\";i:1565;s:80:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/assets/fonts\";i:1521404;s:83:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/assets/icon/png\";i:10156;s:83:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/assets/icon/svg\";i:84330;s:79:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/assets/icon\";i:101268;s:92:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/assets/images/advantages\";i:18202;s:92:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/assets/images/background\";i:67166;s:91:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/assets/images/education\";i:48724;s:95:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/assets/images/сard__course\";i:12227003;s:81:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/assets/images\";i:14375004;s:77:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/assets/js\";i:37988;s:80:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/assets/video\";i:29471167;s:74:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/assets\";i:45508396;s:138:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/core/Libraries/Plugin_Update_Warning/assets/css\";i:158;s:137:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/core/Libraries/Plugin_Update_Warning/assets/js\";i:1488;s:134:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/core/Libraries/Plugin_Update_Warning/assets\";i:1646;s:127:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/core/Libraries/Plugin_Update_Warning\";i:4626;s:105:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/core/Libraries\";i:4626;s:95:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/core\";i:4626;s:135:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/composer/installers/.github/workflows\";i:3788;s:125:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/composer/installers/.github\";i:3788;s:141:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/composer/installers/src/Composer/Installers\";i:73900;s:130:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/composer/installers/src/Composer\";i:73900;s:121:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/composer/installers/src\";i:74368;s:117:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/composer/installers\";i:82172;s:106:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/composer\";i:105917;s:141:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/.phpstorm.meta.php\";i:1935;s:136:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/assets/styles\";i:2535;s:129:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/assets\";i:2535;s:126:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/bin\";i:7286;s:136:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/build/classic\";i:4706428;s:138:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/build/gutenberg\";i:2892548;s:128:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/build\";i:7598976;s:156:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Container/Condition/Comparer\";i:5495;s:147:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Container/Condition\";i:27111;s:160:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Container/Fulfillable/Translator\";i:6370;s:149:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Container/Fulfillable\";i:19493;s:137:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Container\";i:131576;s:137:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Datastore\";i:24468;s:133:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Event\";i:4717;s:137:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Exception\";i:1150;s:133:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Field\";i:112012;s:134:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Helper\";i:23015;s:164:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Libraries/Sidebar_Manager/assets/css\";i:544;s:163:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Libraries/Sidebar_Manager/assets/js\";i:2003;s:160:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Libraries/Sidebar_Manager/assets\";i:2547;s:153:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Libraries/Sidebar_Manager\";i:7984;s:137:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Libraries\";i:7984;s:134:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Loader\";i:9591;s:134:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Pimple\";i:10383;s:136:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Provider\";i:15234;s:136:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/REST_API\";i:17317;s:135:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Service\";i:31267;s:135:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Toolset\";i:13796;s:137:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Value_Set\";i:6352;s:134:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Walker\";i:1541;s:134:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core/Widget\";i:6799;s:127:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/core\";i:438346;s:132:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/languages\";i:212684;s:160:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/components/block-edit\";i:7665;s:160:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/components/block-save\";i:769;s:155:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/components/field\";i:938;s:169:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/components/not-supported-field\";i:406;s:168:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/components/server-side-render\";i:3397;s:149:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/components\";i:13175;s:157:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/fields/association\";i:2587;s:153:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/fields/complex\";i:8268;s:154:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/fields/datetime\";i:2617;s:150:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/fields/file\";i:950;s:160:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/fields/footer-scripts\";i:333;s:160:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/fields/header-scripts\";i:333;s:152:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/fields/hidden\";i:325;s:151:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/fields/image\";i:481;s:149:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/fields/map\";i:450;s:159:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/fields/media-gallery\";i:1819;s:157:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/fields/multiselect\";i:559;s:152:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/fields/oembed\";i:451;s:151:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/fields/radio\";i:297;s:157:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/fields/radio-image\";i:836;s:152:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/fields/select\";i:377;s:155:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/fields/separator\";i:286;s:149:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/fields/set\";i:293;s:153:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/fields/sidebar\";i:326;s:150:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/fields/text\";i:373;s:154:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/fields/textarea\";i:466;s:145:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/fields\";i:23611;s:166:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/hocs/with-conditional-logic\";i:3149;s:143:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/hocs\";i:3149;s:144:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/store\";i:2466;s:144:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks/utils\";i:311;s:138:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/blocks\";i:44777;s:156:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/components/disabled\";i:2601;s:153:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/components/field\";i:2866;s:161:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/components/media-library\";i:1904;s:158:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/components/no-options\";i:312;s:160:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/components/search-input\";i:2340;s:156:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/components/sortable\";i:1884;s:147:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/components\";i:11907;s:155:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/association\";i:15388;s:152:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/checkbox\";i:1185;s:149:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/color\";i:4006;s:151:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/complex\";i:22397;s:148:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/date\";i:339;s:152:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/datetime\";i:2909;s:148:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/file\";i:5305;s:150:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/hidden\";i:430;s:148:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/html\";i:341;s:147:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/map\";i:7449;s:157:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/media-gallery\";i:8016;s:155:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/multiselect\";i:2683;s:150:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/oembed\";i:9491;s:149:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/radio\";i:2246;s:155:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/radio-image\";i:1028;s:153:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/rich-text\";i:4468;s:150:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/select\";i:1382;s:153:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/separator\";i:704;s:147:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/set\";i:1977;s:151:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/sidebar\";i:2988;s:148:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/text\";i:980;s:152:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/textarea\";i:1023;s:148:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields/time\";i:356;s:143:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/fields\";i:99432;s:164:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/hocs/with-conditional-logic\";i:3828;s:154:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/hocs/with-filters\";i:2243;s:152:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/hocs/with-props\";i:464;s:157:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/hocs/with-validation\";i:3081;s:141:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/hocs\";i:9616;s:145:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/registry\";i:2409;s:142:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/store\";i:3019;s:142:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core/utils\";i:3515;s:136:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/core\";i:130945;s:162:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/components/container\";i:4735;s:158:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/components/field\";i:1280;s:152:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/components\";i:6015;s:162:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/containers/term-meta\";i:1969;s:166:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/containers/theme-options\";i:1587;s:162:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/containers/user-meta\";i:277;s:159:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/containers/widget\";i:1708;s:152:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/containers\";i:7954;s:160:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/fields/association\";i:2458;s:156:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/fields/complex\";i:7168;s:157:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/fields/datetime\";i:341;s:153:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/fields/file\";i:480;s:154:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/fields/image\";i:486;s:162:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/fields/media-gallery\";i:1617;s:160:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/fields/multiselect\";i:486;s:154:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/fields/radio\";i:624;s:156:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/fields/sidebar\";i:347;s:148:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/fields\";i:15201;s:169:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/hocs/with-conditional-logic\";i:4356;s:161:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/hocs/with-container\";i:584;s:157:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/hocs/with-field\";i:1301;s:146:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/hocs\";i:6241;s:145:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/lib\";i:250;s:179:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/monitors/conditional-display/aperture\";i:15982;s:180:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/monitors/conditional-display/comparers\";i:2487;s:181:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/monitors/conditional-display/conditions\";i:5543;s:178:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/monitors/conditional-display/handler\";i:3350;s:176:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/monitors/conditional-display/utils\";i:1418;s:170:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/monitors/conditional-display\";i:29483;s:165:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/monitors/revisions-flag\";i:539;s:160:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/monitors/save-lock\";i:998;s:166:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/monitors/unsaved-changes\";i:970;s:165:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/monitors/widget-handler\";i:4743;s:150:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/monitors\";i:37813;s:147:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/store\";i:11842;s:147:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes/utils\";i:2659;s:141:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/metaboxes\";i:88859;s:138:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages/vendor\";i:1469;s:131:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/packages\";i:266050;s:149:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/templates/Container/common\";i:2174;s:142:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/templates/Container\";i:3680;s:142:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/templates/Exception\";i:1698;s:132:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields/templates\";i:5378;s:122:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger/carbon-fields\";i:8850265;s:108:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor/htmlburger\";i:8850265;s:97:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields/vendor\";i:8956365;s:90:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields\";i:8981374;s:98:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes/carbon-fields-options\";i:1970;s:76:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/includes\";i:8983344;s:86:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/PHPMailer/language\";i:97680;s:81:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/PHPMailer/src\";i:235080;s:77:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood/PHPMailer\";i:391107;s:67:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes/brainfood\";i:55037370;s:57:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/themes\";i:55037398;s:83:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/languages\";i:51492;s:86:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/lib/compiled\";i:65375;s:82:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/lib/data\";i:19314;s:77:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/lib\";i:84689;s:87:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/pub/css/skins\";i:7279;s:81:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/pub/css\";i:86896;s:82:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/pub/font\";i:150230;s:85:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/pub/img/api\";i:5336;s:92:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/pub/img/skins/blue\";i:1849;s:94:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/pub/img/skins/coffee\";i:1849;s:97:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/pub/img/skins/ectoplasm\";i:1849;s:93:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/pub/img/skins/fresh\";i:1849;s:93:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/pub/img/skins/light\";i:1849;s:96:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/pub/img/skins/midnight\";i:1849;s:94:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/pub/img/skins/modern\";i:1849;s:93:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/pub/img/skins/ocean\";i:1849;s:95:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/pub/img/skins/sunrise\";i:1849;s:87:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/pub/img/skins\";i:16641;s:84:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/pub/img/wg\";i:177;s:81:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/pub/img\";i:50603;s:84:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/pub/js/min\";i:121715;s:80:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/pub/js\";i:121715;s:77:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/pub\";i:409444;s:90:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src/admin/bundle\";i:38518;s:90:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src/admin/config\";i:17509;s:88:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src/admin/file\";i:45706;s:88:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src/admin/init\";i:21775;s:88:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src/admin/list\";i:7519;s:83:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src/admin\";i:141188;s:89:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src/ajax/common\";i:1181;s:82:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src/ajax\";i:47582;s:81:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src/api\";i:25632;s:81:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src/cli\";i:30960;s:84:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src/compat\";i:9131;s:84:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src/config\";i:39862;s:82:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src/data\";i:41363;s:83:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src/error\";i:16396;s:80:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src/fs\";i:73567;s:85:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src/gettext\";i:48535;s:83:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src/hooks\";i:20769;s:80:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src/js\";i:6004;s:81:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src/mvc\";i:56257;s:84:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src/output\";i:5873;s:85:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src/package\";i:107368;s:82:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src/test\";i:20593;s:77:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/src\";i:706263;s:96:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/tpl/admin/bundle/setup\";i:8365;s:90:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/tpl/admin/bundle\";i:33569;s:90:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/tpl/admin/common\";i:3790;s:90:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/tpl/admin/config\";i:30747;s:90:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/tpl/admin/errors\";i:5077;s:88:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/tpl/admin/file\";i:29613;s:88:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/tpl/admin/help\";i:7112;s:88:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/tpl/admin/init\";i:16259;s:88:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/tpl/admin/list\";i:3675;s:83:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/tpl/admin\";i:135151;s:82:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/tpl/ajax\";i:2821;s:83:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/tpl/debug\";i:538;s:77:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate/tpl\";i:138510;s:73:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/loco-translate\";i:1412234;s:68:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/page-menu\";i:31396;s:82:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/quiz-master-next/assets\";i:361477;s:82:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/quiz-master-next/blocks\";i:3613;s:86:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/quiz-master-next/css/images\";i:562;s:79:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/quiz-master-next/css\";i:208426;s:85:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/quiz-master-next/js/config\";i:279614;s:89:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/quiz-master-next/js/extensions\";i:46906;s:78:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/quiz-master-next/js\";i:1365017;s:80:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/quiz-master-next/lang\";i:63844;s:85:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/quiz-master-next/php/admin\";i:331553;s:91:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/quiz-master-next/php/classes/lib\";i:13125;s:87:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/quiz-master-next/php/classes\";i:349741;s:86:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/quiz-master-next/php/images\";i:19850;s:79:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/quiz-master-next/php\";i:868125;s:85:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/quiz-master-next/templates\";i:68023;s:92:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/quiz-master-next/tests/acceptance\";i:4046;s:97:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/quiz-master-next/tests/_support/Helper\";i:730;s:101:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/quiz-master-next/tests/_support/_generated\";i:191764;s:90:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/quiz-master-next/tests/_support\";i:194718;s:81:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/quiz-master-next/tests\";i:203691;s:75:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/quiz-master-next\";i:3260287;s:91:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/regenerate-thumbnails/css/images\";i:6116;s:84:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/regenerate-thumbnails/css\";i:7037;s:85:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/regenerate-thumbnails/dist\";i:152857;s:89:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/regenerate-thumbnails/includes\";i:33073;s:83:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/regenerate-thumbnails/js\";i:697;s:80:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/regenerate-thumbnails\";i:227811;s:80:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/svg-support/admin/img\";i:3373;s:76:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/svg-support/admin\";i:41821;s:74:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/svg-support/css\";i:617;s:80:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/svg-support/functions\";i:14700;s:77:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/svg-support/js/min\";i:1348;s:73:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/svg-support/js\";i:4700;s:80:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/svg-support/languages\";i:38093;s:75:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/svg-support/scss\";i:1054;s:70:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/svg-support\";i:216705;s:98:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/css/components\";i:11688;s:97:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/css/flatpickr\";i:14849;s:104:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/css/jquery-ui/images\";i:36714;s:97:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/css/jquery-ui\";i:109264;s:94:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/css/layout\";i:1017;s:94:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/css/mixins\";i:6453;s:105:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/css/perfect-scrollbar\";i:2598;s:96:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/css/snackbar\";i:1778;s:99:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/css/sweetalert2\";i:54626;s:97:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/css/templates\";i:1375;s:99:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/css/ur-snackbar\";i:1778;s:97:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/css/variables\";i:2570;s:87:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/css\";i:780417;s:89:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/fonts\";i:67982;s:96:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/images/icons\";i:1008;s:90:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/images\";i:21467;s:102:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/js/admin/gutenberg\";i:7985;s:92:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/js/admin\";i:174180;s:94:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/js/chartjs\";i:156728;s:96:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/js/flatpickr\";i:44881;s:95:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/js/frontend\";i:192931;s:96:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/js/inputmask\";i:251078;s:101:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/js/jquery-blockui\";i:29144;s:100:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/js/jquery-tiptip\";i:9551;s:104:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/js/perfect-scrollbar\";i:53561;s:96:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/js/selectWoo\";i:457608;s:98:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/js/sweetalert2\";i:127709;s:100:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/js/ur-components\";i:7784;s:98:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/js/ur-snackbar\";i:3853;s:86:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets/js\";i:1509008;s:83:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/assets\";i:2378874;s:95:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/includes/abstracts\";i:32230;s:107:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/includes/admin/settings/emails\";i:29439;s:100:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/includes/admin/settings\";i:73633;s:99:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/includes/admin/updater\";i:18241;s:97:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/includes/admin/views\";i:26671;s:91:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/includes/admin\";i:314925;s:99:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/includes/form/settings\";i:34602;s:102:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/includes/form/views/admin\";i:14164;s:96:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/includes/form/views\";i:14164;s:90:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/includes/form\";i:110242;s:94:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/includes/frontend\";i:22808;s:96:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/includes/interfaces\";i:4668;s:95:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/includes/libraries\";i:13114;s:98:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/includes/log-handlers\";i:9207;s:96:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/includes/shortcodes\";i:15050;s:85:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/includes\";i:854716;s:86:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/languages\";i:885780;s:96:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/templates/myaccount\";i:39308;s:94:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/templates/notices\";i:2825;s:86:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration/templates\";i:53038;s:76:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/user-registration\";i:4242425;s:83:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/wp-translitera/languages\";i:18276;s:73:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins/wp-translitera\";i:59435;s:58:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/plugins\";i:9450321;s:66:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/uploads/2021/05\";i:21773559;s:66:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/uploads/2021/06\";i:0;s:63:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/uploads/2021\";i:21773559;s:66:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/uploads/ur-logs\";i:13;s:58:\"C:\\OpenServer\\domains\\BrainFood-project/wp-content/uploads\";i:21773572;}', 'yes');
INSERT INTO `wp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(887, 'arve_install_date', '1622702465', 'yes'),
(888, 'arve_version', '9.5.12', 'yes'),
(889, 'nextgenthemes_options_ver', '9.0', 'yes'),
(890, 'nextgenthemes_arve', 'a:0:{}', 'yes'),
(891, 'nextgenthemes_arve_options_ver', '9.0.0-beta9', 'yes'),
(1054, 'user_registration_enable_reset_password_email', 'yes', 'yes'),
(1055, 'user_registration_reset_password_email_subject', 'Электронная почта для сброса пароля: {{blog_info}}', 'yes'),
(1056, 'user_registration_reset_password_email', '<p>Кто-то запросил сброс пароля для следующей учетной записи:</p>\n<p>Название сайта: {{blog_info}} <br />\nИмя пользователя: {{username}} </p>\n<p>Если это была ошибка, просто проигнорируйте это письмо, и ничего не произойдет. </p>\n<p>Чтобы сбросить пароль, посетите следующий адрес: <br />\n<a href=\"{{home_url}}/{{ur_login}}?action=rp&key={{key}}&login={{username}} \" rel=\"noreferrer noopener\" target=\"_blank\">Кликните сюда</a></p>\n<p>Благодарю вас!</p>\n', 'yes'),
(1076, '_site_transient_timeout_php_check_97f83d63b8a66f6e8c057d89a83d8845', '1633777092', 'no'),
(1077, '_site_transient_php_check_97f83d63b8a66f6e8c057d89a83d8845', 'a:5:{s:19:\"recommended_version\";s:3:\"7.4\";s:15:\"minimum_version\";s:6:\"5.6.20\";s:12:\"is_supported\";b:0;s:9:\"is_secure\";b:0;s:13:\"is_acceptable\";b:0;}', 'no'),
(1099, '_site_transient_timeout_theme_roots', '1633272267', 'no'),
(1100, '_site_transient_theme_roots', 'a:1:{s:9:\"brainfood\";s:7:\"/themes\";}', 'no'),
(1103, '_site_transient_update_core', 'O:8:\"stdClass\":4:{s:7:\"updates\";a:4:{i:0;O:8:\"stdClass\":10:{s:8:\"response\";s:7:\"upgrade\";s:8:\"download\";s:65:\"https://downloads.wordpress.org/release/ru_RU/wordpress-5.8.1.zip\";s:6:\"locale\";s:5:\"ru_RU\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:65:\"https://downloads.wordpress.org/release/ru_RU/wordpress-5.8.1.zip\";s:10:\"no_content\";s:0:\"\";s:11:\"new_bundled\";s:0:\"\";s:7:\"partial\";s:0:\"\";s:8:\"rollback\";s:0:\"\";}s:7:\"current\";s:5:\"5.8.1\";s:7:\"version\";s:5:\"5.8.1\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.6\";s:15:\"partial_version\";s:0:\"\";}i:1;O:8:\"stdClass\":10:{s:8:\"response\";s:7:\"upgrade\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-5.8.1.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-5.8.1.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-5.8.1-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-5.8.1-new-bundled.zip\";s:7:\"partial\";s:0:\"\";s:8:\"rollback\";s:0:\"\";}s:7:\"current\";s:5:\"5.8.1\";s:7:\"version\";s:5:\"5.8.1\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.6\";s:15:\"partial_version\";s:0:\"\";}i:2;O:8:\"stdClass\":11:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:65:\"https://downloads.wordpress.org/release/ru_RU/wordpress-5.8.1.zip\";s:6:\"locale\";s:5:\"ru_RU\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:65:\"https://downloads.wordpress.org/release/ru_RU/wordpress-5.8.1.zip\";s:10:\"no_content\";s:0:\"\";s:11:\"new_bundled\";s:0:\"\";s:7:\"partial\";s:0:\"\";s:8:\"rollback\";s:0:\"\";}s:7:\"current\";s:5:\"5.8.1\";s:7:\"version\";s:5:\"5.8.1\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.6\";s:15:\"partial_version\";s:0:\"\";s:9:\"new_files\";s:1:\"1\";}i:3;O:8:\"stdClass\":11:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:65:\"https://downloads.wordpress.org/release/ru_RU/wordpress-5.7.3.zip\";s:6:\"locale\";s:5:\"ru_RU\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:65:\"https://downloads.wordpress.org/release/ru_RU/wordpress-5.7.3.zip\";s:10:\"no_content\";s:0:\"\";s:11:\"new_bundled\";s:0:\"\";s:7:\"partial\";s:0:\"\";s:8:\"rollback\";s:0:\"\";}s:7:\"current\";s:5:\"5.7.3\";s:7:\"version\";s:5:\"5.7.3\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.6\";s:15:\"partial_version\";s:0:\"\";s:9:\"new_files\";s:1:\"1\";}}s:12:\"last_checked\";i:1633270477;s:15:\"version_checked\";s:5:\"5.7.2\";s:12:\"translations\";a:1:{i:0;a:7:{s:4:\"type\";s:4:\"core\";s:4:\"slug\";s:7:\"default\";s:8:\"language\";s:5:\"ru_RU\";s:7:\"version\";s:5:\"5.7.2\";s:7:\"updated\";s:19:\"2021-06-14 18:30:49\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/5.7.2/ru_RU.zip\";s:10:\"autoupdate\";b:1;}}}', 'no'),
(1104, '_site_transient_update_themes', 'O:8:\"stdClass\":5:{s:12:\"last_checked\";i:1633270478;s:7:\"checked\";a:1:{s:9:\"brainfood\";s:0:\"\";}s:8:\"response\";a:0:{}s:9:\"no_update\";a:0:{}s:12:\"translations\";a:0:{}}', 'no'),
(1105, '_site_transient_update_plugins', 'O:8:\"stdClass\":5:{s:12:\"last_checked\";i:1633270479;s:7:\"checked\";a:8:{s:73:\"advanced-responsive-video-embedder/advanced-responsive-video-embedder.php\";s:6:\"9.5.12\";s:23:\"loco-translate/loco.php\";s:5:\"2.5.2\";s:22:\"page-menu/pagemenu.php\";s:5:\"5.1.4\";s:36:\"quiz-master-next/mlw_quizmaster2.php\";s:6:\"7.1.16\";s:47:\"regenerate-thumbnails/regenerate-thumbnails.php\";s:5:\"3.1.5\";s:27:\"svg-support/svg-support.php\";s:6:\"2.3.18\";s:39:\"user-registration/user-registration.php\";s:5:\"1.9.7\";s:33:\"wp-translitera/wp-translitera.php\";s:6:\"p1.2.5\";}s:8:\"response\";a:5:{s:73:\"advanced-responsive-video-embedder/advanced-responsive-video-embedder.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:48:\"w.org/plugins/advanced-responsive-video-embedder\";s:4:\"slug\";s:34:\"advanced-responsive-video-embedder\";s:6:\"plugin\";s:73:\"advanced-responsive-video-embedder/advanced-responsive-video-embedder.php\";s:11:\"new_version\";s:6:\"9.5.14\";s:3:\"url\";s:65:\"https://wordpress.org/plugins/advanced-responsive-video-embedder/\";s:7:\"package\";s:84:\"https://downloads.wordpress.org/plugin/advanced-responsive-video-embedder.9.5.14.zip\";s:5:\"icons\";a:1:{s:2:\"1x\";s:87:\"https://ps.w.org/advanced-responsive-video-embedder/assets/icon-128x128.png?rev=2166634\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:90:\"https://ps.w.org/advanced-responsive-video-embedder/assets/banner-1544x500.png?rev=2166634\";s:2:\"1x\";s:89:\"https://ps.w.org/advanced-responsive-video-embedder/assets/banner-772x250.png?rev=2166634\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:6:\"4.9.16\";s:6:\"tested\";s:5:\"5.7.3\";s:12:\"requires_php\";s:3:\"5.6\";s:13:\"compatibility\";O:8:\"stdClass\":0:{}}s:23:\"loco-translate/loco.php\";O:8:\"stdClass\":14:{s:2:\"id\";s:28:\"w.org/plugins/loco-translate\";s:4:\"slug\";s:14:\"loco-translate\";s:6:\"plugin\";s:23:\"loco-translate/loco.php\";s:11:\"new_version\";s:5:\"2.5.4\";s:3:\"url\";s:45:\"https://wordpress.org/plugins/loco-translate/\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/plugin/loco-translate.2.5.4.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:67:\"https://ps.w.org/loco-translate/assets/icon-256x256.png?rev=1000676\";s:2:\"1x\";s:67:\"https://ps.w.org/loco-translate/assets/icon-128x128.png?rev=1000676\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:68:\"https://ps.w.org/loco-translate/assets/banner-772x250.jpg?rev=745046\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"4.1\";s:6:\"tested\";s:5:\"5.8.1\";s:12:\"requires_php\";s:5:\"5.2.4\";s:13:\"compatibility\";O:8:\"stdClass\":0:{}s:14:\"upgrade_notice\";s:54:\"<ul>\n<li>Various improvements and bug fixes</li>\n</ul>\";}s:36:\"quiz-master-next/mlw_quizmaster2.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:30:\"w.org/plugins/quiz-master-next\";s:4:\"slug\";s:16:\"quiz-master-next\";s:6:\"plugin\";s:36:\"quiz-master-next/mlw_quizmaster2.php\";s:11:\"new_version\";s:5:\"7.3.4\";s:3:\"url\";s:47:\"https://wordpress.org/plugins/quiz-master-next/\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/plugin/quiz-master-next.7.3.4.zip\";s:5:\"icons\";a:1:{s:2:\"1x\";s:69:\"https://ps.w.org/quiz-master-next/assets/icon-128x128.png?rev=1876099\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:71:\"https://ps.w.org/quiz-master-next/assets/banner-772x250.gif?rev=2341465\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"4.9\";s:6:\"tested\";s:5:\"5.8.1\";s:12:\"requires_php\";s:3:\"5.4\";s:13:\"compatibility\";O:8:\"stdClass\":0:{}}s:27:\"svg-support/svg-support.php\";O:8:\"stdClass\":14:{s:2:\"id\";s:25:\"w.org/plugins/svg-support\";s:4:\"slug\";s:11:\"svg-support\";s:6:\"plugin\";s:27:\"svg-support/svg-support.php\";s:11:\"new_version\";s:6:\"2.3.19\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/svg-support/\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/plugin/svg-support.2.3.19.zip\";s:5:\"icons\";a:3:{s:2:\"2x\";s:64:\"https://ps.w.org/svg-support/assets/icon-256x256.png?rev=1417738\";s:2:\"1x\";s:56:\"https://ps.w.org/svg-support/assets/icon.svg?rev=1417738\";s:3:\"svg\";s:56:\"https://ps.w.org/svg-support/assets/icon.svg?rev=1417738\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:67:\"https://ps.w.org/svg-support/assets/banner-1544x500.jpg?rev=1215377\";s:2:\"1x\";s:66:\"https://ps.w.org/svg-support/assets/banner-772x250.jpg?rev=1215377\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"4.8\";s:6:\"tested\";s:5:\"5.8.1\";s:12:\"requires_php\";s:3:\"5.2\";s:13:\"compatibility\";O:8:\"stdClass\":0:{}s:14:\"upgrade_notice\";s:88:\"<p>Quick update to address PHP warnings from localize_script and to add a SRC check.</p>\";}s:39:\"user-registration/user-registration.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:31:\"w.org/plugins/user-registration\";s:4:\"slug\";s:17:\"user-registration\";s:6:\"plugin\";s:39:\"user-registration/user-registration.php\";s:11:\"new_version\";s:5:\"2.0.3\";s:3:\"url\";s:48:\"https://wordpress.org/plugins/user-registration/\";s:7:\"package\";s:66:\"https://downloads.wordpress.org/plugin/user-registration.2.0.3.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:70:\"https://ps.w.org/user-registration/assets/icon-256x256.png?rev=2141788\";s:2:\"1x\";s:70:\"https://ps.w.org/user-registration/assets/icon-128x128.png?rev=2141788\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:72:\"https://ps.w.org/user-registration/assets/banner-772x250.png?rev=2141793\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"4.0\";s:6:\"tested\";s:5:\"5.8.1\";s:12:\"requires_php\";s:3:\"5.3\";s:13:\"compatibility\";O:8:\"stdClass\":0:{}}}s:12:\"translations\";a:5:{i:0;a:7:{s:4:\"type\";s:6:\"plugin\";s:4:\"slug\";s:34:\"advanced-responsive-video-embedder\";s:8:\"language\";s:5:\"ru_RU\";s:7:\"version\";s:6:\"9.5.12\";s:7:\"updated\";s:19:\"2020-11-30 01:28:04\";s:7:\"package\";s:102:\"https://downloads.wordpress.org/translation/plugin/advanced-responsive-video-embedder/9.5.12/ru_RU.zip\";s:10:\"autoupdate\";b:1;}i:1;a:7:{s:4:\"type\";s:6:\"plugin\";s:4:\"slug\";s:14:\"loco-translate\";s:8:\"language\";s:5:\"ru_RU\";s:7:\"version\";s:5:\"2.5.2\";s:7:\"updated\";s:19:\"2021-03-23 13:47:40\";s:7:\"package\";s:81:\"https://downloads.wordpress.org/translation/plugin/loco-translate/2.5.2/ru_RU.zip\";s:10:\"autoupdate\";b:1;}i:2;a:7:{s:4:\"type\";s:6:\"plugin\";s:4:\"slug\";s:21:\"regenerate-thumbnails\";s:8:\"language\";s:5:\"ru_RU\";s:7:\"version\";s:5:\"3.1.5\";s:7:\"updated\";s:19:\"2019-05-10 15:36:42\";s:7:\"package\";s:88:\"https://downloads.wordpress.org/translation/plugin/regenerate-thumbnails/3.1.5/ru_RU.zip\";s:10:\"autoupdate\";b:1;}i:3;a:7:{s:4:\"type\";s:6:\"plugin\";s:4:\"slug\";s:11:\"svg-support\";s:8:\"language\";s:5:\"ru_RU\";s:7:\"version\";s:6:\"2.3.18\";s:7:\"updated\";s:19:\"2021-07-02 07:50:02\";s:7:\"package\";s:79:\"https://downloads.wordpress.org/translation/plugin/svg-support/2.3.18/ru_RU.zip\";s:10:\"autoupdate\";b:1;}i:4;a:7:{s:4:\"type\";s:6:\"plugin\";s:4:\"slug\";s:14:\"wp-translitera\";s:8:\"language\";s:5:\"ru_RU\";s:7:\"version\";s:6:\"p1.2.5\";s:7:\"updated\";s:19:\"2018-05-28 11:02:56\";s:7:\"package\";s:82:\"https://downloads.wordpress.org/translation/plugin/wp-translitera/p1.2.5/ru_RU.zip\";s:10:\"autoupdate\";b:1;}}s:9:\"no_update\";a:3:{s:22:\"page-menu/pagemenu.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:23:\"w.org/plugins/page-menu\";s:4:\"slug\";s:9:\"page-menu\";s:6:\"plugin\";s:22:\"page-menu/pagemenu.php\";s:11:\"new_version\";s:5:\"5.1.4\";s:3:\"url\";s:40:\"https://wordpress.org/plugins/page-menu/\";s:7:\"package\";s:58:\"https://downloads.wordpress.org/plugin/page-menu.5.1.4.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:62:\"https://ps.w.org/page-menu/assets/icon-256x256.png?rev=1447139\";s:2:\"1x\";s:62:\"https://ps.w.org/page-menu/assets/icon-128x128.png?rev=1447139\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:65:\"https://ps.w.org/page-menu/assets/banner-1544x500.png?rev=1447139\";s:2:\"1x\";s:64:\"https://ps.w.org/page-menu/assets/banner-772x250.png?rev=1447139\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:5:\"3.4.1\";}s:47:\"regenerate-thumbnails/regenerate-thumbnails.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:35:\"w.org/plugins/regenerate-thumbnails\";s:4:\"slug\";s:21:\"regenerate-thumbnails\";s:6:\"plugin\";s:47:\"regenerate-thumbnails/regenerate-thumbnails.php\";s:11:\"new_version\";s:5:\"3.1.5\";s:3:\"url\";s:52:\"https://wordpress.org/plugins/regenerate-thumbnails/\";s:7:\"package\";s:70:\"https://downloads.wordpress.org/plugin/regenerate-thumbnails.3.1.5.zip\";s:5:\"icons\";a:1:{s:2:\"1x\";s:74:\"https://ps.w.org/regenerate-thumbnails/assets/icon-128x128.png?rev=1753390\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:77:\"https://ps.w.org/regenerate-thumbnails/assets/banner-1544x500.jpg?rev=1753390\";s:2:\"1x\";s:76:\"https://ps.w.org/regenerate-thumbnails/assets/banner-772x250.jpg?rev=1753390\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"4.7\";}s:33:\"wp-translitera/wp-translitera.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:28:\"w.org/plugins/wp-translitera\";s:4:\"slug\";s:14:\"wp-translitera\";s:6:\"plugin\";s:33:\"wp-translitera/wp-translitera.php\";s:11:\"new_version\";s:6:\"p1.2.5\";s:3:\"url\";s:45:\"https://wordpress.org/plugins/wp-translitera/\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/plugin/wp-translitera.p1.2.5.zip\";s:5:\"icons\";a:1:{s:7:\"default\";s:58:\"https://s.w.org/plugins/geopattern-icon/wp-translitera.svg\";}s:7:\"banners\";a:0:{}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"3.2\";}}}', 'no');

-- --------------------------------------------------------

--
-- Структура таблицы `wp_postmeta`
--

CREATE TABLE `wp_postmeta` (
  `meta_id` bigint UNSIGNED NOT NULL,
  `post_id` bigint UNSIGNED NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_520_ci
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- Дамп данных таблицы `wp_postmeta`
--

INSERT INTO `wp_postmeta` (`meta_id`, `post_id`, `meta_key`, `meta_value`) VALUES
(15, 10, '_edit_lock', '1621775489:1'),
(16, 10, '_wp_page_template', 'page-home.php'),
(17, 12, '_wp_attached_file', '2021/05/logo.png'),
(18, 12, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:220;s:6:\"height\";i:70;s:4:\"file\";s:16:\"2021/05/logo.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:15:\"logo-150x70.png\";s:5:\"width\";i:150;s:6:\"height\";i:70;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(28, 14, '_wp_attached_file', '2021/05/main-bg.jpg'),
(29, 14, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1920;s:6:\"height\";i:1080;s:4:\"file\";s:19:\"2021/05/main-bg.jpg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"main-bg-300x169.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:169;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:20:\"main-bg-1024x576.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:576;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"main-bg-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:19:\"main-bg-768x432.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:432;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"1536x1536\";a:4:{s:4:\"file\";s:20:\"main-bg-1536x864.jpg\";s:5:\"width\";i:1536;s:6:\"height\";i:864;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:19:\"main-bg-320x225.jpg\";s:5:\"width\";i:320;s:6:\"height\";i:225;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:10:\"1595166316\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(30, 10, 'inline_featured_image', '0'),
(31, 10, '_edit_last', '1'),
(32, 10, '_top_img', '14'),
(33, 11, '_top_img', '14'),
(35, 16, 'inline_featured_image', '0'),
(36, 16, '_edit_last', '1'),
(37, 16, '_edit_lock', '1621678498:1'),
(38, 17, '_wp_attached_file', '2021/05/mpi-scaled.jpg'),
(39, 17, '_wp_attachment_metadata', 'a:6:{s:5:\"width\";i:2560;s:6:\"height\";i:1707;s:4:\"file\";s:22:\"2021/05/mpi-scaled.jpg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:15:\"mpi-300x200.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:16:\"mpi-1024x683.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:683;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:15:\"mpi-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:15:\"mpi-768x512.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:512;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"1536x1536\";a:4:{s:4:\"file\";s:17:\"mpi-1536x1024.jpg\";s:5:\"width\";i:1536;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"2048x2048\";a:4:{s:4:\"file\";s:17:\"mpi-2048x1365.jpg\";s:5:\"width\";i:2048;s:6:\"height\";i:1365;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:15:\"mpi-320x225.jpg\";s:5:\"width\";i:320;s:6:\"height\";i:225;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}s:14:\"original_image\";s:7:\"mpi.jpg\";}'),
(40, 16, '_thumbnail_id', '17'),
(41, 18, 'inline_featured_image', '0'),
(42, 18, '_edit_last', '1'),
(43, 18, '_edit_lock', '1621946335:1'),
(44, 18, '_thumbnail_id', '17'),
(47, 20, 'inline_featured_image', '0'),
(48, 20, '_edit_last', '1'),
(49, 20, '_edit_lock', '1621698873:1'),
(50, 21, '_wp_attached_file', '2021/05/open_mp-scaled.jpg'),
(51, 21, '_wp_attachment_metadata', 'a:6:{s:5:\"width\";i:2560;s:6:\"height\";i:1440;s:4:\"file\";s:26:\"2021/05/open_mp-scaled.jpg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"open_mp-300x169.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:169;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:20:\"open_mp-1024x576.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:576;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"open_mp-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:19:\"open_mp-768x432.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:432;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"1536x1536\";a:4:{s:4:\"file\";s:20:\"open_mp-1536x864.jpg\";s:5:\"width\";i:1536;s:6:\"height\";i:864;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"2048x2048\";a:4:{s:4:\"file\";s:21:\"open_mp-2048x1152.jpg\";s:5:\"width\";i:2048;s:6:\"height\";i:1152;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:19:\"open_mp-320x225.jpg\";s:5:\"width\";i:320;s:6:\"height\";i:225;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}s:14:\"original_image\";s:11:\"open_mp.jpg\";}'),
(52, 20, '_thumbnail_id', '21'),
(55, 22, 'inline_featured_image', '0'),
(56, 22, '_edit_last', '1'),
(57, 22, '_edit_lock', '1621698708:1'),
(58, 23, '_wp_attached_file', '2021/05/cuda.jpg'),
(59, 23, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1083;s:6:\"height\";i:722;s:4:\"file\";s:16:\"2021/05/cuda.jpg\";s:5:\"sizes\";a:5:{s:6:\"medium\";a:4:{s:4:\"file\";s:16:\"cuda-300x200.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:17:\"cuda-1024x683.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:683;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:16:\"cuda-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:16:\"cuda-768x512.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:512;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:16:\"cuda-320x225.jpg\";s:5:\"width\";i:320;s:6:\"height\";i:225;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(60, 22, '_thumbnail_id', '23'),
(62, 24, 'inline_featured_image', '0'),
(63, 24, '_edit_last', '1'),
(64, 24, '_edit_lock', '1621698840:1'),
(65, 25, '_wp_attached_file', '2021/05/sharp-scaled.jpg'),
(66, 25, '_wp_attachment_metadata', 'a:6:{s:5:\"width\";i:2560;s:6:\"height\";i:1707;s:4:\"file\";s:24:\"2021/05/sharp-scaled.jpg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"sharp-300x200.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:18:\"sharp-1024x683.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:683;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"sharp-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:17:\"sharp-768x512.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:512;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"1536x1536\";a:4:{s:4:\"file\";s:19:\"sharp-1536x1024.jpg\";s:5:\"width\";i:1536;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"2048x2048\";a:4:{s:4:\"file\";s:19:\"sharp-2048x1365.jpg\";s:5:\"width\";i:2048;s:6:\"height\";i:1365;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:17:\"sharp-320x225.jpg\";s:5:\"width\";i:320;s:6:\"height\";i:225;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}s:14:\"original_image\";s:9:\"sharp.jpg\";}'),
(67, 24, '_thumbnail_id', '25'),
(69, 26, 'inline_featured_image', '0'),
(70, 26, '_edit_last', '1'),
(71, 26, '_edit_lock', '1621777286:1'),
(72, 27, '_wp_attached_file', '2021/05/js-scaled.jpg'),
(73, 27, '_wp_attachment_metadata', 'a:6:{s:5:\"width\";i:2560;s:6:\"height\";i:1707;s:4:\"file\";s:21:\"2021/05/js-scaled.jpg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:14:\"js-300x200.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:15:\"js-1024x683.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:683;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:14:\"js-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:14:\"js-768x512.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:512;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"1536x1536\";a:4:{s:4:\"file\";s:16:\"js-1536x1024.jpg\";s:5:\"width\";i:1536;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"2048x2048\";a:4:{s:4:\"file\";s:16:\"js-2048x1365.jpg\";s:5:\"width\";i:2048;s:6:\"height\";i:1365;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:14:\"js-320x225.jpg\";s:5:\"width\";i:320;s:6:\"height\";i:225;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}s:14:\"original_image\";s:6:\"js.jpg\";}'),
(74, 26, '_thumbnail_id', '27'),
(127, 24, '_disciplin_teacher_name', 'Мочалов А.С.'),
(128, 22, '_disciplin_teacher_name', 'Чернышева Л.П.'),
(130, 20, '_disciplin_teacher_name', 'Чернышева Л.П.'),
(154, 11, '_catalog_nav|||0|_empty', ''),
(303, 10, '_catalog_nav|||0|value', 'term:disciplin-categories:4'),
(304, 10, '_catalog_nav|||0|type', 'term'),
(305, 10, '_catalog_nav|||0|subtype', 'disciplin-categories'),
(306, 10, '_catalog_nav|||0|id', '4'),
(307, 10, '_catalog_nav|||1|value', 'term:disciplin-categories:5'),
(308, 10, '_catalog_nav|||1|type', 'term'),
(309, 10, '_catalog_nav|||1|subtype', 'disciplin-categories'),
(310, 10, '_catalog_nav|||1|id', '5'),
(311, 10, '_catalog_nav|||2|value', 'term:disciplin-categories:3'),
(312, 10, '_catalog_nav|||2|type', 'term'),
(313, 10, '_catalog_nav|||2|subtype', 'disciplin-categories'),
(314, 10, '_catalog_nav|||2|id', '3'),
(315, 10, '_catalog_disciplines|||0|value', 'post:disciplin:24'),
(316, 10, '_catalog_disciplines|||0|type', 'post'),
(317, 10, '_catalog_disciplines|||0|subtype', 'disciplin'),
(318, 10, '_catalog_disciplines|||0|id', '24'),
(319, 10, '_catalog_disciplines|||1|value', 'post:disciplin:22'),
(320, 10, '_catalog_disciplines|||1|type', 'post'),
(321, 10, '_catalog_disciplines|||1|subtype', 'disciplin'),
(322, 10, '_catalog_disciplines|||1|id', '22'),
(323, 10, '_catalog_disciplines|||2|value', 'post:disciplin:26'),
(324, 10, '_catalog_disciplines|||2|type', 'post'),
(325, 10, '_catalog_disciplines|||2|subtype', 'disciplin'),
(326, 10, '_catalog_disciplines|||2|id', '26'),
(327, 10, '_catalog_disciplines|||3|value', 'post:disciplin:18'),
(328, 10, '_catalog_disciplines|||3|type', 'post'),
(329, 10, '_catalog_disciplines|||3|subtype', 'disciplin'),
(330, 10, '_catalog_disciplines|||3|id', '18'),
(331, 10, '_catalog_disciplines|||4|value', 'post:disciplin:20'),
(332, 10, '_catalog_disciplines|||4|type', 'post'),
(333, 10, '_catalog_disciplines|||4|subtype', 'disciplin'),
(334, 10, '_catalog_disciplines|||4|id', '20'),
(335, 11, '_catalog_nav|||0|value', 'term:disciplin-categories:4'),
(336, 11, '_catalog_nav|||0|type', 'term'),
(337, 11, '_catalog_nav|||0|subtype', 'disciplin-categories'),
(338, 11, '_catalog_nav|||0|id', '4'),
(339, 11, '_catalog_nav|||1|value', 'term:disciplin-categories:5'),
(340, 11, '_catalog_nav|||1|type', 'term'),
(341, 11, '_catalog_nav|||1|subtype', 'disciplin-categories'),
(342, 11, '_catalog_nav|||1|id', '5'),
(343, 11, '_catalog_nav|||2|value', 'term:disciplin-categories:3'),
(344, 11, '_catalog_nav|||2|type', 'term'),
(345, 11, '_catalog_nav|||2|subtype', 'disciplin-categories'),
(346, 11, '_catalog_nav|||2|id', '3'),
(347, 11, '_catalog_disciplines|||0|value', 'post:disciplin:24'),
(348, 11, '_catalog_disciplines|||0|type', 'post'),
(349, 11, '_catalog_disciplines|||0|subtype', 'disciplin'),
(350, 11, '_catalog_disciplines|||0|id', '24'),
(351, 11, '_catalog_disciplines|||1|value', 'post:disciplin:22'),
(352, 11, '_catalog_disciplines|||1|type', 'post'),
(353, 11, '_catalog_disciplines|||1|subtype', 'disciplin'),
(354, 11, '_catalog_disciplines|||1|id', '22'),
(355, 11, '_catalog_disciplines|||2|value', 'post:disciplin:26'),
(356, 11, '_catalog_disciplines|||2|type', 'post'),
(357, 11, '_catalog_disciplines|||2|subtype', 'disciplin'),
(358, 11, '_catalog_disciplines|||2|id', '26'),
(359, 11, '_catalog_disciplines|||3|value', 'post:disciplin:18'),
(360, 11, '_catalog_disciplines|||3|type', 'post'),
(361, 11, '_catalog_disciplines|||3|subtype', 'disciplin'),
(362, 11, '_catalog_disciplines|||3|id', '18'),
(363, 11, '_catalog_disciplines|||4|value', 'post:disciplin:20'),
(364, 11, '_catalog_disciplines|||4|type', 'post'),
(365, 11, '_catalog_disciplines|||4|subtype', 'disciplin'),
(366, 11, '_catalog_disciplines|||4|id', '20'),
(370, 26, '_disciplin_teacher_name', 'Мочалов А.С.'),
(384, 38, '_wp_attached_file', '2021/05/mpi-1-scaled.jpg'),
(385, 38, '_wp_attachment_metadata', 'a:6:{s:5:\"width\";i:2560;s:6:\"height\";i:1707;s:4:\"file\";s:24:\"2021/05/mpi-1-scaled.jpg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"mpi-1-300x200.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:18:\"mpi-1-1024x683.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:683;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"mpi-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:17:\"mpi-1-768x512.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:512;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"1536x1536\";a:4:{s:4:\"file\";s:19:\"mpi-1-1536x1024.jpg\";s:5:\"width\";i:1536;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"2048x2048\";a:4:{s:4:\"file\";s:19:\"mpi-1-2048x1365.jpg\";s:5:\"width\";i:2048;s:6:\"height\";i:1365;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:17:\"mpi-1-320x225.jpg\";s:5:\"width\";i:320;s:6:\"height\";i:225;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}s:14:\"original_image\";s:9:\"mpi-1.jpg\";}'),
(398, 18, '_disciplin_teacher_name', 'Чернышева Л.П.'),
(403, 52, '_wp_attached_file', '2021/05/cuda-1.jpg'),
(404, 52, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1083;s:6:\"height\";i:722;s:4:\"file\";s:18:\"2021/05/cuda-1.jpg\";s:5:\"sizes\";a:5:{s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"cuda-1-300x200.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:19:\"cuda-1-1024x683.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:683;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:18:\"cuda-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:18:\"cuda-1-768x512.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:512;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:18:\"cuda-1-320x225.jpg\";s:5:\"width\";i:320;s:6:\"height\";i:225;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(551, 91, 'inline_featured_image', '0'),
(552, 91, 'quiz_id', '1'),
(553, 92, '_menu_item_type', 'post_type'),
(554, 92, '_menu_item_menu_item_parent', '0'),
(555, 92, '_menu_item_object_id', '91'),
(556, 92, '_menu_item_object', 'qsm_quiz'),
(557, 92, '_menu_item_target', ''),
(558, 92, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(559, 92, '_menu_item_xfn', ''),
(560, 92, '_menu_item_url', ''),
(564, 95, 'inline_featured_image', '0'),
(565, 96, 'inline_featured_image', '0'),
(566, 97, 'user_registration_form_setting_login_options', 'auto_login'),
(567, 97, 'user_registration_form_setting_default_user_role', 'subscriber'),
(568, 97, 'user_registration_form_setting_enable_strong_password', ''),
(569, 97, 'user_registration_form_setting_minimum_password_strength', '3'),
(570, 97, 'user_registration_form_setting_redirect_options', 'http://brainfood-project'),
(571, 97, 'user_registration_form_setting_form_submit_class', ''),
(572, 97, 'user_registration_form_setting_form_submit_label', 'Зарегистрироваться'),
(573, 97, 'user_registration_form_setting_success_message_position', '1'),
(574, 97, 'user_registration_form_setting_enable_recaptcha_support', ''),
(575, 97, 'user_registration_form_template', 'Rounded'),
(576, 97, 'user_registration_form_custom_class', ''),
(577, 97, 'user_registration_form_row_ids', '[\"0\"]'),
(582, 92, '_wp_old_date', '2021-05-26'),
(585, 98, 'inline_featured_image', '0'),
(586, 98, 'quiz_id', '2'),
(587, 99, '_menu_item_type', 'post_type'),
(588, 99, '_menu_item_menu_item_parent', '0'),
(589, 99, '_menu_item_object_id', '98'),
(590, 99, '_menu_item_object', 'qsm_quiz'),
(591, 99, '_menu_item_target', ''),
(592, 99, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(593, 99, '_menu_item_xfn', ''),
(594, 99, '_menu_item_url', ''),
(599, 95, '_edit_lock', '1623259802:1'),
(600, 96, '_edit_lock', '1623259821:1'),
(604, 96, '_edit_last', '1'),
(605, 96, '_pgm_post_meta', 'a:2:{s:12:\"pgm_location\";s:0:\"\";s:8:\"pgm_menu\";s:0:\"\";}'),
(642, 95, '_edit_last', '1'),
(643, 95, '_pgm_post_meta', 'a:2:{s:12:\"pgm_location\";s:0:\"\";s:8:\"pgm_menu\";s:0:\"\";}'),
(644, 96, '_wp_page_template', 'page-registration.php'),
(645, 95, '_wp_page_template', 'page-my-account.php'),
(646, 97, '_wp_old_date', '2021-05-27'),
(650, 99, '_wp_old_date', '2021-05-27'),
(651, 107, '_menu_item_type', 'custom'),
(652, 107, '_menu_item_menu_item_parent', '0'),
(653, 107, '_menu_item_object_id', '107'),
(654, 107, '_menu_item_object', 'custom'),
(655, 107, '_menu_item_target', ''),
(656, 107, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(657, 107, '_menu_item_xfn', ''),
(658, 107, '_menu_item_url', 'http://brainfood-project/lost-password/'),
(659, 107, '_menu_item_orphaned', '1622373610'),
(678, 110, '_menu_item_type', 'post_type'),
(679, 110, '_menu_item_menu_item_parent', '0'),
(680, 110, '_menu_item_object_id', '95'),
(681, 110, '_menu_item_object', 'page'),
(682, 110, '_menu_item_target', ''),
(683, 110, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(684, 110, '_menu_item_xfn', ''),
(685, 110, '_menu_item_url', ''),
(687, 111, '_menu_item_type', 'post_type'),
(688, 111, '_menu_item_menu_item_parent', '0'),
(689, 111, '_menu_item_object_id', '96'),
(690, 111, '_menu_item_object', 'page'),
(691, 111, '_menu_item_target', ''),
(692, 111, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(693, 111, '_menu_item_xfn', ''),
(694, 111, '_menu_item_url', ''),
(712, 99, '_wp_old_date', '2021-05-30'),
(716, 119, 'inline_featured_image', '0'),
(717, 119, 'quiz_id', '3'),
(749, 121, 'inline_featured_image', '0'),
(750, 121, '_edit_lock', '1623249966:1'),
(751, 121, '_edit_last', '1'),
(752, 121, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:1:\"2\";s:12:\"pgm_menulist\";a:16:{i:0;s:3:\"134\";i:1;s:3:\"136\";i:2;s:3:\"141\";i:3;s:3:\"182\";i:4;s:3:\"181\";i:5;s:3:\"180\";i:6;s:3:\"179\";i:7;s:3:\"247\";i:8;s:3:\"293\";i:9;s:3:\"292\";i:10;s:3:\"291\";i:11;s:3:\"290\";i:12;s:3:\"289\";i:13;s:3:\"288\";i:14;s:3:\"287\";i:15;s:2:\"92\";}}'),
(753, 99, '_wp_old_date', '2021-05-31'),
(754, 92, '_wp_old_date', '2021-05-27'),
(764, 125, 'inline_featured_image', '0'),
(765, 125, '_edit_lock', '1623249975:1'),
(766, 125, '_edit_last', '1'),
(767, 125, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:1:\"2\";s:12:\"pgm_menulist\";a:16:{i:0;s:3:\"134\";i:1;s:3:\"136\";i:2;s:3:\"141\";i:3;s:3:\"182\";i:4;s:3:\"181\";i:5;s:3:\"180\";i:6;s:3:\"179\";i:7;s:3:\"247\";i:8;s:3:\"293\";i:9;s:3:\"292\";i:10;s:3:\"291\";i:11;s:3:\"290\";i:12;s:3:\"289\";i:13;s:3:\"288\";i:14;s:3:\"287\";i:15;s:2:\"92\";}}'),
(768, 127, 'inline_featured_image', '0'),
(769, 127, '_edit_lock', '1623249985:1'),
(770, 128, '_wp_attached_file', '2021/06/image.png'),
(771, 128, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:633;s:6:\"height\";i:549;s:4:\"file\";s:17:\"2021/06/image.png\";s:5:\"sizes\";a:3:{s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"image-300x260.png\";s:5:\"width\";i:300;s:6:\"height\";i:260;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"image-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:17:\"image-320x225.png\";s:5:\"width\";i:320;s:6:\"height\";i:225;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(772, 129, '_wp_attached_file', '2021/06/image-1.png'),
(773, 129, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:430;s:6:\"height\";i:318;s:4:\"file\";s:19:\"2021/06/image-1.png\";s:5:\"sizes\";a:3:{s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"image-1-300x222.png\";s:5:\"width\";i:300;s:6:\"height\";i:222;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"image-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:19:\"image-1-320x225.png\";s:5:\"width\";i:320;s:6:\"height\";i:225;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(774, 130, '_wp_attached_file', '2021/06/image-2.png'),
(775, 130, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:384;s:6:\"height\";i:312;s:4:\"file\";s:19:\"2021/06/image-2.png\";s:5:\"sizes\";a:3:{s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"image-2-300x244.png\";s:5:\"width\";i:300;s:6:\"height\";i:244;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"image-2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:19:\"image-2-320x225.png\";s:5:\"width\";i:320;s:6:\"height\";i:225;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(776, 131, '_wp_attached_file', '2021/06/image-3.png'),
(777, 131, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:377;s:6:\"height\";i:319;s:4:\"file\";s:19:\"2021/06/image-3.png\";s:5:\"sizes\";a:3:{s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"image-3-300x254.png\";s:5:\"width\";i:300;s:6:\"height\";i:254;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"image-3-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:19:\"image-3-320x225.png\";s:5:\"width\";i:320;s:6:\"height\";i:225;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(778, 132, '_wp_attached_file', '2021/06/image-4.png'),
(779, 132, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:390;s:6:\"height\";i:316;s:4:\"file\";s:19:\"2021/06/image-4.png\";s:5:\"sizes\";a:3:{s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"image-4-300x243.png\";s:5:\"width\";i:300;s:6:\"height\";i:243;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"image-4-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:19:\"image-4-320x225.png\";s:5:\"width\";i:320;s:6:\"height\";i:225;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(780, 127, '_edit_last', '1'),
(781, 127, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:1:\"2\";s:12:\"pgm_menulist\";a:16:{i:0;s:3:\"134\";i:1;s:3:\"136\";i:2;s:3:\"141\";i:3;s:3:\"182\";i:4;s:3:\"181\";i:5;s:3:\"180\";i:6;s:3:\"179\";i:7;s:3:\"247\";i:8;s:3:\"293\";i:9;s:3:\"292\";i:10;s:3:\"291\";i:11;s:3:\"290\";i:12;s:3:\"289\";i:13;s:3:\"288\";i:14;s:3:\"287\";i:15;s:2:\"92\";}}'),
(782, 134, '_menu_item_type', 'post_type'),
(783, 134, '_menu_item_menu_item_parent', '0'),
(784, 134, '_menu_item_object_id', '121'),
(785, 134, '_menu_item_object', 'page'),
(786, 134, '_menu_item_target', ''),
(787, 134, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(788, 134, '_menu_item_xfn', ''),
(789, 134, '_menu_item_url', ''),
(800, 136, '_menu_item_type', 'post_type'),
(801, 136, '_menu_item_menu_item_parent', '134'),
(802, 136, '_menu_item_object_id', '125'),
(803, 136, '_menu_item_object', 'page'),
(804, 136, '_menu_item_target', ''),
(805, 136, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(806, 136, '_menu_item_xfn', ''),
(807, 136, '_menu_item_url', ''),
(809, 141, '_menu_item_type', 'post_type'),
(810, 141, '_menu_item_menu_item_parent', '134'),
(811, 141, '_menu_item_object_id', '127'),
(812, 141, '_menu_item_object', 'page'),
(813, 141, '_menu_item_target', ''),
(814, 141, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(815, 141, '_menu_item_xfn', ''),
(816, 141, '_menu_item_url', ''),
(818, 149, 'inline_featured_image', '0'),
(819, 149, '_edit_lock', '1623249994:1'),
(820, 149, '_edit_last', '1'),
(821, 149, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:1:\"2\";s:12:\"pgm_menulist\";a:16:{i:0;s:3:\"134\";i:1;s:3:\"136\";i:2;s:3:\"141\";i:3;s:3:\"182\";i:4;s:3:\"181\";i:5;s:3:\"180\";i:6;s:3:\"179\";i:7;s:3:\"247\";i:8;s:3:\"293\";i:9;s:3:\"292\";i:10;s:3:\"291\";i:11;s:3:\"290\";i:12;s:3:\"289\";i:13;s:3:\"288\";i:14;s:3:\"287\";i:15;s:2:\"92\";}}'),
(824, 153, 'inline_featured_image', '0'),
(825, 153, '_edit_lock', '1623250004:1'),
(826, 153, '_edit_last', '1'),
(827, 153, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:1:\"2\";s:12:\"pgm_menulist\";a:16:{i:0;s:3:\"134\";i:1;s:3:\"136\";i:2;s:3:\"141\";i:3;s:3:\"182\";i:4;s:3:\"181\";i:5;s:3:\"180\";i:6;s:3:\"179\";i:7;s:3:\"247\";i:8;s:3:\"293\";i:9;s:3:\"292\";i:10;s:3:\"291\";i:11;s:3:\"290\";i:12;s:3:\"289\";i:13;s:3:\"288\";i:14;s:3:\"287\";i:15;s:2:\"92\";}}'),
(828, 158, '_wp_attached_file', '2021/06/image-5.png'),
(829, 158, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:80;s:6:\"height\";i:57;s:4:\"file\";s:19:\"2021/06/image-5.png\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(830, 159, '_wp_attached_file', '2021/06/image-6.png'),
(831, 159, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:80;s:6:\"height\";i:57;s:4:\"file\";s:19:\"2021/06/image-6.png\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(832, 168, '_wp_attached_file', '2021/06/image-7.png'),
(833, 168, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:364;s:6:\"height\";i:124;s:4:\"file\";s:19:\"2021/06/image-7.png\";s:5:\"sizes\";a:3:{s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"image-7-300x102.png\";s:5:\"width\";i:300;s:6:\"height\";i:102;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"image-7-150x124.png\";s:5:\"width\";i:150;s:6:\"height\";i:124;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:19:\"image-7-320x124.png\";s:5:\"width\";i:320;s:6:\"height\";i:124;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(834, 171, 'inline_featured_image', '0'),
(835, 171, '_edit_lock', '1623250014:1'),
(836, 172, '_wp_attached_file', '2021/06/image-8.png'),
(837, 172, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:559;s:6:\"height\";i:191;s:4:\"file\";s:19:\"2021/06/image-8.png\";s:5:\"sizes\";a:3:{s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"image-8-300x103.png\";s:5:\"width\";i:300;s:6:\"height\";i:103;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"image-8-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:19:\"image-8-320x191.png\";s:5:\"width\";i:320;s:6:\"height\";i:191;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(838, 173, '_wp_attached_file', '2021/06/image-9.png'),
(839, 173, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:590;s:6:\"height\";i:102;s:4:\"file\";s:19:\"2021/06/image-9.png\";s:5:\"sizes\";a:3:{s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"image-9-300x52.png\";s:5:\"width\";i:300;s:6:\"height\";i:52;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"image-9-150x102.png\";s:5:\"width\";i:150;s:6:\"height\";i:102;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:19:\"image-9-320x102.png\";s:5:\"width\";i:320;s:6:\"height\";i:102;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(840, 171, '_edit_last', '1'),
(841, 171, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:1:\"2\";s:12:\"pgm_menulist\";a:16:{i:0;s:3:\"134\";i:1;s:3:\"136\";i:2;s:3:\"141\";i:3;s:3:\"182\";i:4;s:3:\"181\";i:5;s:3:\"180\";i:6;s:3:\"179\";i:7;s:3:\"247\";i:8;s:3:\"293\";i:9;s:3:\"292\";i:10;s:3:\"291\";i:11;s:3:\"290\";i:12;s:3:\"289\";i:13;s:3:\"288\";i:14;s:3:\"287\";i:15;s:2:\"92\";}}'),
(842, 176, 'inline_featured_image', '0'),
(843, 176, '_edit_lock', '1623250024:1'),
(844, 177, '_wp_attached_file', '2021/06/image-10.png'),
(845, 177, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:676;s:6:\"height\";i:247;s:4:\"file\";s:20:\"2021/06/image-10.png\";s:5:\"sizes\";a:3:{s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"image-10-300x110.png\";s:5:\"width\";i:300;s:6:\"height\";i:110;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"image-10-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:20:\"image-10-320x225.png\";s:5:\"width\";i:320;s:6:\"height\";i:225;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(846, 176, '_edit_last', '1'),
(847, 176, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:1:\"2\";s:12:\"pgm_menulist\";a:16:{i:0;s:3:\"134\";i:1;s:3:\"136\";i:2;s:3:\"141\";i:3;s:3:\"182\";i:4;s:3:\"181\";i:5;s:3:\"180\";i:6;s:3:\"179\";i:7;s:3:\"247\";i:8;s:3:\"293\";i:9;s:3:\"292\";i:10;s:3:\"291\";i:11;s:3:\"290\";i:12;s:3:\"289\";i:13;s:3:\"288\";i:14;s:3:\"287\";i:15;s:2:\"92\";}}'),
(848, 179, '_menu_item_type', 'post_type'),
(849, 179, '_menu_item_menu_item_parent', '134'),
(850, 179, '_menu_item_object_id', '176'),
(851, 179, '_menu_item_object', 'page'),
(852, 179, '_menu_item_target', ''),
(853, 179, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(854, 179, '_menu_item_xfn', ''),
(855, 179, '_menu_item_url', ''),
(857, 180, '_menu_item_type', 'post_type'),
(858, 180, '_menu_item_menu_item_parent', '134'),
(859, 180, '_menu_item_object_id', '171'),
(860, 180, '_menu_item_object', 'page'),
(861, 180, '_menu_item_target', ''),
(862, 180, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(863, 180, '_menu_item_xfn', ''),
(864, 180, '_menu_item_url', ''),
(866, 181, '_menu_item_type', 'post_type'),
(867, 181, '_menu_item_menu_item_parent', '134'),
(868, 181, '_menu_item_object_id', '153'),
(869, 181, '_menu_item_object', 'page'),
(870, 181, '_menu_item_target', ''),
(871, 181, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(872, 181, '_menu_item_xfn', ''),
(873, 181, '_menu_item_url', ''),
(875, 182, '_menu_item_type', 'post_type'),
(876, 182, '_menu_item_menu_item_parent', '134'),
(877, 182, '_menu_item_object_id', '149'),
(878, 182, '_menu_item_object', 'page'),
(879, 182, '_menu_item_target', ''),
(880, 182, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(881, 182, '_menu_item_xfn', ''),
(882, 182, '_menu_item_url', ''),
(884, 184, 'inline_featured_image', '0'),
(885, 184, '_edit_lock', '1623243766:1'),
(886, 184, '_edit_last', '1'),
(887, 184, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:2:\"16\";s:12:\"pgm_menulist\";a:8:{i:0;s:3:\"186\";i:1;s:3:\"240\";i:2;s:3:\"239\";i:3;s:3:\"238\";i:4;s:3:\"237\";i:5;s:3:\"236\";i:6;s:3:\"235\";i:7;s:3:\"234\";}}'),
(888, 186, '_menu_item_type', 'post_type'),
(889, 186, '_menu_item_menu_item_parent', '0'),
(890, 186, '_menu_item_object_id', '184'),
(891, 186, '_menu_item_object', 'page'),
(892, 186, '_menu_item_target', ''),
(893, 186, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(894, 186, '_menu_item_xfn', ''),
(895, 186, '_menu_item_url', ''),
(897, 187, 'inline_featured_image', '0'),
(898, 187, '_edit_lock', '1623243773:1'),
(899, 188, '_wp_attached_file', '2021/06/image-11.png'),
(900, 188, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:552;s:6:\"height\";i:218;s:4:\"file\";s:20:\"2021/06/image-11.png\";s:5:\"sizes\";a:3:{s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"image-11-300x118.png\";s:5:\"width\";i:300;s:6:\"height\";i:118;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"image-11-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:20:\"image-11-320x218.png\";s:5:\"width\";i:320;s:6:\"height\";i:218;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(901, 187, '_edit_last', '1'),
(902, 187, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:2:\"16\";s:12:\"pgm_menulist\";a:8:{i:0;s:3:\"186\";i:1;s:3:\"240\";i:2;s:3:\"239\";i:3;s:3:\"238\";i:4;s:3:\"237\";i:5;s:3:\"236\";i:6;s:3:\"235\";i:7;s:3:\"234\";}}'),
(903, 190, 'inline_featured_image', '0'),
(904, 190, '_edit_lock', '1623243782:1'),
(905, 191, '_wp_attached_file', '2021/06/image-12.png'),
(906, 191, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:745;s:6:\"height\";i:263;s:4:\"file\";s:20:\"2021/06/image-12.png\";s:5:\"sizes\";a:3:{s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"image-12-300x106.png\";s:5:\"width\";i:300;s:6:\"height\";i:106;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"image-12-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:20:\"image-12-320x225.png\";s:5:\"width\";i:320;s:6:\"height\";i:225;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(907, 190, '_edit_last', '1'),
(908, 190, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:2:\"16\";s:12:\"pgm_menulist\";a:8:{i:0;s:3:\"186\";i:1;s:3:\"240\";i:2;s:3:\"239\";i:3;s:3:\"238\";i:4;s:3:\"237\";i:5;s:3:\"236\";i:6;s:3:\"235\";i:7;s:3:\"234\";}}'),
(909, 193, 'inline_featured_image', '0'),
(910, 193, '_edit_lock', '1623243788:1'),
(911, 193, '_edit_last', '1'),
(912, 193, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:2:\"16\";s:12:\"pgm_menulist\";a:8:{i:0;s:3:\"186\";i:1;s:3:\"240\";i:2;s:3:\"239\";i:3;s:3:\"238\";i:4;s:3:\"237\";i:5;s:3:\"236\";i:6;s:3:\"235\";i:7;s:3:\"234\";}}'),
(913, 195, 'inline_featured_image', '0'),
(914, 195, '_edit_lock', '1623243795:1'),
(915, 196, '_wp_attached_file', '2021/06/image-13.png'),
(916, 196, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:280;s:6:\"height\";i:69;s:4:\"file\";s:20:\"2021/06/image-13.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"image-13-150x69.png\";s:5:\"width\";i:150;s:6:\"height\";i:69;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(917, 195, '_edit_last', '1'),
(918, 195, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:2:\"16\";s:12:\"pgm_menulist\";a:8:{i:0;s:3:\"186\";i:1;s:3:\"240\";i:2;s:3:\"239\";i:3;s:3:\"238\";i:4;s:3:\"237\";i:5;s:3:\"236\";i:6;s:3:\"235\";i:7;s:3:\"234\";}}'),
(919, 216, 'inline_featured_image', '0'),
(920, 216, '_edit_lock', '1623243801:1'),
(921, 216, '_edit_last', '1'),
(922, 216, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:2:\"16\";s:12:\"pgm_menulist\";a:8:{i:0;s:3:\"186\";i:1;s:3:\"240\";i:2;s:3:\"239\";i:3;s:3:\"238\";i:4;s:3:\"237\";i:5;s:3:\"236\";i:6;s:3:\"235\";i:7;s:3:\"234\";}}'),
(923, 221, 'inline_featured_image', '0'),
(924, 221, '_edit_lock', '1623243807:1'),
(925, 221, '_edit_last', '1'),
(926, 221, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:2:\"16\";s:12:\"pgm_menulist\";a:8:{i:0;s:3:\"186\";i:1;s:3:\"240\";i:2;s:3:\"239\";i:3;s:3:\"238\";i:4;s:3:\"237\";i:5;s:3:\"236\";i:6;s:3:\"235\";i:7;s:3:\"234\";}}'),
(927, 231, 'inline_featured_image', '0'),
(928, 231, '_edit_lock', '1623243813:1'),
(929, 231, '_edit_last', '1'),
(930, 231, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:2:\"16\";s:12:\"pgm_menulist\";a:8:{i:0;s:3:\"186\";i:1;s:3:\"240\";i:2;s:3:\"239\";i:3;s:3:\"238\";i:4;s:3:\"237\";i:5;s:3:\"236\";i:6;s:3:\"235\";i:7;s:3:\"234\";}}'),
(931, 234, '_menu_item_type', 'post_type'),
(932, 234, '_menu_item_menu_item_parent', '186'),
(933, 234, '_menu_item_object_id', '231'),
(934, 234, '_menu_item_object', 'page'),
(935, 234, '_menu_item_target', ''),
(936, 234, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(937, 234, '_menu_item_xfn', ''),
(938, 234, '_menu_item_url', ''),
(940, 235, '_menu_item_type', 'post_type'),
(941, 235, '_menu_item_menu_item_parent', '186'),
(942, 235, '_menu_item_object_id', '221'),
(943, 235, '_menu_item_object', 'page'),
(944, 235, '_menu_item_target', ''),
(945, 235, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(946, 235, '_menu_item_xfn', ''),
(947, 235, '_menu_item_url', ''),
(949, 236, '_menu_item_type', 'post_type'),
(950, 236, '_menu_item_menu_item_parent', '186'),
(951, 236, '_menu_item_object_id', '216'),
(952, 236, '_menu_item_object', 'page'),
(953, 236, '_menu_item_target', ''),
(954, 236, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(955, 236, '_menu_item_xfn', ''),
(956, 236, '_menu_item_url', ''),
(958, 237, '_menu_item_type', 'post_type'),
(959, 237, '_menu_item_menu_item_parent', '186'),
(960, 237, '_menu_item_object_id', '195'),
(961, 237, '_menu_item_object', 'page'),
(962, 237, '_menu_item_target', ''),
(963, 237, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(964, 237, '_menu_item_xfn', ''),
(965, 237, '_menu_item_url', ''),
(967, 238, '_menu_item_type', 'post_type'),
(968, 238, '_menu_item_menu_item_parent', '186'),
(969, 238, '_menu_item_object_id', '193'),
(970, 238, '_menu_item_object', 'page'),
(971, 238, '_menu_item_target', ''),
(972, 238, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(973, 238, '_menu_item_xfn', ''),
(974, 238, '_menu_item_url', ''),
(976, 239, '_menu_item_type', 'post_type'),
(977, 239, '_menu_item_menu_item_parent', '186'),
(978, 239, '_menu_item_object_id', '190'),
(979, 239, '_menu_item_object', 'page'),
(980, 239, '_menu_item_target', ''),
(981, 239, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(982, 239, '_menu_item_xfn', ''),
(983, 239, '_menu_item_url', ''),
(985, 240, '_menu_item_type', 'post_type'),
(986, 240, '_menu_item_menu_item_parent', '186'),
(987, 240, '_menu_item_object_id', '187'),
(988, 240, '_menu_item_object', 'page'),
(989, 240, '_menu_item_target', ''),
(990, 240, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(991, 240, '_menu_item_xfn', ''),
(992, 240, '_menu_item_url', ''),
(994, 244, 'inline_featured_image', '0'),
(995, 244, '_edit_lock', '1623250085:1'),
(996, 244, '_edit_last', '1'),
(997, 244, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:1:\"2\";s:12:\"pgm_menulist\";a:16:{i:0;s:3:\"134\";i:1;s:3:\"136\";i:2;s:3:\"141\";i:3;s:3:\"182\";i:4;s:3:\"181\";i:5;s:3:\"180\";i:6;s:3:\"179\";i:7;s:3:\"247\";i:8;s:3:\"293\";i:9;s:3:\"292\";i:10;s:3:\"291\";i:11;s:3:\"290\";i:12;s:3:\"289\";i:13;s:3:\"288\";i:14;s:3:\"287\";i:15;s:2:\"92\";}}'),
(1007, 247, '_menu_item_type', 'post_type'),
(1008, 247, '_menu_item_menu_item_parent', '0'),
(1009, 247, '_menu_item_object_id', '244'),
(1010, 247, '_menu_item_object', 'page'),
(1011, 247, '_menu_item_target', ''),
(1012, 247, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1013, 247, '_menu_item_xfn', ''),
(1014, 247, '_menu_item_url', ''),
(1016, 248, 'inline_featured_image', '0'),
(1017, 248, '_edit_lock', '1623250075:1'),
(1018, 248, '_edit_last', '1'),
(1019, 248, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:1:\"2\";s:12:\"pgm_menulist\";a:16:{i:0;s:3:\"134\";i:1;s:3:\"136\";i:2;s:3:\"141\";i:3;s:3:\"182\";i:4;s:3:\"181\";i:5;s:3:\"180\";i:6;s:3:\"179\";i:7;s:3:\"247\";i:8;s:3:\"293\";i:9;s:3:\"292\";i:10;s:3:\"291\";i:11;s:3:\"290\";i:12;s:3:\"289\";i:13;s:3:\"288\";i:14;s:3:\"287\";i:15;s:2:\"92\";}}'),
(1020, 250, 'inline_featured_image', '0'),
(1021, 250, '_edit_lock', '1623250091:1'),
(1022, 250, '_edit_last', '1'),
(1023, 250, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:1:\"2\";s:12:\"pgm_menulist\";a:16:{i:0;s:3:\"134\";i:1;s:3:\"136\";i:2;s:3:\"141\";i:3;s:3:\"182\";i:4;s:3:\"181\";i:5;s:3:\"180\";i:6;s:3:\"179\";i:7;s:3:\"247\";i:8;s:3:\"293\";i:9;s:3:\"292\";i:10;s:3:\"291\";i:11;s:3:\"290\";i:12;s:3:\"289\";i:13;s:3:\"288\";i:14;s:3:\"287\";i:15;s:2:\"92\";}}'),
(1024, 255, 'inline_featured_image', '0'),
(1025, 255, '_edit_lock', '1623250098:1'),
(1026, 255, '_edit_last', '1'),
(1027, 255, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:1:\"2\";s:12:\"pgm_menulist\";a:16:{i:0;s:3:\"134\";i:1;s:3:\"136\";i:2;s:3:\"141\";i:3;s:3:\"182\";i:4;s:3:\"181\";i:5;s:3:\"180\";i:6;s:3:\"179\";i:7;s:3:\"247\";i:8;s:3:\"293\";i:9;s:3:\"292\";i:10;s:3:\"291\";i:11;s:3:\"290\";i:12;s:3:\"289\";i:13;s:3:\"288\";i:14;s:3:\"287\";i:15;s:2:\"92\";}}'),
(1028, 261, 'inline_featured_image', '0'),
(1029, 261, '_edit_lock', '1623250106:1'),
(1030, 261, '_edit_last', '1'),
(1031, 261, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:1:\"2\";s:12:\"pgm_menulist\";a:16:{i:0;s:3:\"134\";i:1;s:3:\"136\";i:2;s:3:\"141\";i:3;s:3:\"182\";i:4;s:3:\"181\";i:5;s:3:\"180\";i:6;s:3:\"179\";i:7;s:3:\"247\";i:8;s:3:\"293\";i:9;s:3:\"292\";i:10;s:3:\"291\";i:11;s:3:\"290\";i:12;s:3:\"289\";i:13;s:3:\"288\";i:14;s:3:\"287\";i:15;s:2:\"92\";}}'),
(1034, 268, '_wp_attached_file', '2021/06/image-14.png'),
(1035, 268, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:681;s:6:\"height\";i:202;s:4:\"file\";s:20:\"2021/06/image-14.png\";s:5:\"sizes\";a:3:{s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"image-14-300x89.png\";s:5:\"width\";i:300;s:6:\"height\";i:89;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"image-14-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:20:\"image-14-320x202.png\";s:5:\"width\";i:320;s:6:\"height\";i:202;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1036, 270, 'inline_featured_image', '0'),
(1037, 270, '_edit_lock', '1623250113:1'),
(1038, 270, '_edit_last', '1'),
(1039, 270, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:1:\"2\";s:12:\"pgm_menulist\";a:16:{i:0;s:3:\"134\";i:1;s:3:\"136\";i:2;s:3:\"141\";i:3;s:3:\"182\";i:4;s:3:\"181\";i:5;s:3:\"180\";i:6;s:3:\"179\";i:7;s:3:\"247\";i:8;s:3:\"293\";i:9;s:3:\"292\";i:10;s:3:\"291\";i:11;s:3:\"290\";i:12;s:3:\"289\";i:13;s:3:\"288\";i:14;s:3:\"287\";i:15;s:2:\"92\";}}'),
(1040, 277, 'inline_featured_image', '0'),
(1041, 277, '_edit_lock', '1623250119:1'),
(1042, 277, '_edit_last', '1'),
(1043, 277, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:1:\"2\";s:12:\"pgm_menulist\";a:16:{i:0;s:3:\"134\";i:1;s:3:\"136\";i:2;s:3:\"141\";i:3;s:3:\"182\";i:4;s:3:\"181\";i:5;s:3:\"180\";i:6;s:3:\"179\";i:7;s:3:\"247\";i:8;s:3:\"293\";i:9;s:3:\"292\";i:10;s:3:\"291\";i:11;s:3:\"290\";i:12;s:3:\"289\";i:13;s:3:\"288\";i:14;s:3:\"287\";i:15;s:2:\"92\";}}');
INSERT INTO `wp_postmeta` (`meta_id`, `post_id`, `meta_key`, `meta_value`) VALUES
(1044, 281, 'inline_featured_image', '0'),
(1045, 281, '_edit_lock', '1623250760:1'),
(1046, 281, '_edit_last', '1'),
(1047, 281, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:1:\"2\";s:12:\"pgm_menulist\";a:16:{i:0;s:3:\"134\";i:1;s:3:\"136\";i:2;s:3:\"141\";i:3;s:3:\"182\";i:4;s:3:\"181\";i:5;s:3:\"180\";i:6;s:3:\"179\";i:7;s:3:\"247\";i:8;s:3:\"293\";i:9;s:3:\"292\";i:10;s:3:\"291\";i:11;s:3:\"290\";i:12;s:3:\"289\";i:13;s:3:\"288\";i:14;s:3:\"287\";i:15;s:2:\"92\";}}'),
(1048, 287, '_menu_item_type', 'post_type'),
(1049, 287, '_menu_item_menu_item_parent', '247'),
(1050, 287, '_menu_item_object_id', '281'),
(1051, 287, '_menu_item_object', 'page'),
(1052, 287, '_menu_item_target', ''),
(1053, 287, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1054, 287, '_menu_item_xfn', ''),
(1055, 287, '_menu_item_url', ''),
(1057, 288, '_menu_item_type', 'post_type'),
(1058, 288, '_menu_item_menu_item_parent', '247'),
(1059, 288, '_menu_item_object_id', '277'),
(1060, 288, '_menu_item_object', 'page'),
(1061, 288, '_menu_item_target', ''),
(1062, 288, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1063, 288, '_menu_item_xfn', ''),
(1064, 288, '_menu_item_url', ''),
(1066, 289, '_menu_item_type', 'post_type'),
(1067, 289, '_menu_item_menu_item_parent', '247'),
(1068, 289, '_menu_item_object_id', '270'),
(1069, 289, '_menu_item_object', 'page'),
(1070, 289, '_menu_item_target', ''),
(1071, 289, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1072, 289, '_menu_item_xfn', ''),
(1073, 289, '_menu_item_url', ''),
(1075, 290, '_menu_item_type', 'post_type'),
(1076, 290, '_menu_item_menu_item_parent', '247'),
(1077, 290, '_menu_item_object_id', '261'),
(1078, 290, '_menu_item_object', 'page'),
(1079, 290, '_menu_item_target', ''),
(1080, 290, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1081, 290, '_menu_item_xfn', ''),
(1082, 290, '_menu_item_url', ''),
(1084, 291, '_menu_item_type', 'post_type'),
(1085, 291, '_menu_item_menu_item_parent', '247'),
(1086, 291, '_menu_item_object_id', '255'),
(1087, 291, '_menu_item_object', 'page'),
(1088, 291, '_menu_item_target', ''),
(1089, 291, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1090, 291, '_menu_item_xfn', ''),
(1091, 291, '_menu_item_url', ''),
(1093, 292, '_menu_item_type', 'post_type'),
(1094, 292, '_menu_item_menu_item_parent', '247'),
(1095, 292, '_menu_item_object_id', '250'),
(1096, 292, '_menu_item_object', 'page'),
(1097, 292, '_menu_item_target', ''),
(1098, 292, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1099, 292, '_menu_item_xfn', ''),
(1100, 292, '_menu_item_url', ''),
(1102, 293, '_menu_item_type', 'post_type'),
(1103, 293, '_menu_item_menu_item_parent', '247'),
(1104, 293, '_menu_item_object_id', '248'),
(1105, 293, '_menu_item_object', 'page'),
(1106, 293, '_menu_item_target', ''),
(1107, 293, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1108, 293, '_menu_item_xfn', ''),
(1109, 293, '_menu_item_url', ''),
(1111, 296, 'inline_featured_image', '0'),
(1112, 296, '_edit_lock', '1623251630:1'),
(1113, 296, '_edit_last', '1'),
(1114, 296, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:2:\"17\";s:12:\"pgm_menulist\";a:6:{i:0;s:3:\"311\";i:1;s:3:\"316\";i:2;s:3:\"315\";i:3;s:3:\"314\";i:4;s:3:\"313\";i:5;s:3:\"312\";}}'),
(1115, 298, 'inline_featured_image', '0'),
(1116, 298, '_edit_lock', '1623251642:1'),
(1117, 299, '_wp_attached_file', '2021/06/image-15.png'),
(1118, 299, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:474;s:6:\"height\";i:519;s:4:\"file\";s:20:\"2021/06/image-15.png\";s:5:\"sizes\";a:3:{s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"image-15-274x300.png\";s:5:\"width\";i:274;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"image-15-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:20:\"image-15-320x225.png\";s:5:\"width\";i:320;s:6:\"height\";i:225;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1119, 300, '_wp_attached_file', '2021/06/image-16.png'),
(1120, 300, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:650;s:6:\"height\";i:514;s:4:\"file\";s:20:\"2021/06/image-16.png\";s:5:\"sizes\";a:3:{s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"image-16-300x237.png\";s:5:\"width\";i:300;s:6:\"height\";i:237;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"image-16-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:20:\"image-16-320x225.png\";s:5:\"width\";i:320;s:6:\"height\";i:225;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1121, 301, '_wp_attached_file', '2021/06/image-17.png'),
(1122, 301, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:537;s:6:\"height\";i:511;s:4:\"file\";s:20:\"2021/06/image-17.png\";s:5:\"sizes\";a:3:{s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"image-17-300x285.png\";s:5:\"width\";i:300;s:6:\"height\";i:285;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"image-17-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"disciplin\";a:4:{s:4:\"file\";s:20:\"image-17-320x225.png\";s:5:\"width\";i:320;s:6:\"height\";i:225;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1123, 298, '_edit_last', '1'),
(1124, 298, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:2:\"17\";s:12:\"pgm_menulist\";a:6:{i:0;s:3:\"311\";i:1;s:3:\"316\";i:2;s:3:\"315\";i:3;s:3:\"314\";i:4;s:3:\"313\";i:5;s:3:\"312\";}}'),
(1125, 303, 'inline_featured_image', '0'),
(1126, 303, '_edit_lock', '1623251648:1'),
(1127, 303, '_edit_last', '1'),
(1128, 303, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:2:\"17\";s:12:\"pgm_menulist\";a:6:{i:0;s:3:\"311\";i:1;s:3:\"316\";i:2;s:3:\"315\";i:3;s:3:\"314\";i:4;s:3:\"313\";i:5;s:3:\"312\";}}'),
(1129, 305, 'inline_featured_image', '0'),
(1130, 305, '_edit_lock', '1623251654:1'),
(1131, 305, '_edit_last', '1'),
(1132, 305, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:2:\"17\";s:12:\"pgm_menulist\";a:6:{i:0;s:3:\"311\";i:1;s:3:\"316\";i:2;s:3:\"315\";i:3;s:3:\"314\";i:4;s:3:\"313\";i:5;s:3:\"312\";}}'),
(1133, 307, 'inline_featured_image', '0'),
(1134, 307, '_edit_lock', '1623251661:1'),
(1135, 307, '_edit_last', '1'),
(1136, 307, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:2:\"17\";s:12:\"pgm_menulist\";a:6:{i:0;s:3:\"311\";i:1;s:3:\"316\";i:2;s:3:\"315\";i:3;s:3:\"314\";i:4;s:3:\"313\";i:5;s:3:\"312\";}}'),
(1137, 309, 'inline_featured_image', '0'),
(1138, 309, '_edit_lock', '1623251667:1'),
(1139, 309, '_edit_last', '1'),
(1140, 309, '_pgm_post_meta', 'a:3:{s:12:\"pgm_location\";s:14:\"menu_disciplin\";s:8:\"pgm_menu\";s:2:\"17\";s:12:\"pgm_menulist\";a:6:{i:0;s:3:\"311\";i:1;s:3:\"316\";i:2;s:3:\"315\";i:3;s:3:\"314\";i:4;s:3:\"313\";i:5;s:3:\"312\";}}'),
(1141, 311, '_menu_item_type', 'post_type'),
(1142, 311, '_menu_item_menu_item_parent', '0'),
(1143, 311, '_menu_item_object_id', '296'),
(1144, 311, '_menu_item_object', 'page'),
(1145, 311, '_menu_item_target', ''),
(1146, 311, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1147, 311, '_menu_item_xfn', ''),
(1148, 311, '_menu_item_url', ''),
(1150, 312, '_menu_item_type', 'post_type'),
(1151, 312, '_menu_item_menu_item_parent', '311'),
(1152, 312, '_menu_item_object_id', '309'),
(1153, 312, '_menu_item_object', 'page'),
(1154, 312, '_menu_item_target', ''),
(1155, 312, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1156, 312, '_menu_item_xfn', ''),
(1157, 312, '_menu_item_url', ''),
(1159, 313, '_menu_item_type', 'post_type'),
(1160, 313, '_menu_item_menu_item_parent', '311'),
(1161, 313, '_menu_item_object_id', '307'),
(1162, 313, '_menu_item_object', 'page'),
(1163, 313, '_menu_item_target', ''),
(1164, 313, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1165, 313, '_menu_item_xfn', ''),
(1166, 313, '_menu_item_url', ''),
(1168, 314, '_menu_item_type', 'post_type'),
(1169, 314, '_menu_item_menu_item_parent', '311'),
(1170, 314, '_menu_item_object_id', '305'),
(1171, 314, '_menu_item_object', 'page'),
(1172, 314, '_menu_item_target', ''),
(1173, 314, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1174, 314, '_menu_item_xfn', ''),
(1175, 314, '_menu_item_url', ''),
(1177, 315, '_menu_item_type', 'post_type'),
(1178, 315, '_menu_item_menu_item_parent', '311'),
(1179, 315, '_menu_item_object_id', '303'),
(1180, 315, '_menu_item_object', 'page'),
(1181, 315, '_menu_item_target', ''),
(1182, 315, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1183, 315, '_menu_item_xfn', ''),
(1184, 315, '_menu_item_url', ''),
(1186, 316, '_menu_item_type', 'post_type'),
(1187, 316, '_menu_item_menu_item_parent', '311'),
(1188, 316, '_menu_item_object_id', '298'),
(1189, 316, '_menu_item_object', 'page'),
(1190, 316, '_menu_item_target', ''),
(1191, 316, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1192, 316, '_menu_item_xfn', ''),
(1193, 316, '_menu_item_url', ''),
(1195, 119, '_wp_desired_post_slug', '');

-- --------------------------------------------------------

--
-- Структура таблицы `wp_posts`
--

CREATE TABLE `wp_posts` (
  `ID` bigint UNSIGNED NOT NULL,
  `post_author` bigint UNSIGNED NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_title` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_excerpt` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_status` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'open',
  `post_password` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `post_name` varchar(200) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `to_ping` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `pinged` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_parent` bigint UNSIGNED NOT NULL DEFAULT '0',
  `guid` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `menu_order` int NOT NULL DEFAULT '0',
  `post_type` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_count` bigint NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- Дамп данных таблицы `wp_posts`
--

INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(10, 1, '2021-05-20 10:41:12', '2021-05-20 07:41:12', '', 'Главная', '', 'publish', 'closed', 'closed', '', 'glavnaja', '', '', '2021-05-23 16:11:12', '2021-05-23 13:11:12', '', 0, 'http://brainfood-project/?page_id=10', 0, 'page', '', 0),
(11, 1, '2021-05-20 10:41:12', '2021-05-20 07:41:12', '', 'Главная', '', 'inherit', 'closed', 'closed', '', '10-revision-v1', '', '', '2021-05-20 10:41:12', '2021-05-20 07:41:12', '', 10, 'http://brainfood-project/?p=11', 0, 'revision', '', 0),
(12, 1, '2021-05-20 11:49:30', '2021-05-20 08:49:30', '', 'logo', '', 'inherit', 'open', 'closed', '', 'logo', '', '', '2021-05-20 11:49:30', '2021-05-20 08:49:30', '', 0, 'http://brainfood-project/wp-content/uploads/2021/05/logo.png', 0, 'attachment', 'image/png', 0),
(14, 1, '2021-05-21 18:26:13', '2021-05-21 15:26:13', '', 'main-bg', '', 'inherit', 'open', 'closed', '', 'main-bg', '', '', '2021-05-21 18:26:13', '2021-05-21 15:26:13', '', 10, 'http://brainfood-project/wp-content/uploads/2021/05/main-bg.jpg', 0, 'attachment', 'image/jpeg', 0),
(16, 1, '2021-05-22 13:09:52', '2021-05-22 10:09:52', 'Преподаватель: Чернышева Л.П.', 'Дисциплина: MPI', 'Описание: Данное учебная дисциплина предназначена для освоения практического курса параллельного программирования с использованием технологий MPI. В настоящее время технология MPI является основным средством программирования для кластерных систем и компьютеров с распределенной памятью. Курс включает в себя описание большей части функциональности стандартов MPI примерами их применения, а также практические сведения, которые могут потребоваться при написании реальных программ с использованием этих технологий параллельного программирования.', 'publish', 'closed', 'closed', '', 'disciplina-mpi', '', '', '2021-05-22 13:09:52', '2021-05-22 10:09:52', '', 0, 'http://brainfood-project/?post_type=product&#038;p=16', 0, 'product', '', 0),
(17, 1, '2021-05-22 13:09:34', '2021-05-22 10:09:34', '', 'mpi', '', 'inherit', 'open', 'closed', '', 'mpi', '', '', '2021-05-22 13:09:34', '2021-05-22 10:09:34', '', 16, 'http://brainfood-project/wp-content/uploads/2021/05/mpi.jpg', 0, 'attachment', 'image/jpeg', 0),
(18, 1, '2021-05-22 13:37:10', '2021-05-22 10:37:10', 'Данное учебное пособие предназначено для освоения практического курса параллельного программирования с использованием технологий MPI и OpenMP. В настоящее время технология MPI является основным средством программирования для кластерных систем и компьютеров с распределенной памятью, а технология OpenMP – для компьютеров с общей памятью. Курс включает в себя описание большей части функциональности стандартов MPI-2.2 и OpenMP 3.1 с примерами их применения, а также практические сведения, которые могут потребоваться при написании реальных программ с использованием этих технологий параллельного программирования.\r\n\r\n<a href=\"http://brainfood-project/mpi/\">http://brainfood-project/mpi/</a>', 'MPI', 'Данное учебное пособие предназначено для освоения практического курса параллельного программирования с использованием технологий MPI. В настоящее время технология MPI является основным средством программирования для кластерных систем и компьютеров с распределенной памятью.', 'publish', 'closed', 'closed', '', 'disciplina-mpi', '', '', '2021-05-24 15:59:35', '2021-05-24 12:59:35', '', 0, 'http://brainfood-project/?post_type=disciplin&#038;p=18', 0, 'disciplin', '', 0),
(20, 1, '2021-05-22 15:31:34', '2021-05-22 12:31:34', 'Одним из наиболее популярных средств программирования компьютеров с общей памятью, базирующихся на традиционных языках программирования и использовании специальных комментариев, в настоящее время является технология <b>OpenMP</b>.', 'Open mp', 'Одним из наиболее популярных средств программирования компьютеров с общей памятью, базирующихся на традиционных языках программирования и использовании специальных комментариев, в настоящее время является технология OpenMP. ', 'publish', 'closed', 'closed', '', 'disciplina-open-mp', '', '', '2021-05-22 18:54:31', '2021-05-22 15:54:31', '', 0, 'http://brainfood-project/?post_type=disciplin&#038;p=20', 0, 'disciplin', '', 0),
(21, 1, '2021-05-22 15:27:44', '2021-05-22 12:27:44', '', 'open_mp', '', 'inherit', 'open', 'closed', '', 'open_mp', '', '', '2021-05-22 15:27:44', '2021-05-22 12:27:44', '', 20, 'http://brainfood-project/wp-content/uploads/2021/05/open_mp.jpg', 0, 'attachment', 'image/jpeg', 0),
(22, 1, '2021-05-22 16:04:59', '2021-05-22 13:04:59', 'Курс предназначен для разработчиков и исследователей, желающих познакомиться с основами программирования графических процессоров (GPU) NVIDIA в целях ускорения решаемых задач. Слушателям будут даны основы программирования с использованием технологии CUDA, приведены сведения о типах памяти GPU, будут рассмотрены библиотеки и инструменты, входящие в комплект разработчика CUDA Toolkit, вопросы отладки, профилирования и оптимизации CUDA-программ.', 'CUDA', 'Курс предназначен для разработчиков и исследователей, желающих познакомиться с основами программирования графических процессоров (GPU) NVIDIA в целях ускорения решаемых задач.', 'publish', 'closed', 'closed', '', 'disciplina-cuda', '', '', '2021-05-22 18:54:09', '2021-05-22 15:54:09', '', 0, 'http://brainfood-project/?post_type=disciplin&#038;p=22', 0, 'disciplin', '', 0),
(23, 1, '2021-05-22 15:34:39', '2021-05-22 12:34:39', '', 'cuda', '', 'inherit', 'open', 'closed', '', 'cuda', '', '', '2021-05-22 15:34:39', '2021-05-22 12:34:39', '', 22, 'http://brainfood-project/wp-content/uploads/2021/05/cuda.jpg', 0, 'attachment', 'image/jpeg', 0),
(24, 1, '2021-05-22 16:09:25', '2021-05-22 13:09:25', 'Данный раздел посвящен языку программирования C# и платформе .NET.', 'C#', 'Данный раздел посвящен языку программирования C# и платформе .NET.', 'publish', 'closed', 'closed', '', 'disciplina-c', '', '', '2021-05-22 18:53:57', '2021-05-22 15:53:57', '', 0, 'http://brainfood-project/?post_type=disciplin&#038;p=24', 0, 'disciplin', '', 0),
(25, 1, '2021-05-22 16:09:10', '2021-05-22 13:09:10', '', 'sharp', '', 'inherit', 'open', 'closed', '', 'sharp', '', '', '2021-05-22 16:09:10', '2021-05-22 13:09:10', '', 24, 'http://brainfood-project/wp-content/uploads/2021/05/sharp.jpg', 0, 'attachment', 'image/jpeg', 0),
(26, 1, '2021-05-22 16:12:45', '2021-05-22 13:12:45', 'Этот курс предназначен для изучения JavaScript программистами, а также для тех, кто разрабатывал на нём эпизодически и теперь хочет освоить профессионально.', 'JavaScript', 'Этот курс предназначен для изучения JavaScript программистами, а также для тех, кто разрабатывал на нём эпизодически и теперь хочет освоить профессионально.', 'publish', 'closed', 'closed', '', 'disciplina-javascript', '', '', '2021-05-23 16:33:40', '2021-05-23 13:33:40', '', 0, 'http://brainfood-project/?post_type=disciplin&#038;p=26', 0, 'disciplin', '', 0),
(27, 1, '2021-05-22 16:12:34', '2021-05-22 13:12:34', '', 'js', '', 'inherit', 'open', 'closed', '', 'js', '', '', '2021-05-22 16:12:34', '2021-05-22 13:12:34', '', 26, 'http://brainfood-project/wp-content/uploads/2021/05/js.jpg', 0, 'attachment', 'image/jpeg', 0),
(38, 1, '2021-05-24 13:07:07', '2021-05-24 10:07:07', '', 'mpi-1', '', 'inherit', 'open', 'closed', '', 'mpi-1', '', '', '2021-05-24 13:07:07', '2021-05-24 10:07:07', '', 0, 'http://brainfood-project/wp-content/uploads/2021/05/mpi-1.jpg', 0, 'attachment', 'image/jpeg', 0),
(44, 1, '2021-05-24 15:20:36', '2021-05-24 12:20:36', 'Данное учебное пособие предназначено для освоения практического курса параллельного программирования с использованием технологий MPI и OpenMP. В настоящее время технология MPI является основным средством программирования для кластерных систем и компьютеров с распределенной памятью, а технология OpenMP – для компьютеров с общей памятью. Курс включает в себя описание большей части функциональности стандартов MPI-2.2 и OpenMP 3.1 с примерами их применения, а также практические сведения, которые могут потребоваться при написании реальных программ с использованием этих технологий параллельного программирования.\n\n<a href=\"http://brainfood-project/mpi/\">http://brainfood-project/mpi/</a>', 'MPI', 'Данное учебное пособие предназначено для освоения практического курса параллельного программирования с использованием технологий MPI. В настоящее время технология MPI является основным средством программирования для кластерных систем и компьютеров с распределенной памятью.', 'inherit', 'closed', 'closed', '', '18-autosave-v1', '', '', '2021-05-24 15:20:36', '2021-05-24 12:20:36', '', 18, 'http://brainfood-project/?p=44', 0, 'revision', '', 0),
(52, 1, '2021-05-25 12:36:53', '2021-05-25 09:36:53', '', 'cuda-1', '', 'inherit', 'open', 'closed', '', 'cuda-1', '', '', '2021-05-25 12:36:53', '2021-05-25 09:36:53', '', 0, 'http://brainfood-project/wp-content/uploads/2021/05/cuda-1.jpg', 0, 'attachment', 'image/jpeg', 0),
(90, 1, '2021-05-26 19:27:53', '2021-05-26 16:27:53', 'Usage tracker failed due to following reason: cURL error 6: Could not resolve host: data.quizandsurveymaster.com', 'Error 0024', '', 'publish', 'closed', 'closed', '', 'error-0024', '', '', '2021-05-26 19:27:53', '2021-05-26 16:27:53', '', 0, 'http://brainfood-project/?p=90', 0, 'qmn_log', '', 0),
(91, 1, '2021-05-26 19:34:44', '2021-05-26 16:34:44', '[mlw_quizmaster quiz=1]', 'Тест по mpi', '', 'publish', 'open', 'closed', '', 'test-po-mpi', '', '', '2021-05-26 19:34:44', '2021-05-26 16:34:44', '', 0, 'http://brainfood-project/?post_type=qsm_quiz&#038;p=91', 0, 'qsm_quiz', '', 0),
(92, 1, '2021-06-09 17:44:08', '2021-05-26 16:35:12', ' ', '', '', 'publish', 'closed', 'closed', '', '92', '', '', '2021-06-09 17:44:08', '2021-06-09 14:44:08', '', 0, 'http://brainfood-project/?p=92', 16, 'nav_menu_item', '', 0),
(95, 1, '2021-05-27 13:48:51', '2021-05-27 10:48:51', '<p>[user_registration_my_account]</p>\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Мой аккаунт', '', 'publish', 'closed', 'closed', '', 'my-account', '', '', '2021-06-09 20:30:01', '2021-06-09 17:30:01', '', 0, 'http://brainfood-project/my-account/', 0, 'page', '', 0),
(96, 1, '2021-05-27 13:48:51', '2021-05-27 10:48:51', '[user_registration_form id=\"97\"]', 'Регистрация', '', 'publish', 'closed', 'closed', '', 'registration', '', '', '2021-06-09 20:30:20', '2021-06-09 17:30:20', '', 0, 'http://brainfood-project/registration/', 0, 'page', '', 0),
(97, 1, '2021-05-29 14:32:53', '2021-05-29 11:32:53', '[[[{\"field_key\":\"user_login\",\"general_setting\":{\"label\":\"Имя пользователя\",\"description\":\"\",\"field_name\":\"user_login\",\"placeholder\":\"\",\"required\":\"yes\",\"hide_label\":\"no\"},\"advance_setting\":{\"custom_class\":\"\",\"username_length\":\"\",\"username_character\":\"no\"}},{\"field_key\":\"last_name\",\"general_setting\":{\"label\":\"Фамилия пользователя\",\"description\":\"\",\"field_name\":\"last_name\",\"placeholder\":\"\",\"required\":\"yes\",\"hide_label\":\"no\"},\"advance_setting\":{\"custom_class\":\"\"}},{\"field_key\":\"user_email\",\"general_setting\":{\"label\":\"Email\",\"description\":\"\",\"field_name\":\"user_email\",\"placeholder\":\"\",\"required\":\"yes\",\"hide_label\":\"no\"},\"advance_setting\":{\"custom_class\":\"\"}},{\"field_key\":\"user_pass\",\"general_setting\":{\"label\":\"Пароль\",\"description\":\"\",\"field_name\":\"user_pass\",\"placeholder\":\"\",\"required\":\"yes\",\"hide_label\":\"no\"},\"advance_setting\":{\"custom_class\":\"\"}}]]]', 'Untitled', '', 'publish', 'closed', 'closed', '', 'untitled', '', '', '2021-05-29 14:32:53', '2021-05-29 11:32:53', '', 0, 'http://brainfood-project/?post_type=user_registration&#038;p=97', 0, 'user_registration', '', 0),
(98, 1, '2021-05-27 15:10:39', '2021-05-27 12:10:39', '[mlw_quizmaster quiz=2]', 'Тест по Javascript', '', 'publish', 'open', 'closed', '', 'test-po-javascript', '', '', '2021-05-27 15:10:39', '2021-05-27 12:10:39', '', 0, 'http://brainfood-project/?post_type=qsm_quiz&#038;p=98', 0, 'qsm_quiz', '', 0),
(99, 1, '2021-06-09 13:55:55', '2021-05-27 12:12:01', ' ', '', '', 'publish', 'closed', 'closed', '', '99', '', '', '2021-06-09 13:55:55', '2021-06-09 10:55:55', '', 0, 'http://brainfood-project/?p=99', 1, 'nav_menu_item', '', 0),
(100, 1, '2021-05-27 20:24:53', '2021-05-27 17:24:53', '[user_registration_form id=\"97\"]', 'Registration', '', 'inherit', 'closed', 'closed', '', '96-revision-v1', '', '', '2021-05-27 20:24:53', '2021-05-27 17:24:53', '', 96, 'http://brainfood-project/?p=100', 0, 'revision', '', 0),
(105, 1, '2021-05-27 20:42:14', '2021-05-27 17:42:14', '[user_registration_my_account]', 'My Account', '', 'inherit', 'closed', 'closed', '', '95-revision-v1', '', '', '2021-05-27 20:42:14', '2021-05-27 17:42:14', '', 95, 'http://brainfood-project/?p=105', 0, 'revision', '', 0),
(106, 1, '2021-05-27 20:52:24', '2021-05-27 17:52:24', '<p>[user_registration_my_account]</p>\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'My Account', '', 'inherit', 'closed', 'closed', '', '95-revision-v1', '', '', '2021-05-27 20:52:24', '2021-05-27 17:52:24', '', 95, 'http://brainfood-project/?p=106', 0, 'revision', '', 0),
(107, 1, '2021-05-30 14:20:10', '0000-00-00 00:00:00', '', 'Lost password', '', 'draft', 'closed', 'closed', '', '', '', '', '2021-05-30 14:20:10', '0000-00-00 00:00:00', '', 0, 'http://brainfood-project/?p=107', 1, 'nav_menu_item', '', 0),
(110, 1, '2021-05-30 17:31:52', '2021-05-30 11:28:23', ' ', '', '', 'publish', 'closed', 'closed', '', '110', '', '', '2021-05-30 17:31:52', '2021-05-30 14:31:52', '', 0, 'http://brainfood-project/?p=110', 1, 'nav_menu_item', '', 0),
(111, 1, '2021-05-30 17:31:52', '2021-05-30 14:31:52', ' ', '', '', 'publish', 'closed', 'closed', '', '111', '', '', '2021-05-30 17:31:52', '2021-05-30 14:31:52', '', 0, 'http://brainfood-project/?p=111', 2, 'nav_menu_item', '', 0),
(116, 1, '2021-06-02 19:28:08', '2021-06-02 16:28:08', 'Usage tracker failed due to following reason: cURL error 6: Could not resolve host: data.quizandsurveymaster.com', 'Error 0024', '', 'publish', 'closed', 'closed', '', 'error-0024-2', '', '', '2021-06-02 19:28:08', '2021-06-02 16:28:08', '', 0, 'http://brainfood-project/?p=116', 0, 'qmn_log', '', 0),
(119, 1, '2021-06-09 18:15:23', '2021-06-09 15:15:23', '[mlw_quizmaster quiz=3]', 'Тест по mpi2', '', 'trash', 'open', 'closed', '', '__trashed', '', '', '2021-06-09 18:15:23', '2021-06-09 15:15:23', '', 0, 'http://brainfood-project/?post_type=qsm_quiz&#038;p=119', 0, 'qsm_quiz', '', 0),
(121, 1, '2021-06-09 13:55:12', '2021-06-09 10:55:12', '', 'Модуль 1. Введение в параллельное программирование', '', 'publish', 'closed', 'closed', '', 'modul-1', '', '', '2021-06-09 17:46:05', '2021-06-09 14:46:05', '', 0, 'http://brainfood-project/?page_id=121', 0, 'page', '', 0),
(122, 1, '2021-06-09 13:55:12', '2021-06-09 10:55:12', '', 'Модуль 1.', '', 'inherit', 'closed', 'closed', '', '121-revision-v1', '', '', '2021-06-09 13:55:12', '2021-06-09 10:55:12', '', 121, 'http://brainfood-project/?p=122', 0, 'revision', '', 0),
(124, 1, '2021-06-09 13:58:04', '2021-06-09 10:58:04', '', 'Модуль 1. Введение в параллельное программирование', '', 'inherit', 'closed', 'closed', '', '121-revision-v1', '', '', '2021-06-09 13:58:04', '2021-06-09 10:58:04', '', 121, 'http://brainfood-project/?p=124', 0, 'revision', '', 0),
(125, 1, '2021-06-09 13:59:12', '2021-06-09 10:59:12', '<!-- wp:paragraph -->\n<p>Параллельное программирование (parallel programming) – это раздел программирования, связанный с изучением и разработкой методов и средств для распараллеливания обработки информации, выполнения вычислений и команд в многопроцессорных компьютерах и мультипрограммных компьютерах с целью ускорения вычислений и эффективного использования ресурсов данного компьютера.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":30} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Простыми словами - это когда какая-то большая задача разбивается на множество подзадач, каждую из которых выполняет отдельный процессор в системе. Таким образом улучшается быстродействие системы в целом.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":30} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Области применения параллельного программирования:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Задачи, требующих больших вычислений;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Задачи, требующих быстрого принятия решения;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Задачи в области моделирования;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Обработка больших объемов данных; -и тому подобные.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Тема 1. Понятие параллельного программирования', '', 'publish', 'closed', 'closed', '', 'tema-1-ponjatie-parallelnogo-programmirovanija', '', '', '2021-06-09 17:46:15', '2021-06-09 14:46:15', '', 121, 'http://brainfood-project/?page_id=125', 0, 'page', '', 0),
(126, 1, '2021-06-09 13:59:12', '2021-06-09 10:59:12', '<!-- wp:paragraph -->\n<p>Параллельное программирование (parallel programming) – это раздел программирования, связанный с изучением и разработкой методов и средств для распараллеливания обработки информации, выполнения вычислений и команд в многопроцессорных компьютерах и мультипрограммных компьютерах с целью ускорения вычислений и эффективного использования ресурсов данного компьютера.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Простыми словами - это когда какая-то большая задача разбивается на множество подзадач, каждую из которых выполняет отдельный процессор в системе. Таким образом улучшается быстродействие системы в целом.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Области применения параллельного программирования:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Задачи, требующих больших вычислений;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Задачи, требующих быстрого принятия решения;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Задачи в области моделирования;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Обработка больших объемов данных; -и тому подобные. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Тема 1. Понятие параллельного программирования', '', 'inherit', 'closed', 'closed', '', '125-revision-v1', '', '', '2021-06-09 13:59:12', '2021-06-09 10:59:12', '', 125, 'http://brainfood-project/?p=126', 0, 'revision', '', 0),
(127, 1, '2021-06-09 14:06:21', '2021-06-09 11:06:21', '<!-- wp:paragraph -->\n<p>Существует множество многопроцессорных систем, таких как векторно-конвейерные системы, массивно-параллельные системы, спецпроцессоры, кластерные системы и другие.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Необходима классификация вычислительных систем в виду их многообразия.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Любой классификации предъявляются два требования:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li>Каждая вычислительная система должна однозначно относиться к тому или иному классу.</li><li>Каждый класс должен достаточно полно характеризовать относящиеся к нему системы.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Поток по Флинну</strong> - это последовательность команд или данных, обрабатываемых одним процессором. &nbsp;Он различал одиночный и множественный поток команд или данных.&nbsp; Флинн выделил четыре класса:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":128,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image.png\" alt=\"\" class=\"wp-image-128\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>1. Класс SISD – Single Instruction stream, Single Data stream</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":129,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-1.png\" alt=\"\" class=\"wp-image-129\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>В таких устройствах одно вычислительное устройство последовательно обрабатывает одной командой один поток данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>К этому классу относятся все однопроцессорные вычислительные устройства.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>2.</strong> <strong>Класс SIMD – Single Instruction stream, Multiple Data stream</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":130,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-2.png\" alt=\"\" class=\"wp-image-130\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Одна команда обрабатывает сразу несколько потоков данных. Данная команда является векторной операцией и выполняется над всеми элементами вектора.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>К данным системам относятся многопроцессорные системы с векторно-конвейерной обработкой данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>3.</strong> <strong>Класс MISD – Multiple Instruction stream, Single Data stream</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":131,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-3.png\" alt=\"\" class=\"wp-image-131\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>В данных системах множество команд обрабатывают один и тот же поток данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>В наст. время этот класс пуст, но это не недостаток, так как в наст. время нет таких компьютеров.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>4. <strong>Класс MIMD – Multiple Instruction stream, Multiple Data stream</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":132,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-4.png\" alt=\"\" class=\"wp-image-132\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>В таких вычислительных системах каждый из множества команда работает со своим потоком данных и все процессоры работают параллельно. К данному классу относятся все многопроцессорные вычислительные системы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Тема 2. Классификация Флинна', '', 'publish', 'closed', 'closed', '', 'tema-2-klassifikacija-flinna', '', '', '2021-06-09 17:46:24', '2021-06-09 14:46:24', '', 121, 'http://brainfood-project/?page_id=127', 0, 'page', '', 0),
(128, 1, '2021-06-09 14:00:46', '2021-06-09 11:00:46', '', 'image', '', 'inherit', 'open', 'closed', '', 'image', '', '', '2021-06-09 14:00:46', '2021-06-09 11:00:46', '', 127, 'http://brainfood-project/wp-content/uploads/2021/06/image.png', 0, 'attachment', 'image/png', 0),
(129, 1, '2021-06-09 14:02:11', '2021-06-09 11:02:11', '', 'image-1', '', 'inherit', 'open', 'closed', '', 'image-1', '', '', '2021-06-09 14:02:11', '2021-06-09 11:02:11', '', 127, 'http://brainfood-project/wp-content/uploads/2021/06/image-1.png', 0, 'attachment', 'image/png', 0),
(130, 1, '2021-06-09 14:03:46', '2021-06-09 11:03:46', '', 'image-2', '', 'inherit', 'open', 'closed', '', 'image-2', '', '', '2021-06-09 14:03:46', '2021-06-09 11:03:46', '', 127, 'http://brainfood-project/wp-content/uploads/2021/06/image-2.png', 0, 'attachment', 'image/png', 0),
(131, 1, '2021-06-09 14:04:45', '2021-06-09 11:04:45', '', 'image-3', '', 'inherit', 'open', 'closed', '', 'image-3', '', '', '2021-06-09 14:04:45', '2021-06-09 11:04:45', '', 127, 'http://brainfood-project/wp-content/uploads/2021/06/image-3.png', 0, 'attachment', 'image/png', 0),
(132, 1, '2021-06-09 14:05:30', '2021-06-09 11:05:30', '', 'image-4', '', 'inherit', 'open', 'closed', '', 'image-4', '', '', '2021-06-09 14:05:30', '2021-06-09 11:05:30', '', 127, 'http://brainfood-project/wp-content/uploads/2021/06/image-4.png', 0, 'attachment', 'image/png', 0),
(133, 1, '2021-06-09 14:06:21', '2021-06-09 11:06:21', '<!-- wp:paragraph -->\n<p>Существует множество многопроцессорных систем, таких как векторно-конвейерные системы, массивно-параллельные системы, спецпроцессоры, кластерные системы и другие.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Необходима классификация вычислительных систем в виду их многообразия.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Любой классификации предъявляются два требования:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li>Каждая вычислительная система должна однозначно относиться к тому или иному классу.</li><li>Каждый класс должен достаточно полно характеризовать относящиеся к нему системы.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Поток по Флинну</strong> - это последовательность команд или данных, обрабатываемых одним процессором.  Он различал одиночный и множественный поток команд или данных.  Флинн выделил четыре класса:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":128,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image.png\" alt=\"\" class=\"wp-image-128\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Класс SISD – Single Instruction stream, Single Data stream</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":129,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-1.png\" alt=\"\" class=\"wp-image-129\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>В таких устройствах одно вычислительное устройство последовательно обрабатывает одной командой один поток данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>К этому классу относятся все однопроцессорные вычислительные устройства.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>2.</strong> <strong>Класс SIMD – Single Instruction stream, Multiple Data stream</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":130,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-2.png\" alt=\"\" class=\"wp-image-130\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Одна команда обрабатывает сразу несколько потоков данных. Данная команда является векторной операцией и выполняется над всеми элементами вектора.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>К данным системам относятся многопроцессорные системы с векторно-конвейерной обработкой данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>3.</strong> <strong>Класс MISD – Multiple Instruction stream, Single Data stream</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":131,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-3.png\" alt=\"\" class=\"wp-image-131\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>В данных системах множество команд обрабатывают один и тот же поток данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>В наст. время этот класс пуст, но это не недостаток, так как в наст. время нет таких компьютеров.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>4. <strong>Класс MIMD – Multiple Instruction stream, Multiple Data stream</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":132,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-4.png\" alt=\"\" class=\"wp-image-132\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>В таких вычислительных системах каждый из множества команда работает со своим потоком данных и все процессоры работают параллельно. К данному классу относятся все многопроцессорные вычислительные системы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Тема 2. Классификация Флинна', '', 'inherit', 'closed', 'closed', '', '127-revision-v1', '', '', '2021-06-09 14:06:21', '2021-06-09 11:06:21', '', 127, 'http://brainfood-project/?p=133', 0, 'revision', '', 0),
(134, 1, '2021-06-09 17:44:07', '2021-06-09 11:07:37', ' ', '', '', 'publish', 'closed', 'closed', '', '134', '', '', '2021-06-09 17:44:07', '2021-06-09 14:44:07', '', 0, 'http://brainfood-project/?p=134', 1, 'nav_menu_item', '', 0),
(136, 1, '2021-06-09 17:44:07', '2021-06-09 11:07:37', ' ', '', '', 'publish', 'closed', 'closed', '', '136', '', '', '2021-06-09 17:44:07', '2021-06-09 14:44:07', '', 121, 'http://brainfood-project/?p=136', 2, 'nav_menu_item', '', 0),
(138, 1, '2021-06-09 14:09:29', '2021-06-09 11:09:29', '<!-- wp:paragraph -->\n<p>Существует множество многопроцессорных систем, таких как векторно-конвейерные системы, массивно-параллельные системы, спецпроцессоры, кластерные системы и другие.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Необходима классификация вычислительных систем в виду их многообразия.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Любой классификации предъявляются два требования:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li>Каждая вычислительная система должна однозначно относиться к тому или иному классу.</li><li>Каждый класс должен достаточно полно характеризовать относящиеся к нему системы.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Поток по Флинну</strong> - это последовательность команд или данных, обрабатываемых одним процессором.  Он различал одиночный и множественный поток команд или данных.  Флинн выделил четыре класса:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":128,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image.png\" alt=\"\" class=\"wp-image-128\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Класс SISD – Single Instruction stream, Single Data stream</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":129,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-1.png\" alt=\"\" class=\"wp-image-129\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>В таких устройствах одно вычислительное устройство последовательно обрабатывает одной командой один поток данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>К этому классу относятся все однопроцессорные вычислительные устройства.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>2.</strong> <strong>Класс SIMD – Single Instruction stream, Multiple Data stream</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":130,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-2.png\" alt=\"\" class=\"wp-image-130\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Одна команда обрабатывает сразу несколько потоков данных. Данная команда является векторной операцией и выполняется над всеми элементами вектора.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>К данным системам относятся многопроцессорные системы с векторно-конвейерной обработкой данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>3.</strong> <strong>Класс MISD – Multiple Instruction stream, Single Data stream</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":131,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-3.png\" alt=\"\" class=\"wp-image-131\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>В данных системах множество команд обрабатывают один и тот же поток данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>В наст. время этот класс пуст, но это не недостаток, так как в наст. время нет таких компьютеров.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>4. <strong>Класс MIMD – Multiple Instruction stream, Multiple Data stream</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":132,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-4.png\" alt=\"\" class=\"wp-image-132\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>В таких вычислительных системах каждый из множества команда работает со своим потоком данных и все процессоры работают параллельно. К данному классу относятся все многопроцессорные вычислительные системы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Тема 2. Классификация Флинна', '', 'inherit', 'closed', 'closed', '', '127-revision-v1', '', '', '2021-06-09 14:09:29', '2021-06-09 11:09:29', '', 127, 'http://brainfood-project/?p=138', 0, 'revision', '', 0),
(139, 1, '2021-06-09 14:11:08', '2021-06-09 11:11:08', '<!-- wp:paragraph -->\n<p>Существует множество многопроцессорных систем, таких как векторно-конвейерные системы, массивно-параллельные системы, спецпроцессоры, кластерные системы и другие.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Необходима классификация вычислительных систем в виду их многообразия.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Любой классификации предъявляются два требования:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li>Каждая вычислительная система должна однозначно относиться к тому или иному классу.</li><li>Каждый класс должен достаточно полно характеризовать относящиеся к нему системы.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Поток по Флинну</strong> - это последовательность команд или данных, обрабатываемых одним процессором. &nbsp;Он различал одиночный и множественный поток команд или данных.&nbsp; Флинн выделил четыре класса:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":128,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image.png\" alt=\"\" class=\"wp-image-128\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Класс SISD – Single Instruction stream, Single Data stream</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":129,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-1.png\" alt=\"\" class=\"wp-image-129\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>В таких устройствах одно вычислительное устройство последовательно обрабатывает одной командой один поток данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>К этому классу относятся все однопроцессорные вычислительные устройства.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>2.</strong> <strong>Класс SIMD – Single Instruction stream, Multiple Data stream</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":130,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-2.png\" alt=\"\" class=\"wp-image-130\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Одна команда обрабатывает сразу несколько потоков данных. Данная команда является векторной операцией и выполняется над всеми элементами вектора.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>К данным системам относятся многопроцессорные системы с векторно-конвейерной обработкой данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>3.</strong> <strong>Класс MISD – Multiple Instruction stream, Single Data stream</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":131,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-3.png\" alt=\"\" class=\"wp-image-131\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>В данных системах множество команд обрабатывают один и тот же поток данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>В наст. время этот класс пуст, но это не недостаток, так как в наст. время нет таких компьютеров.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>4. <strong>Класс MIMD – Multiple Instruction stream, Multiple Data stream</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":132,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-4.png\" alt=\"\" class=\"wp-image-132\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>В таких вычислительных системах каждый из множества команда работает со своим потоком данных и все процессоры работают параллельно. К данному классу относятся все многопроцессорные вычислительные системы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Тема 2. Классификация Флинна', '', 'inherit', 'closed', 'closed', '', '127-revision-v1', '', '', '2021-06-09 14:11:08', '2021-06-09 11:11:08', '', 127, 'http://brainfood-project/?p=139', 0, 'revision', '', 0),
(140, 1, '2021-06-09 14:12:55', '2021-06-09 11:12:55', '<!-- wp:paragraph -->\n<p>Существует множество многопроцессорных систем, таких как векторно-конвейерные системы, массивно-параллельные системы, спецпроцессоры, кластерные системы и другие.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Необходима классификация вычислительных систем в виду их многообразия.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Любой классификации предъявляются два требования:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li>Каждая вычислительная система должна однозначно относиться к тому или иному классу.</li><li>Каждый класс должен достаточно полно характеризовать относящиеся к нему системы.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Поток по Флинну</strong> - это последовательность команд или данных, обрабатываемых одним процессором. &nbsp;Он различал одиночный и множественный поток команд или данных.&nbsp; Флинн выделил четыре класса:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":128,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image.png\" alt=\"\" class=\"wp-image-128\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Класс SISD – Single Instruction stream, Single Data stream</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":129,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-1.png\" alt=\"\" class=\"wp-image-129\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>В таких устройствах одно вычислительное устройство последовательно обрабатывает одной командой один поток данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>К этому классу относятся все однопроцессорные вычислительные устройства.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>2.</strong> <strong>Класс SIMD – Single Instruction stream, Multiple Data stream</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":130,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-2.png\" alt=\"\" class=\"wp-image-130\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Одна команда обрабатывает сразу несколько потоков данных. Данная команда является векторной операцией и выполняется над всеми элементами вектора.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>К данным системам относятся многопроцессорные системы с векторно-конвейерной обработкой данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>3.</strong> <strong>Класс MISD – Multiple Instruction stream, Single Data stream</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":131,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-3.png\" alt=\"\" class=\"wp-image-131\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>В данных системах множество команд обрабатывают один и тот же поток данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>В наст. время этот класс пуст, но это не недостаток, так как в наст. время нет таких компьютеров.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>4. <strong>Класс MIMD – Multiple Instruction stream, Multiple Data stream</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":132,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-4.png\" alt=\"\" class=\"wp-image-132\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>В таких вычислительных системах каждый из множества команда работает со своим потоком данных и все процессоры работают параллельно. К данному классу относятся все многопроцессорные вычислительные системы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Тема 2. Классификация Флинна', '', 'inherit', 'closed', 'closed', '', '127-revision-v1', '', '', '2021-06-09 14:12:55', '2021-06-09 11:12:55', '', 127, 'http://brainfood-project/?p=140', 0, 'revision', '', 0),
(141, 1, '2021-06-09 17:44:07', '2021-06-09 11:13:41', ' ', '', '', 'publish', 'closed', 'closed', '', '141', '', '', '2021-06-09 17:44:07', '2021-06-09 14:44:07', '', 121, 'http://brainfood-project/?p=141', 3, 'nav_menu_item', '', 0),
(142, 1, '2021-06-09 14:14:18', '2021-06-09 11:14:18', '<!-- wp:paragraph -->\n<p>Параллельное программирование (parallel programming) – это раздел программирования, связанный с изучением и разработкой методов и средств для распараллеливания обработки информации, выполнения вычислений и команд в многопроцессорных компьютерах и мультипрограммных компьютерах с целью ускорения вычислений и эффективного использования ресурсов данного компьютера.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Простыми словами - это когда какая-то большая задача разбивается на множество подзадач, каждую из которых выполняет отдельный процессор в системе. Таким образом улучшается быстродействие системы в целом.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Области применения параллельного программирования:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Задачи, требующих больших вычислений;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Задачи, требующих быстрого принятия решения;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Задачи в области моделирования;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Обработка больших объемов данных; -и тому подобные.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Тема 1. Понятие параллельного программирования', '', 'inherit', 'closed', 'closed', '', '125-revision-v1', '', '', '2021-06-09 14:14:18', '2021-06-09 11:14:18', '', 125, 'http://brainfood-project/?p=142', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(144, 1, '2021-06-09 14:17:26', '2021-06-09 11:17:26', '<!-- wp:paragraph -->\n<p>Существует множество многопроцессорных систем, таких как векторно-конвейерные системы, массивно-параллельные системы, спецпроцессоры, кластерные системы и другие.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Необходима классификация вычислительных систем в виду их многообразия.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Любой классификации предъявляются два требования:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li>Каждая вычислительная система должна однозначно относиться к тому или иному классу.</li><li>Каждый класс должен достаточно полно характеризовать относящиеся к нему системы.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Поток по Флинну</strong> - это последовательность команд или данных, обрабатываемых одним процессором. &nbsp;Он различал одиночный и множественный поток команд или данных.&nbsp; Флинн выделил четыре класса:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":128,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image.png\" alt=\"\" class=\"wp-image-128\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>1. Класс SISD – Single Instruction stream, Single Data stream</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":129,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-1.png\" alt=\"\" class=\"wp-image-129\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>В таких устройствах одно вычислительное устройство последовательно обрабатывает одной командой один поток данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>К этому классу относятся все однопроцессорные вычислительные устройства.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>2.</strong> <strong>Класс SIMD – Single Instruction stream, Multiple Data stream</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":130,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-2.png\" alt=\"\" class=\"wp-image-130\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Одна команда обрабатывает сразу несколько потоков данных. Данная команда является векторной операцией и выполняется над всеми элементами вектора.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>К данным системам относятся многопроцессорные системы с векторно-конвейерной обработкой данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>3.</strong> <strong>Класс MISD – Multiple Instruction stream, Single Data stream</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":131,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-3.png\" alt=\"\" class=\"wp-image-131\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>В данных системах множество команд обрабатывают один и тот же поток данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>В наст. время этот класс пуст, но это не недостаток, так как в наст. время нет таких компьютеров.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>4. <strong>Класс MIMD – Multiple Instruction stream, Multiple Data stream</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":132,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-4.png\" alt=\"\" class=\"wp-image-132\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>В таких вычислительных системах каждый из множества команда работает со своим потоком данных и все процессоры работают параллельно. К данному классу относятся все многопроцессорные вычислительные системы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Тема 2. Классификация Флинна', '', 'inherit', 'closed', 'closed', '', '127-revision-v1', '', '', '2021-06-09 14:17:26', '2021-06-09 11:17:26', '', 127, 'http://brainfood-project/?p=144', 0, 'revision', '', 0),
(145, 1, '2021-06-09 14:18:21', '2021-06-09 11:18:21', '<!-- wp:paragraph -->\n<p>Параллельное программирование (parallel programming) – это раздел программирования, связанный с изучением и разработкой методов и средств для распараллеливания обработки информации, выполнения вычислений и команд в многопроцессорных компьютерах и мультипрограммных компьютерах с целью ускорения вычислений и эффективного использования ресурсов данного компьютера.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Простыми словами - это когда какая-то большая задача разбивается на множество подзадач, каждую из которых выполняет отдельный процессор в системе. Таким образом улучшается быстродействие системы в целом.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Области применения параллельного программирования:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Задачи, требующих больших вычислений;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Задачи, требующих быстрого принятия решения;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Задачи в области моделирования;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Обработка больших объемов данных; -и тому подобные.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Тема 1. Понятие параллельного программирования', '', 'inherit', 'closed', 'closed', '', '125-revision-v1', '', '', '2021-06-09 14:18:21', '2021-06-09 11:18:21', '', 125, 'http://brainfood-project/?p=145', 0, 'revision', '', 0),
(147, 1, '2021-06-09 14:19:42', '2021-06-09 11:19:42', '<!-- wp:paragraph -->\n<p>Параллельное программирование (parallel programming) – это раздел программирования, связанный с изучением и разработкой методов и средств для распараллеливания обработки информации, выполнения вычислений и команд в многопроцессорных компьютерах и мультипрограммных компьютерах с целью ускорения вычислений и эффективного использования ресурсов данного компьютера.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Простыми словами - это когда какая-то большая задача разбивается на множество подзадач, каждую из которых выполняет отдельный процессор в системе. Таким образом улучшается быстродействие системы в целом.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":30} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Области применения параллельного программирования:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Задачи, требующих больших вычислений;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Задачи, требующих быстрого принятия решения;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Задачи в области моделирования;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Обработка больших объемов данных; -и тому подобные.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Тема 1. Понятие параллельного программирования', '', 'inherit', 'closed', 'closed', '', '125-revision-v1', '', '', '2021-06-09 14:19:42', '2021-06-09 11:19:42', '', 125, 'http://brainfood-project/?p=147', 0, 'revision', '', 0),
(148, 1, '2021-06-09 14:20:18', '2021-06-09 11:20:18', '<!-- wp:paragraph -->\n<p>Параллельное программирование (parallel programming) – это раздел программирования, связанный с изучением и разработкой методов и средств для распараллеливания обработки информации, выполнения вычислений и команд в многопроцессорных компьютерах и мультипрограммных компьютерах с целью ускорения вычислений и эффективного использования ресурсов данного компьютера.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":30} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Простыми словами - это когда какая-то большая задача разбивается на множество подзадач, каждую из которых выполняет отдельный процессор в системе. Таким образом улучшается быстродействие системы в целом.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":30} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Области применения параллельного программирования:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Задачи, требующих больших вычислений;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Задачи, требующих быстрого принятия решения;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Задачи в области моделирования;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>-Обработка больших объемов данных; -и тому подобные.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Тема 1. Понятие параллельного программирования', '', 'inherit', 'closed', 'closed', '', '125-revision-v1', '', '', '2021-06-09 14:20:18', '2021-06-09 11:20:18', '', 125, 'http://brainfood-project/?p=148', 0, 'revision', '', 0),
(149, 1, '2021-06-09 14:31:09', '2021-06-09 11:31:09', '<!-- wp:paragraph -->\n<p>Различают следующие виды параллелизма:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":15} -->\n<div style=\"height:15px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>1. Геометрический (распараллеливание по пространству)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>2. Функциональный (распараллеливание по задачам)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>3. Конвейерный</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>4. Параллелизм типа принятия коллективного решения (паркетный)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>5. Логарифмическое сдваивание</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":50} -->\n<div style=\"height:50px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Геометрический (распараллеливание по пространству)</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Вся расчётная область разделяется на приблизительно равные участки по числу процессов. Каждый процесс закрепляется за своим участкам расчетной области и все процессы одновременно выполняют вычисления на своих участках расчетной области. Границы между соседними участками называются стыками. Проблема заключается в способе обработки стыков.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>плюсы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ можно рассчитывать большие рабочей области;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ ускорение вычислений за счет одновременной работы всех процессов на своих участках</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>минусы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>- в некоторых задачах для обработки стыков необходимо передавать сообщения между соседними процессами</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>замечание:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>! при обработке стыков необходимо, чтобы точность вычислений на стыках была равна точности вычислений на всей расчетной области</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>применяется:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>в численном интегрировании;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>при решении уравнений в частных производных; при решение задач матричной алгебры</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Функциональный (распараллеливание по задачам)</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Решаемая задача разделяется на независимые подзадачи, и каждая подзадача решается на своём процессе. Все процессы работают одновременно. Для организации вычислений в некоторых задачах необходимо выделить процесс, который не занимается вычислениями, только организует работу других процессов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>плюсы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ одновременная работа всех процессов над своими задачами дает ускорение вычислений</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>минусы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>- задачи различны по временным затратам, что может привести к простаиванию некоторых процессов;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>- в некоторых задачах необходимо выделить отдельный процесс, который занят только координацией работы других процессов, если не принимает участие в вычислениях</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>применяется: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>при решении задач в частных производных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Конвейерный</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Вся расчётная область разделяется на приблизительно одинаковые участки по числу процессов. Каждый процесс закрепляется за своим участкам расчетной области. Первым вычисление начинает 0-ой процесс. Дойдя до стыка, он передаёт данные 1-му процессу, а сам переходит к следующей итерации. 1-ый процесс, приведя вычисления на своей расчетной области, передает данные 2-му процессу и так далее. Последовательно все процессы включаются вычислительный процесс.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>плюсы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ можно обсчитывать большие расчётные области;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ есть стыки, но нет проблем с обработкой стыков;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ после того, как все процессы включаются в работу, они работают одновременно параллельно, каждый на своей итерации, что дает ускорение вычислений</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>минусы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>- на стыках передаются значения, это приводит к потере времени;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>- простои процессов в начале и в конце времени</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>применяется:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>при решении задач в частных производных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Параллелизм типа принятия коллективного решения (паркетный)</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Вся расчётная область разделяется на приблизительно одинаковые участки по числу процессов. Каждый процесс выполняет вычисления на своём участке и находят оптимальное решение - локальный оптимум. Полученные значения процессы пересылают на 0-ой процесс, который из них выбирает глобальный оптимум.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>плюсы: + ускорение вычислений = число используемых процессоров, так как каждый процесс работает параллельно с другими</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>минусы: </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>- узкая область применения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>применяется:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>при решении задач оптимизации методом сканирования</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Логарифмическое сдваивание</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Пусть необходимо найти сумму n – чисел, где n – велико. При последовательном выполнении будет выполнено следующее количество операций:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(a1+a2) - 1 операция</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(a1+a2+a3) - 2 операция</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>…</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(n-1) - всего операций</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>При использовании логарифмического сдваивания число операция будет <strong>log<sub>2</sub>N</strong>, где суммирование происходит одновременно на каждом процессе. N – ближайшее большее степени 2 для вычисления логарифма (N - должно быть больше числа процессов в системе).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>плюсы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ заметное ускорение</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>минусы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>- узкая область применения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>применяется:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>в численном интегрировании;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>при суммировании больших массивов</p>\n<!-- /wp:paragraph -->', 'Тема 3. Виды параллелизма', '', 'publish', 'closed', 'closed', '', 'tema-3-vidy-parallelizma', '', '', '2021-06-09 17:46:33', '2021-06-09 14:46:33', '', 121, 'http://brainfood-project/?page_id=149', 0, 'page', '', 0),
(150, 1, '2021-06-09 14:31:09', '2021-06-09 11:31:09', '<!-- wp:paragraph -->\n<p>Различают следующие виды параллелизма:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":15} -->\n<div style=\"height:15px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>1. Геометрический (распараллеливание по пространству)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>2. Функциональный (распараллеливание по задачам)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>3. Конвейерный</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>4. Параллелизм типа принятия коллективного решения (паркетный)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>5. Логарифмическое сдваивание</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":50} -->\n<div style=\"height:50px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Геометрический (распараллеливание по пространству)</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Вся расчётная область разделяется на приблизительно равные участки по числу процессов. Каждый процесс закрепляется за своим участкам расчетной области и все процессы одновременно выполняют вычисления на своих участках расчетной области. Границы между соседними участками называются стыками. Проблема заключается в способе обработки стыков.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>плюсы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ можно рассчитывать большие рабочей области;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ ускорение вычислений за счет одновременной работы всех процессов на своих участках</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>минусы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>- в некоторых задачах для обработки стыков необходимо передавать сообщения между соседними процессами</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>замечание:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>! при обработке стыков необходимо, чтобы точность вычислений на стыках была равна точности вычислений на всей расчетной области</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>применяется:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>в численном интегрировании;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>при решении уравнений в частных производных; при решение задач матричной алгебры</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Функциональный (распараллеливание по задачам)</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Решаемая задача разделяется на независимые подзадачи, и каждая подзадача решается на своём процессе. Все процессы работают одновременно. Для организации вычислений в некоторых задачах необходимо выделить процесс, который не занимается вычислениями, только организует работу других процессов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>плюсы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ одновременная работа всех процессов над своими задачами дает ускорение вычислений</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>минусы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>- задачи различны по временным затратам, что может привести к простаиванию некоторых процессов;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>- в некоторых задачах необходимо выделить отдельный процесс, который занят только координацией работы других процессов, если не принимает участие в вычислениях</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>применяется: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>при решении задач в частных производных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Конвейерный</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Вся расчётная область разделяется на приблизительно одинаковые участки по числу процессов. Каждый процесс закрепляется за своим участкам расчетной области. Первым вычисление начинает 0-ой процесс. Дойдя до стыка, он передаёт данные 1-му процессу, а сам переходит к следующей итерации. 1-ый процесс, приведя вычисления на своей расчетной области, передает данные 2-му процессу и так далее. Последовательно все процессы включаются вычислительный процесс.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>плюсы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ можно обсчитывать большие расчётные области;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ есть стыки, но нет проблем с обработкой стыков;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ после того, как все процессы включаются в работу, они работают одновременно параллельно, каждый на своей итерации, что дает ускорение вычислений</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>минусы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>- на стыках передаются значения, это приводит к потере времени;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>- простои процессов в начале и в конце времени</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>применяется:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>при решении задач в частных производных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Параллелизм типа принятия коллективного решения (паркетный)</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Вся расчётная область разделяется на приблизительно одинаковые участки по числу процессов. Каждый процесс выполняет вычисления на своём участке и находят оптимальное решение - локальный оптимум. Полученные значения процессы пересылают на 0-ой процесс, который из них выбирает глобальный оптимум.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>плюсы: + ускорение вычислений = число используемых процессоров, так как каждый процесс работает параллельно с другими</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>минусы: </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>- узкая область применения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>применяется:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>при решении задач оптимизации методом сканирования</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Логарифмическое сдваивание</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Пусть необходимо найти сумму n – чисел, где n – велико. При последовательном выполнении будет выполнено следующее количество операций:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(a1+a2) - 1 операция</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(a1+a2+a3) - 2 операция</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>…</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(n-1) - всего операций</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>При использовании логарифмического сдваивания число операция будет <strong>log<sub>2</sub>N</strong>, где суммирование происходит одновременно на каждом процессе. N – ближайшее большее степени 2 для вычисления логарифма (N - должно быть больше числа процессов в системе).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>плюсы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ заметное ускорение</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>минусы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>- узкая область применения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>применяется:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>в численном интегрировании;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>при суммировании больших массивов</p>\n<!-- /wp:paragraph -->', 'Тема 3. Виды параллелизма', '', 'inherit', 'closed', 'closed', '', '149-revision-v1', '', '', '2021-06-09 14:31:09', '2021-06-09 11:31:09', '', 149, 'http://brainfood-project/?p=150', 0, 'revision', '', 0),
(151, 1, '2021-06-09 14:31:45', '2021-06-09 11:31:45', '<!-- wp:paragraph -->\n<p>Различают следующие виды параллелизма:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":15} -->\n<div style=\"height:15px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>1. Геометрический (распараллеливание по пространству)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>2. Функциональный (распараллеливание по задачам)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>3. Конвейерный</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>4. Параллелизм типа принятия коллективного решения (паркетный)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>5. Логарифмическое сдваивание</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":50} -->\n<div style=\"height:50px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Геометрический (распараллеливание по пространству)</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Вся расчётная область разделяется на приблизительно равные участки по числу процессов. Каждый процесс закрепляется за своим участкам расчетной области и все процессы одновременно выполняют вычисления на своих участках расчетной области. Границы между соседними участками называются стыками. Проблема заключается в способе обработки стыков.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>плюсы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ можно рассчитывать большие рабочей области;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ ускорение вычислений за счет одновременной работы всех процессов на своих участках</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>минусы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>- в некоторых задачах для обработки стыков необходимо передавать сообщения между соседними процессами</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>замечание:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>! при обработке стыков необходимо, чтобы точность вычислений на стыках была равна точности вычислений на всей расчетной области</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>применяется:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>в численном интегрировании;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>при решении уравнений в частных производных; при решение задач матричной алгебры</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Функциональный (распараллеливание по задачам)</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Решаемая задача разделяется на независимые подзадачи, и каждая подзадача решается на своём процессе. Все процессы работают одновременно. Для организации вычислений в некоторых задачах необходимо выделить процесс, который не занимается вычислениями, только организует работу других процессов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>плюсы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ одновременная работа всех процессов над своими задачами дает ускорение вычислений</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>минусы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>- задачи различны по временным затратам, что может привести к простаиванию некоторых процессов;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>- в некоторых задачах необходимо выделить отдельный процесс, который занят только координацией работы других процессов, если не принимает участие в вычислениях</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>применяется: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>при решении задач в частных производных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Конвейерный</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Вся расчётная область разделяется на приблизительно одинаковые участки по числу процессов. Каждый процесс закрепляется за своим участкам расчетной области. Первым вычисление начинает 0-ой процесс. Дойдя до стыка, он передаёт данные 1-му процессу, а сам переходит к следующей итерации. 1-ый процесс, приведя вычисления на своей расчетной области, передает данные 2-му процессу и так далее. Последовательно все процессы включаются вычислительный процесс.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>плюсы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ можно обсчитывать большие расчётные области;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ есть стыки, но нет проблем с обработкой стыков;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ после того, как все процессы включаются в работу, они работают одновременно параллельно, каждый на своей итерации, что дает ускорение вычислений</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>минусы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>- на стыках передаются значения, это приводит к потере времени;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>- простои процессов в начале и в конце времени</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>применяется:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>при решении задач в частных производных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Параллелизм типа принятия коллективного решения (паркетный)</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Вся расчётная область разделяется на приблизительно одинаковые участки по числу процессов. Каждый процесс выполняет вычисления на своём участке и находят оптимальное решение - локальный оптимум. Полученные значения процессы пересылают на 0-ой процесс, который из них выбирает глобальный оптимум.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>плюсы: + ускорение вычислений = число используемых процессоров, так как каждый процесс работает параллельно с другими</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>минусы: </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>- узкая область применения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>применяется:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>при решении задач оптимизации методом сканирования</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Логарифмическое сдваивание</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Пусть необходимо найти сумму n – чисел, где n – велико. При последовательном выполнении будет выполнено следующее количество операций:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(a1+a2) - 1 операция</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(a1+a2+a3) - 2 операция</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>…</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(n-1) - всего операций</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>При использовании логарифмического сдваивания число операция будет <strong>log<sub>2</sub>N</strong>, где суммирование происходит одновременно на каждом процессе. N – ближайшее большее степени 2 для вычисления логарифма (N - должно быть больше числа процессов в системе).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>плюсы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ заметное ускорение</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>минусы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>- узкая область применения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>применяется:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>в численном интегрировании;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>при суммировании больших массивов</p>\n<!-- /wp:paragraph -->', 'Тема 3. Виды параллелизма', '', 'inherit', 'closed', 'closed', '', '149-revision-v1', '', '', '2021-06-09 14:31:45', '2021-06-09 11:31:45', '', 149, 'http://brainfood-project/?p=151', 0, 'revision', '', 0),
(153, 1, '2021-06-09 14:43:33', '2021-06-09 11:43:33', '<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Закон Амдела</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Ускорение вычислений определяется по следующей формуле:&nbsp; </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":159,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-6.png\" alt=\"\" class=\"wp-image-159\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;, где</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>T<sub>1</sub>&nbsp;- время вычислений в однопроцессорной системе &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>T<sub>2</sub>- время вычислений в p-процессорной системе</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Закон Густавсона – Барсиса:</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Ускорение вычислений определяется по следующей формуле:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":168,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-7.png\" alt=\"\" class=\"wp-image-168\"/></figure>\n<!-- /wp:image -->', 'Тема 4. Формулы для вычисления ускорения работы параллельной системы', '', 'publish', 'closed', 'closed', '', 'tema-4-formuly-dlja-vychislenija-uskorenija-raboty-parallelnoj-sistemy', '', '', '2021-06-09 17:46:43', '2021-06-09 14:46:43', '', 121, 'http://brainfood-project/?page_id=153', 0, 'page', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(154, 1, '2021-06-09 14:41:28', '2021-06-09 11:41:28', '<!-- wp:block {\"ref\":155} /-->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Отступ после заголовка', '', 'publish', 'closed', 'closed', '', 'moj-blok-bez-nazvanija', '', '', '2021-06-09 14:48:54', '2021-06-09 11:48:54', '', 0, 'http://brainfood-project/moj-blok-bez-nazvanija/', 0, 'wp_block', '', 0),
(155, 1, '2021-06-09 14:42:43', '2021-06-09 11:42:43', '', 'Отступ после заголовка', '', 'publish', 'closed', 'closed', '', 'moj-blok-bez-nazvanija-2', '', '', '2021-06-09 14:48:54', '2021-06-09 11:48:54', '', 0, 'http://brainfood-project/moj-blok-bez-nazvanija-2/', 0, 'wp_block', '', 0),
(156, 1, '2021-06-09 14:43:29', '2021-06-09 11:43:29', '<!-- wp:heading {\"level\":4} -->\n<h4><strong>Закон Амдела</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:block {\"ref\":154} /-->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Тема 4. Формулы для вычисления ускорения работы параллельной системы', '', 'inherit', 'closed', 'closed', '', '153-revision-v1', '', '', '2021-06-09 14:43:29', '2021-06-09 11:43:29', '', 153, 'http://brainfood-project/?p=156', 0, 'revision', '', 0),
(158, 1, '2021-06-09 14:44:30', '2021-06-09 11:44:30', '', 'image-5', '', 'inherit', 'open', 'closed', '', 'image-5', '', '', '2021-06-09 14:44:30', '2021-06-09 11:44:30', '', 153, 'http://brainfood-project/wp-content/uploads/2021/06/image-5.png', 0, 'attachment', 'image/png', 0),
(159, 1, '2021-06-09 14:45:46', '2021-06-09 11:45:46', '', 'image-6', '', 'inherit', 'open', 'closed', '', 'image-6', '', '', '2021-06-09 14:45:46', '2021-06-09 11:45:46', '', 153, 'http://brainfood-project/wp-content/uploads/2021/06/image-6.png', 0, 'attachment', 'image/png', 0),
(160, 1, '2021-06-09 14:47:05', '2021-06-09 11:47:05', '', 'отступ текст', '', 'publish', 'closed', 'closed', '', 'moj-blok-bez-nazvanija-3', '', '', '2021-06-09 14:48:54', '2021-06-09 11:48:54', '', 0, 'http://brainfood-project/moj-blok-bez-nazvanija-3/', 0, 'wp_block', '', 0),
(161, 1, '2021-06-09 14:48:54', '2021-06-09 11:48:54', '<!-- wp:heading {\"level\":4} -->\n<h4><strong>Закон Амдела</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:block {\"ref\":155} /-->\n\n<!-- wp:paragraph -->\n<p>Ускорение вычислений определяется по следующей формуле:  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":159,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-6.png\" alt=\"\" class=\"wp-image-159\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> , где</p>\n<!-- /wp:paragraph -->', 'Тема 4. Формулы для вычисления ускорения работы параллельной системы', '', 'inherit', 'closed', 'closed', '', '153-revision-v1', '', '', '2021-06-09 14:48:54', '2021-06-09 11:48:54', '', 153, 'http://brainfood-project/?p=161', 0, 'revision', '', 0),
(163, 1, '2021-06-09 14:50:40', '2021-06-09 11:50:40', '<!-- wp:heading {\"level\":4} -->\n<h4><strong>Закон Амдела</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:block {\"ref\":155} /-->\n\n<!-- wp:paragraph -->\n<p>Ускорение вычислений определяется по следующей формуле:  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":159,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-6.png\" alt=\"\" class=\"wp-image-159\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> , где</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:block {\"ref\":160} /-->\n\n<!-- wp:paragraph -->\n<p>T<sub>1</sub> - время вычислений в однопроцессорной системе  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>T<sub>2</sub>- время вычислений в p-процессорной системе</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:block {\"ref\":154} /-->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Тема 4. Формулы для вычисления ускорения работы параллельной системы', '', 'inherit', 'closed', 'closed', '', '153-revision-v1', '', '', '2021-06-09 14:50:40', '2021-06-09 11:50:40', '', 153, 'http://brainfood-project/?p=163', 0, 'revision', '', 0),
(165, 1, '2021-06-09 14:51:28', '2021-06-09 11:51:28', '<!-- wp:heading {\"level\":4} -->\n<h4><strong>Закон Амдела</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:block {\"ref\":155} /-->\n\n<!-- wp:paragraph -->\n<p>Ускорение вычислений определяется по следующей формуле:  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":159,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-6.png\" alt=\"\" class=\"wp-image-159\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> , где</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:block {\"ref\":160} /-->\n\n<!-- wp:paragraph -->\n<p>T<sub>1</sub> - время вычислений в однопроцессорной системе  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>T<sub>2</sub>- время вычислений в p-процессорной системе</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:block {\"ref\":154} /-->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Закон Густавсона – Барсиса:</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:block {\"ref\":155} /-->\n\n<!-- wp:paragraph -->\n<p>Ускорение вычислений определяется по следующей формуле:</p>\n<!-- /wp:paragraph -->', 'Тема 4. Формулы для вычисления ускорения работы параллельной системы', '', 'inherit', 'closed', 'closed', '', '153-revision-v1', '', '', '2021-06-09 14:51:28', '2021-06-09 11:51:28', '', 153, 'http://brainfood-project/?p=165', 0, 'revision', '', 0),
(166, 1, '2021-06-09 14:52:51', '2021-06-09 11:52:51', '<!-- wp:heading {\"level\":4} -->\n<h4><strong>Закон Амдела</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:block {\"ref\":155} /-->\n\n<!-- wp:paragraph -->\n<p>Ускорение вычислений определяется по следующей формуле:  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":159,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-6.png\" alt=\"\" class=\"wp-image-159\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> , где</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>T<sub>1</sub> - время вычислений в однопроцессорной системе  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>T<sub>2</sub>- время вычислений в p-процессорной системе</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Закон Густавсона – Барсиса:</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Ускорение вычислений определяется по следующей формуле:</p>\n<!-- /wp:paragraph -->', 'Тема 4. Формулы для вычисления ускорения работы параллельной системы', '', 'inherit', 'closed', 'closed', '', '153-revision-v1', '', '', '2021-06-09 14:52:51', '2021-06-09 11:52:51', '', 153, 'http://brainfood-project/?p=166', 0, 'revision', '', 0),
(167, 1, '2021-06-09 14:53:23', '2021-06-09 11:53:23', '<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Закон Амдела</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Ускорение вычислений определяется по следующей формуле:  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":159,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-6.png\" alt=\"\" class=\"wp-image-159\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> , где</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>T<sub>1</sub> - время вычислений в однопроцессорной системе  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>T<sub>2</sub>- время вычислений в p-процессорной системе</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Закон Густавсона – Барсиса:</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Ускорение вычислений определяется по следующей формуле:</p>\n<!-- /wp:paragraph -->', 'Тема 4. Формулы для вычисления ускорения работы параллельной системы', '', 'inherit', 'closed', 'closed', '', '153-revision-v1', '', '', '2021-06-09 14:53:23', '2021-06-09 11:53:23', '', 153, 'http://brainfood-project/?p=167', 0, 'revision', '', 0),
(168, 1, '2021-06-09 14:53:58', '2021-06-09 11:53:58', '', 'image-7', '', 'inherit', 'open', 'closed', '', 'image-7', '', '', '2021-06-09 14:53:58', '2021-06-09 11:53:58', '', 153, 'http://brainfood-project/wp-content/uploads/2021/06/image-7.png', 0, 'attachment', 'image/png', 0),
(170, 1, '2021-06-09 14:54:01', '2021-06-09 11:54:01', '<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Закон Амдела</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Ускорение вычислений определяется по следующей формуле:  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":159,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-6.png\" alt=\"\" class=\"wp-image-159\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> , где</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>T<sub>1</sub> - время вычислений в однопроцессорной системе  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>T<sub>2</sub>- время вычислений в p-процессорной системе</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Закон Густавсона – Барсиса:</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Ускорение вычислений определяется по следующей формуле:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":168,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-7.png\" alt=\"\" class=\"wp-image-168\"/></figure>\n<!-- /wp:image -->', 'Тема 4. Формулы для вычисления ускорения работы параллельной системы', '', 'inherit', 'closed', 'closed', '', '153-revision-v1', '', '', '2021-06-09 14:54:01', '2021-06-09 11:54:01', '', 153, 'http://brainfood-project/?p=170', 0, 'revision', '', 0),
(171, 1, '2021-06-09 14:56:25', '2021-06-09 11:56:25', '<!-- wp:paragraph -->\n<p>Начало параллельной секции обозначается следующим образом:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":172,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-8.png\" alt=\"\" class=\"wp-image-172\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Закрытие параллельной секции следующим образом:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":173,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-9.png\" alt=\"\" class=\"wp-image-173\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Блок-схемы строятся перед решением задачи, перед написанием программы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На них указываются информационные связи.</p>\n<!-- /wp:paragraph -->', 'Тема 5. Блок-схемы параллельного программирования', '', 'publish', 'closed', 'closed', '', 'tema-5-blok-shemy-parallelnogo-programmirovanija', '', '', '2021-06-09 17:46:54', '2021-06-09 14:46:54', '', 121, 'http://brainfood-project/?page_id=171', 0, 'page', '', 0),
(172, 1, '2021-06-09 14:55:15', '2021-06-09 11:55:15', '', 'image-8', '', 'inherit', 'open', 'closed', '', 'image-8', '', '', '2021-06-09 14:55:15', '2021-06-09 11:55:15', '', 171, 'http://brainfood-project/wp-content/uploads/2021/06/image-8.png', 0, 'attachment', 'image/png', 0),
(173, 1, '2021-06-09 14:55:38', '2021-06-09 11:55:38', '', 'image-9', '', 'inherit', 'open', 'closed', '', 'image-9', '', '', '2021-06-09 14:55:38', '2021-06-09 11:55:38', '', 171, 'http://brainfood-project/wp-content/uploads/2021/06/image-9.png', 0, 'attachment', 'image/png', 0),
(174, 1, '2021-06-09 14:56:25', '2021-06-09 11:56:25', '<!-- wp:paragraph -->\n<p>Начало параллельной секции обозначается следующим образом:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":172,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-8.png\" alt=\"\" class=\"wp-image-172\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Закрытие параллельной секции следующим образом:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":173,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-9.png\" alt=\"\" class=\"wp-image-173\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Блок-схемы строятся перед решением задачи, перед написанием программы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На них указываются информационные связи.</p>\n<!-- /wp:paragraph -->', 'Тема 5. Блок-схемы параллельного программирования', '', 'inherit', 'closed', 'closed', '', '171-revision-v1', '', '', '2021-06-09 14:56:25', '2021-06-09 11:56:25', '', 171, 'http://brainfood-project/?p=174', 0, 'revision', '', 0),
(175, 1, '2021-06-09 14:56:48', '2021-06-09 11:56:48', '<!-- wp:paragraph -->\n<p>Начало параллельной секции обозначается следующим образом:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":172,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-8.png\" alt=\"\" class=\"wp-image-172\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Закрытие параллельной секции следующим образом:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":173,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-9.png\" alt=\"\" class=\"wp-image-173\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Блок-схемы строятся перед решением задачи, перед написанием программы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На них указываются информационные связи.</p>\n<!-- /wp:paragraph -->', 'Тема 5. Блок-схемы параллельного программирования', '', 'inherit', 'closed', 'closed', '', '171-revision-v1', '', '', '2021-06-09 14:56:48', '2021-06-09 11:56:48', '', 171, 'http://brainfood-project/?p=175', 0, 'revision', '', 0),
(176, 1, '2021-06-09 14:58:40', '2021-06-09 11:58:40', '<!-- wp:paragraph -->\n<p>Обозначаются следующим образом:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"id\":177,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-10.png\" alt=\"\" class=\"wp-image-177\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Вершины графа (<strong>о</strong> на схеме) - соответствуют некоторым действиям, либо совокупности действий. Ребра или дуги соответствуют информационным зависимостям в программе.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Граф-машины строятся всегда после выполнения задачи.</p>\n<!-- /wp:paragraph -->', 'Тема 6. Граф-машины параллельного программирования', '', 'publish', 'closed', 'closed', '', 'tema-6-graf-mashiny-parallelnogo-programmirovanija', '', '', '2021-06-09 17:47:03', '2021-06-09 14:47:03', '', 121, 'http://brainfood-project/?page_id=176', 0, 'page', '', 0),
(177, 1, '2021-06-09 14:57:57', '2021-06-09 11:57:57', '', 'image-10', '', 'inherit', 'open', 'closed', '', 'image-10', '', '', '2021-06-09 14:57:57', '2021-06-09 11:57:57', '', 176, 'http://brainfood-project/wp-content/uploads/2021/06/image-10.png', 0, 'attachment', 'image/png', 0),
(178, 1, '2021-06-09 14:58:40', '2021-06-09 11:58:40', '<!-- wp:paragraph -->\n<p>Обозначаются следующим образом:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"id\":177,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-10.png\" alt=\"\" class=\"wp-image-177\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Вершины графа (<strong>о</strong> на схеме) - соответствуют некоторым действиям, либо совокупности действий. Ребра или дуги соответствуют информационным зависимостям в программе.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Граф-машины строятся всегда после выполнения задачи.</p>\n<!-- /wp:paragraph -->', 'Тема 6. Граф-машины параллельного программирования', '', 'inherit', 'closed', 'closed', '', '176-revision-v1', '', '', '2021-06-09 14:58:40', '2021-06-09 11:58:40', '', 176, 'http://brainfood-project/?p=178', 0, 'revision', '', 0),
(179, 1, '2021-06-09 17:44:08', '2021-06-09 11:59:32', ' ', '', '', 'publish', 'closed', 'closed', '', '179', '', '', '2021-06-09 17:44:08', '2021-06-09 14:44:08', '', 121, 'http://brainfood-project/?p=179', 7, 'nav_menu_item', '', 0),
(180, 1, '2021-06-09 17:44:07', '2021-06-09 11:59:32', ' ', '', '', 'publish', 'closed', 'closed', '', '180', '', '', '2021-06-09 17:44:07', '2021-06-09 14:44:07', '', 121, 'http://brainfood-project/?p=180', 6, 'nav_menu_item', '', 0),
(181, 1, '2021-06-09 17:44:07', '2021-06-09 11:59:32', ' ', '', '', 'publish', 'closed', 'closed', '', '181', '', '', '2021-06-09 17:44:07', '2021-06-09 14:44:07', '', 121, 'http://brainfood-project/?p=181', 5, 'nav_menu_item', '', 0),
(182, 1, '2021-06-09 17:44:07', '2021-06-09 11:59:32', ' ', '', '', 'publish', 'closed', 'closed', '', '182', '', '', '2021-06-09 17:44:07', '2021-06-09 14:44:07', '', 121, 'http://brainfood-project/?p=182', 4, 'nav_menu_item', '', 0),
(183, 1, '2021-06-09 15:00:27', '2021-06-09 12:00:27', '<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Закон Амдела</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Ускорение вычислений определяется по следующей формуле:&nbsp; </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":159,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-6.png\" alt=\"\" class=\"wp-image-159\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;, где</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>T<sub>1</sub>&nbsp;- время вычислений в однопроцессорной системе &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>T<sub>2</sub>- время вычислений в p-процессорной системе</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":4} -->\n<h4 class=\"has-text-align-center\"><strong>Закон Густавсона – Барсиса:</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Ускорение вычислений определяется по следующей формуле:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":168,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-7.png\" alt=\"\" class=\"wp-image-168\"/></figure>\n<!-- /wp:image -->', 'Тема 4. Формулы для вычисления ускорения работы параллельной системы', '', 'inherit', 'closed', 'closed', '', '153-revision-v1', '', '', '2021-06-09 15:00:27', '2021-06-09 12:00:27', '', 153, 'http://brainfood-project/?p=183', 0, 'revision', '', 0),
(184, 1, '2021-06-09 15:05:03', '2021-06-09 12:05:03', '', 'Модуль 1. Технология параллельного программирования OpenMP', '', 'publish', 'closed', 'closed', '', 'modul-1-tehnologija-parallelnogo-programmirovanija-openmp', '', '', '2021-06-09 16:02:45', '2021-06-09 13:02:45', '', 0, 'http://brainfood-project/?page_id=184', 0, 'page', '', 0),
(185, 1, '2021-06-09 15:05:03', '2021-06-09 12:05:03', '', 'Модуль 1. Технология параллельного программирования OpenMP', '', 'inherit', 'closed', 'closed', '', '184-revision-v1', '', '', '2021-06-09 15:05:03', '2021-06-09 12:05:03', '', 184, 'http://brainfood-project/?p=185', 0, 'revision', '', 0),
(186, 1, '2021-06-09 16:26:06', '2021-06-09 12:05:23', ' ', '', '', 'publish', 'closed', 'closed', '', '186', '', '', '2021-06-09 16:26:06', '2021-06-09 13:26:06', '', 0, 'http://brainfood-project/?p=186', 1, 'nav_menu_item', '', 0),
(187, 1, '2021-06-09 15:09:16', '2021-06-09 12:09:16', '<!-- wp:paragraph -->\n<p><strong>Технология OpenMP</strong> (Open Multi Processor) – предназначена для систем с общей разделяемой памятью.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Thread (поток/нить/тред)</strong> – код программы, выполняемый на одном ядре. Все потоки имеют доступ к общей разделяемой памяти, то есть могут записывать в неё и считывать из неё данные.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Последовательная секция </strong>– часть программы, только одним потоком.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Параллельная секция </strong>– часть программы, выполняющаяся каждым потоком одновременно с другими потоками.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4><strong>Схема «Fork-Join»:</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":188,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-11.png\" alt=\"\" class=\"wp-image-188\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>При старте OpenMP программы стартует последовательная секция, которую выполняет нить с номером 0 – «master thread».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>В точке «Fork» к нити «master thread» дополняются еще N-1 нить и начинает работать параллельная секция, в которой работает N - нитей.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>В точке «Join» «master thread» ожидает выполнения всех остальных нитей и продолжает работу.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Таких точек «Fork-Join» в программе может быть столько, сколько необходимо программисту. Заканчивает OpenMP программу всегда последовательная секция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->', 'Тема 1. Основные понятия OpenMp.', '', 'publish', 'closed', 'closed', '', 'tema-1-osnovnye-ponjatija-openmp', '', '', '2021-06-09 16:02:52', '2021-06-09 13:02:52', '', 184, 'http://brainfood-project/?page_id=187', 0, 'page', '', 0),
(188, 1, '2021-06-09 15:08:03', '2021-06-09 12:08:03', '', 'image-11', '', 'inherit', 'open', 'closed', '', 'image-11', '', '', '2021-06-09 15:08:03', '2021-06-09 12:08:03', '', 187, 'http://brainfood-project/wp-content/uploads/2021/06/image-11.png', 0, 'attachment', 'image/png', 0),
(189, 1, '2021-06-09 15:09:16', '2021-06-09 12:09:16', '<!-- wp:paragraph -->\n<p><strong>Технология OpenMP</strong> (Open Multi Processor) – предназначена для систем с общей разделяемой памятью.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Thread (поток/нить/тред)</strong> – код программы, выполняемый на одном ядре. Все потоки имеют доступ к общей разделяемой памяти, то есть могут записывать в неё и считывать из неё данные.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Последовательная секция </strong>– часть программы, только одним потоком.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Параллельная секция </strong>– часть программы, выполняющаяся каждым потоком одновременно с другими потоками.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4><strong>Схема «Fork-Join»:</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":188,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-11.png\" alt=\"\" class=\"wp-image-188\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>При старте OpenMP программы стартует последовательная секция, которую выполняет нить с номером 0 – «master thread».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>В точке «Fork» к нити «master thread» дополняются еще N-1 нить и начинает работать параллельная секция, в которой работает N - нитей.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>В точке «Join» «master thread» ожидает выполнения всех остальных нитей и продолжает работу. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Таких точек «Fork-Join» в программе может быть столько, сколько необходимо программисту. Заканчивает OpenMP программу всегда последовательная секция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->', 'Тема 1. Основные понятия OpenMp.', '', 'inherit', 'closed', 'closed', '', '187-revision-v1', '', '', '2021-06-09 15:09:16', '2021-06-09 12:09:16', '', 187, 'http://brainfood-project/?p=189', 0, 'revision', '', 0),
(190, 1, '2021-06-09 15:11:01', '2021-06-09 12:11:01', '<!-- wp:image {\"align\":\"center\",\"id\":191,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-12.png\" alt=\"\" class=\"wp-image-191\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Технология OpenMP (Open Multi Processor) – предназначена для систем с общей разделяемой памятью.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Каждые отдельный процесс в системе компьютера имеет собственную память и собственные переменные, а также способен обращаться к общей памяти компьютера и общим переменным системы.</p>\n<!-- /wp:paragraph -->', 'Тема 2. Модель памяти в OpenMP.', '', 'publish', 'closed', 'closed', '', 'tema-2-model-pamjati-v-openmp', '', '', '2021-06-09 16:03:02', '2021-06-09 13:03:02', '', 184, 'http://brainfood-project/?page_id=190', 0, 'page', '', 0),
(191, 1, '2021-06-09 15:10:09', '2021-06-09 12:10:09', '', 'image-12', '', 'inherit', 'open', 'closed', '', 'image-12', '', '', '2021-06-09 15:10:09', '2021-06-09 12:10:09', '', 190, 'http://brainfood-project/wp-content/uploads/2021/06/image-12.png', 0, 'attachment', 'image/png', 0),
(192, 1, '2021-06-09 15:11:01', '2021-06-09 12:11:01', '<!-- wp:image {\"align\":\"center\",\"id\":191,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-12.png\" alt=\"\" class=\"wp-image-191\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Технология OpenMP (Open Multi Processor) – предназначена для систем с общей разделяемой памятью.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Каждые отдельный процесс в системе компьютера имеет собственную память и собственные переменные, а также способен обращаться к общей памяти компьютера и общим переменным системы.</p>\n<!-- /wp:paragraph -->', 'Тема 2. Модель памяти в OpenMP.', '', 'inherit', 'closed', 'closed', '', '190-revision-v1', '', '', '2021-06-09 15:11:01', '2021-06-09 12:11:01', '', 190, 'http://brainfood-project/?p=192', 0, 'revision', '', 0),
(193, 1, '2021-06-09 15:14:56', '2021-06-09 12:14:56', '<!-- wp:paragraph -->\n<p>В OpenMP различают два класса переменных:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>shared</strong><strong> (общие) переменные</strong> – видны всем тредам (процессам) в программе;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>private (личные) переменные</strong> – каждые принадлежат своему треду (процессу).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Изменения одним тредом (процессом) переменной никак не влияет на значение такой же одноимённой переменной на других тредах (процессах).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Переменные, объявленные в последовательной секции программы по умолчанию являются shared (общими) переменными.</p>\n<!-- /wp:paragraph -->', 'Тема 3. Классы переменных в OpenMP.', '', 'publish', 'closed', 'closed', '', 'tema-3-klassy-peremennyh-v-openmp', '', '', '2021-06-09 16:03:08', '2021-06-09 13:03:08', '', 184, 'http://brainfood-project/?page_id=193', 0, 'page', '', 0),
(194, 1, '2021-06-09 15:14:56', '2021-06-09 12:14:56', '<!-- wp:paragraph -->\n<p>В OpenMP различают два класса переменных:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>shared</strong><strong> (общие) переменные</strong> – видны всем тредам (процессам) в программе;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>private (личные) переменные</strong> – каждые принадлежат своему треду (процессу).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Изменения одним тредом (процессом) переменной никак не влияет на значение такой же одноимённой переменной на других тредах (процессах).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Переменные, объявленные в последовательной секции программы по умолчанию являются shared (общими) переменными.</p>\n<!-- /wp:paragraph -->', 'Тема 3. Классы переменных в OpenMP.', '', 'inherit', 'closed', 'closed', '', '193-revision-v1', '', '', '2021-06-09 15:14:56', '2021-06-09 12:14:56', '', 193, 'http://brainfood-project/?p=194', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(195, 1, '2021-06-09 15:20:31', '2021-06-09 12:20:31', '<!-- wp:paragraph -->\n<p>Для работы с OpenMP используются функции и директивы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Директивы могут иметь клаузы/спецификаторы/опции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>По сути, это специальные служебные слова, позволяющие использовать в программе возможности такой технологии параллельного программирования, как OpenMP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директивы имеют следующий вид:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":196,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-13.png\" alt=\"\" class=\"wp-image-196\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива создания параллельной секции – <em>#pragma omp parallel [клаузы]</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива указывает начало выполнения параллельной секции в программе. После её объявления код, находящийся в этой директиве будет выполняться параллельно на каждом процессе.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>parallel</em></strong> имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp parallel private (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":7} -->\n<div style=\"height:7px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Клауза «<em>private</em><em> (список)» </em>меняет класс переменных, указанных в списке. Они становятся личными (приватными) для каждой нити (треда). Начальные значения для переменных не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«(список)»</em> - содержит перечисление идентификаторов переменных через запятую.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><li><em>#pragma omp parallel firstprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, которые становятся личными для каждой нити (треда) и начальные значения этих копий на каждой нити равны значению одноимённых переменах до входа в параллельную секцию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><li><em>#pragma omp parallel shared (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Переменные, указанные в списке, при входе в параллельную секцию становятся общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\"><li><em>#pragma omp parallel default (shared/none){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указано «<em>shared</em><em>»</em>, то все переменные, объявленные последовательно секции, в параллельной секции будут общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указан «<em>none</em><em>»</em>, то переменные, объявленные в последовательной секции, не определены в параллельной.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><li><em>#pragma omp parallel if (условие){…операторы…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение true, то создается параллельная секция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение false, то параллельная секция не создается и операторы, указанные в блоке «<em>операторы</em>» выполняются в последовательной секции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":6} -->\n<ol start=\"6\"><li><em>#pragma omp parallel num_threads (число)&nbsp;{…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>При входе в параллельную секцию будет работать столько тредов (нитей), сколько ядер в параллельном компьютере. Чтобы изменить это количество, в клаузе «<em>num</em><em>_</em><em>threads</em>» указывается необходимое «<em>(число)»</em>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><li><em>#pragma omp parallel copyin (список)&nbsp;{…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Задает список переменных, объявленных как «threadprivate», которые при входе в параллельную область инициализируются значениями соответствующих переменных в нити-мастере.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывается, если выше была описана директива «<em>#</em><em>pragma</em><em> </em><em>omp</em><em> </em><em>threadprivate</em><em> (список)». </em>Списки у директивы «<em>threadprivate</em><em>» </em>и клаузы «<em>copyin</em><em>» </em>должны совпадать. &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":8} -->\n<ol start=\"8\"><li><em>#pragma omp parallel reduction (операция: список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывает о выполнении всеми тредами коллективной операции. При входе в параллельную секцию на каждой нити создаются копии переменных, указанных в списке, которые инициализируются согласно операции. Для аддитивных операций инициализируются «0», для мультипликативных – «1». Каждая нить работает со своей копией. Переменные, указанные в списке, должны быть операндами указанной операции. При выходе из параллельной секции указанная операция применяется ко всем копиям на каждой нити. К полученному значению и значению переменных до входа в параллельную секцию применяется эта же операция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива параллельного выполнения итерации цикла –</strong> <strong><em>#pragma omp for [клаузы] for (…)</em></strong> <strong><em>{…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива распределяет итерации цикла среди потоков, которые будут выполняться одновременно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><em>#pragma omp for [</em><em>клауза</em><em>]</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>for (…)</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>{…}</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Если внутри параллельной секции только одна директива «for», то эти две директивы можно объединить.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>В конце действия директивы «for» существует неявная синхронизация, то есть действие директивы не закончится до тех пор, пока все нити не выполнят свои итерации.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>for</em></strong> имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp for private (список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, начальные значения которых не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><li><em>#pragma omp for firstprivate (список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, начальные значения которых равны значениям одноимённых переменных до входа в этот блок.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><li><em>#pragma omp for lastprivate (список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Переменные, указанные в списке, возвращают своё значение из цикла в одноимённые переменные. Возвращаться будут значения, которые были последними по времени вычисления.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\"><li><em>#pragma omp (ordered/for ordered)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Блок, помеченный данной директивой, будет выполняться последовательно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><li><em>#pragma omp for reduction (операция: список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Для переменных, указанных в списке, создаются копии, которые инициализируются согласно операции. Для аддитивных операций инициализируются «0», для мультипликативных – «1». Переменные, указанные в списке, должны быть операндами указанной операции. При выходе из блока, помеченного этой клаузой, над всеми копиями переменных выполняется операция. Затем указанная операция выполняется над полученным значением и значением переменной до входа в этот блок.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":6} -->\n<ol start=\"6\"><li><em>#pragma omp for nowait</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза снимает неявную синхронизацию. Используя условие «nowait» для цикла можно разрешить основной нити не дожидаться завершения дочерних нитей.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><li><em>#pragma omp for schedule (static/dynamic/runtime/guided) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза позволяет распределить итерации по нитям.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><em>«</em><em>static</em><em> [, </em><em>n</em><em>]» </em>- блочно-циклическое распределение итерации. Если «n» не указано, то каждая нить берёт по одной итерации.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«</em><em>dynamic</em><em> [, </em><em>n</em><em>]» </em>- динамическое распределение итераций по нитям. Каждая нить берёт «n» итераций и выполняет их. Если «n» не указано, то значение принимается равным «1».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«</em><em>runtime</em><em>» </em>- распределение итераций по нитям выполняется по умолчанию, так как это определено в самом компиляторе OpenMP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«guided [, n]» </em>- экспоненциальное распределение итераций по нитям. Каждой нити даётся максимальное число итераций и остаток распределяется по нитям, но на каждой нити должно быть не меньше, чем «n» итераций.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива синхронизации потоков –</strong> <strong><em>#pragma omp barrier</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Все нити, обратившиеся к данной директиве, останавливаются и ждут других нитей. Как только все нити обратятся к этой директиве, действие её заканчивается. После выполнения данной директивы все нити снова работают одновременно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива выполнение блока нитью мастер –</strong> <strong><em>#pragma omp master {…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данный блок выполняет только нулевой тред (поток). Все остальные треды пропускают его, не дожидаясь завершения работы нулевого треда.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива выполнение независимых блоков –</strong> <strong><em>#pragma omp sections [клауза]</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Все треды, входящие в данный блок, выбирают один из них и выполняют его. Если блоков больше числа тредов, некоторые треды будут выполнять несколько блоков. Если блоков меньше числа тредов, некоторые треды не будут выполнять ничего.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива имеет неявную синхронизацию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Если внутри директивы «parallel» только одна директива «sections», то эти две директивы можно объединить:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><em>#pragma omp parallel</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>{</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>#pragma section</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>{…}</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>}</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>sections </em></strong>имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp sections private (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанные в списке, начальные значения которых не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><li><em>#pragma omp sections firstprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанные в списке, начальные значения которых равны значениям одноименных переменных до входа в блок, помеченный данной директивой.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><li><em>#pragma omp sections lastprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанные в списке. При выходе из блока последние по времени вычисления значения переменных из списка присваивается одноимённым переменным.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\"><li><em>#pragma omp sections nowait</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза снимает неявную синхронизацию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><li><em>#pragma omp sections reduction (операция: список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, начальные значения которых проинициализированы согласно операции. Переменные, указанные в списке, должны быть операндами указанной операций. После выхода из блока данная операция применяется ко всем локальным копиям и к начальным значениям переменных до входа в этот блок.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива однократного выполнения блока одной нитью –</strong> <strong><em>#pragma omp single [клауза]</em></strong> {...}</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>При обращении к данной директиве только одна из нитей, выбранная случайно, выполняет этот блок. Остальные нити ждут завершения выполнения работы выбранной нити. Возникает неявная синхронизация.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>single </em></strong>имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp single private (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанные в списке, начальные значения которых не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><em>#pragma omp single firstprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанные в списке, начальные значения которых равны значениям одноименных переменных до входа в блок, помеченный данной директивой.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><em>#pragma omp single copyprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>После завершения работы выделенной нити, значения переменных, указанных в списке, возвращаются в одноимённые private переменные на каждой нити.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><em>#pragma omp single nowait</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза снимает неявную синхронизацию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива создания критической секции –</strong> <strong><em>#pragma omp critical(название критической секции) </em></strong>{...}</h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Нити, обратившиеся к данной директиве, выполняют блок по очереди в случайном порядке. То есть все нити параллельной секции выполняют данный блок и в каждый момент времени внутри блока будет только одна нить. Если в программе несколько критических секций, то они должны быть именованы, иметь идентификатор.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива атомарной операции –</strong> <strong><em>#pragma omp atomic {…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>После директивы стоит один оператор, чаще всего оператор присваивания. Нити, обратившиеся к директиве в случайном порядке, последовательно выполняют данный оператор присваивания. Ни один из тредов не может вклиниться в это выражение.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива выравнивания –</strong> <strong><em>#pragma omp flush (список)</em></strong> <strong><em>{…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Нити, обратившиеся к данной директиве, значения переменных, указанных в списке, которые находятся в кэш-памяти, переписывают в общие переменные. То есть после выполнения данной директивы все нити видят одно и то же значение.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива определения класса переменных –</strong> <strong><em>#pragma omp threadprivate (список)</em></strong> <strong><em>{…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Указывается в последовательной секции после объявления переменных из списка и означает, что при открытии параллельной секции указанные переменные станут личными. В этом случае директива «parallel» должна иметь клаузу «copyin», список которой должен совпадать со списком «threadprivate».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива выполнения последовательной части внутри распараллеленного цикла –</strong> <strong><em>#pragma omp ordered</em></strong> <strong><em>{…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Всегда записывается только внутри распараллеленного цикла. При этом у директивы «for» должна быть клауза «ordered».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Тема 4. Директивы и клаузы в OpenMP.', '', 'publish', 'closed', 'closed', '', 'tema-4-direktivy-i-klauzy-v-openmp', '', '', '2021-06-09 16:03:14', '2021-06-09 13:03:14', '', 184, 'http://brainfood-project/?page_id=195', 0, 'page', '', 0),
(196, 1, '2021-06-09 15:16:14', '2021-06-09 12:16:14', '', 'image-13', '', 'inherit', 'open', 'closed', '', 'image-13', '', '', '2021-06-09 15:16:14', '2021-06-09 12:16:14', '', 195, 'http://brainfood-project/wp-content/uploads/2021/06/image-13.png', 0, 'attachment', 'image/png', 0),
(197, 1, '2021-06-09 15:20:31', '2021-06-09 12:20:31', '<!-- wp:paragraph -->\n<p>Для работы с OpenMP используются функции и директивы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Директивы могут иметь клаузы/спецификаторы/опции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>По сути, это специальные служебные слова, позволяющие использовать в программе возможности такой технологии параллельного программирования, как OpenMP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директивы имеют следующий вид:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":196,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-13.png\" alt=\"\" class=\"wp-image-196\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"has-text-align-center\"><strong>Директива создания параллельной секции – <em>#pragma omp parallel [клаузы]</em></strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива указывает начало выполнения параллельной секции в программе. После её объявления код, находящийся в этой директиве будет выполняться параллельно на каждом процессе.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>parallel</em></strong> имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"type\":\"1\"} -->\n<ul type=\"1\"><li><em>#pragma omp parallel private (список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Клауза «<em>private</em><em> (список)» </em>меняет класс переменных, указанных в списке. Они становятся личными (приватными) для каждой нити (треда). Начальные значения для переменных не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«(список)»</em> - содержит перечисление идентификаторов переменных через запятую.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel firstprivate (список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, которые становятся личными для каждой нити (треда) и начальные значения этих копий на каждой нити равны значению одноимённых переменах до входа в параллельную секцию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel shared (список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Переменные, указанные в списке, при входе в параллельную секцию становятся общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel default (shared/none){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указано «<em>shared</em><em>»</em>, то все переменные, объявленные последовательно секции, в параллельной секции будут общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указан «<em>none</em><em>»</em>, то переменные, объявленные в последовательной секции, не определены в параллельной.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel if (условие){…операторы…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение true, то создается параллельная секция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение false, то параллельная секция не создается и операторы, указанные в блоке «<em>операторы</em>» выполняются в последовательной секции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel num_threads (число) {…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>При входе в параллельную секцию будет работать столько тредов (нитей), сколько ядер в параллельном компьютере. Чтобы изменить это количество, в клаузе «<em>num</em><em>_</em><em>threads</em>» указывается необходимое «<em>(число)»</em>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel copyin (список) {…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Задает список переменных, объявленных как «threadprivate», которые при входе в параллельную область инициализируются значениями соответствующих переменных в нити-мастере.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывается, если выше была описана директива «<em>#</em><em>pragma</em><em> </em><em>omp</em><em> </em><em>threadprivate</em><em> (список)». </em>Списки у директивы «<em>threadprivate</em><em>» </em>и клаузы «<em>copyin</em><em>» </em>должны совпадать. &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel reduction (операция: список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывает о выполнении всеми тредами коллективной операции. При входе в параллельную секцию на каждой нити создаются копии переменных, указанных в списке, которые инициализируются согласно операции. Для аддитивных операций инициализируются «0», для мультипликативных – «1». Каждая нить работает со своей копией. Переменные, указанные в списке, должны быть операндами указанной операции. При выходе из параллельной секции указанная операция применяется ко всем копиям на каждой нити. К полученному значению и значению переменных до входа в параллельную секцию применяется эта же операция.</p>\n<!-- /wp:paragraph -->', 'Тема 4. Директивы и клаузы в OpenMP.', '', 'inherit', 'closed', 'closed', '', '195-revision-v1', '', '', '2021-06-09 15:20:31', '2021-06-09 12:20:31', '', 195, 'http://brainfood-project/?p=197', 0, 'revision', '', 0),
(199, 1, '2021-06-09 15:21:56', '2021-06-09 12:21:56', '<!-- wp:paragraph -->\n<p>Для работы с OpenMP используются функции и директивы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Директивы могут иметь клаузы/спецификаторы/опции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>По сути, это специальные служебные слова, позволяющие использовать в программе возможности такой технологии параллельного программирования, как OpenMP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директивы имеют следующий вид:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":196,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-13.png\" alt=\"\" class=\"wp-image-196\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"has-text-align-center\"><strong>Директива создания параллельной секции – <em>#pragma omp parallel [клаузы]</em></strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива указывает начало выполнения параллельной секции в программе. После её объявления код, находящийся в этой директиве будет выполняться параллельно на каждом процессе.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>parallel</em></strong> имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"type\":\"1\"} -->\n<ul type=\"1\"><li><em>#pragma omp parallel private (список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Клауза «<em>private</em><em> (список)» </em>меняет класс переменных, указанных в списке. Они становятся личными (приватными) для каждой нити (треда). Начальные значения для переменных не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«(список)»</em> - содержит перечисление идентификаторов переменных через запятую.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel firstprivate (список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, которые становятся личными для каждой нити (треда) и начальные значения этих копий на каждой нити равны значению одноимённых переменах до входа в параллельную секцию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel shared (список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Переменные, указанные в списке, при входе в параллельную секцию становятся общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel default (shared/none){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указано «<em>shared</em><em>»</em>, то все переменные, объявленные последовательно секции, в параллельной секции будут общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указан «<em>none</em><em>»</em>, то переменные, объявленные в последовательной секции, не определены в параллельной.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel if (условие){…операторы…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение true, то создается параллельная секция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение false, то параллельная секция не создается и операторы, указанные в блоке «<em>операторы</em>» выполняются в последовательной секции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel num_threads (число) {…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>При входе в параллельную секцию будет работать столько тредов (нитей), сколько ядер в параллельном компьютере. Чтобы изменить это количество, в клаузе «<em>num</em><em>_</em><em>threads</em>» указывается необходимое «<em>(число)»</em>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel copyin (список) {…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Задает список переменных, объявленных как «threadprivate», которые при входе в параллельную область инициализируются значениями соответствующих переменных в нити-мастере.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывается, если выше была описана директива «<em>#</em><em>pragma</em><em> </em><em>omp</em><em> </em><em>threadprivate</em><em> (список)». </em>Списки у директивы «<em>threadprivate</em><em>» </em>и клаузы «<em>copyin</em><em>» </em>должны совпадать. &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel reduction (операция: список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывает о выполнении всеми тредами коллективной операции. При входе в параллельную секцию на каждой нити создаются копии переменных, указанных в списке, которые инициализируются согласно операции. Для аддитивных операций инициализируются «0», для мультипликативных – «1». Каждая нить работает со своей копией. Переменные, указанные в списке, должны быть операндами указанной операции. При выходе из параллельной секции указанная операция применяется ко всем копиям на каждой нити. К полученному значению и значению переменных до входа в параллельную секцию применяется эта же операция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->', 'Тема 4. Директивы и клаузы в OpenMP.', '', 'inherit', 'closed', 'closed', '', '195-revision-v1', '', '', '2021-06-09 15:21:56', '2021-06-09 12:21:56', '', 195, 'http://brainfood-project/?p=199', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(200, 1, '2021-06-09 15:22:31', '2021-06-09 12:22:31', '<!-- wp:paragraph -->\n<p>Для работы с OpenMP используются функции и директивы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Директивы могут иметь клаузы/спецификаторы/опции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>По сути, это специальные служебные слова, позволяющие использовать в программе возможности такой технологии параллельного программирования, как OpenMP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директивы имеют следующий вид:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":196,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-13.png\" alt=\"\" class=\"wp-image-196\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"has-text-align-center\"><strong>Директива создания параллельной секции – <em>#pragma omp parallel [клаузы]</em></strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива указывает начало выполнения параллельной секции в программе. После её объявления код, находящийся в этой директиве будет выполняться параллельно на каждом процессе.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>parallel</em></strong> имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"type\":\"1\"} -->\n<ul type=\"1\"><li><em>#pragma omp parallel private (список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":10} -->\n<div style=\"height:10px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Клауза «<em>private</em><em> (список)» </em>меняет класс переменных, указанных в списке. Они становятся личными (приватными) для каждой нити (треда). Начальные значения для переменных не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«(список)»</em> - содержит перечисление идентификаторов переменных через запятую.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel firstprivate (список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, которые становятся личными для каждой нити (треда) и начальные значения этих копий на каждой нити равны значению одноимённых переменах до входа в параллельную секцию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel shared (список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Переменные, указанные в списке, при входе в параллельную секцию становятся общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel default (shared/none){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указано «<em>shared</em><em>»</em>, то все переменные, объявленные последовательно секции, в параллельной секции будут общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указан «<em>none</em><em>»</em>, то переменные, объявленные в последовательной секции, не определены в параллельной.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel if (условие){…операторы…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение true, то создается параллельная секция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение false, то параллельная секция не создается и операторы, указанные в блоке «<em>операторы</em>» выполняются в последовательной секции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel num_threads (число) {…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>При входе в параллельную секцию будет работать столько тредов (нитей), сколько ядер в параллельном компьютере. Чтобы изменить это количество, в клаузе «<em>num</em><em>_</em><em>threads</em>» указывается необходимое «<em>(число)»</em>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel copyin (список) {…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Задает список переменных, объявленных как «threadprivate», которые при входе в параллельную область инициализируются значениями соответствующих переменных в нити-мастере.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывается, если выше была описана директива «<em>#</em><em>pragma</em><em> </em><em>omp</em><em> </em><em>threadprivate</em><em> (список)». </em>Списки у директивы «<em>threadprivate</em><em>» </em>и клаузы «<em>copyin</em><em>» </em>должны совпадать. &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel reduction (операция: список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывает о выполнении всеми тредами коллективной операции. При входе в параллельную секцию на каждой нити создаются копии переменных, указанных в списке, которые инициализируются согласно операции. Для аддитивных операций инициализируются «0», для мультипликативных – «1». Каждая нить работает со своей копией. Переменные, указанные в списке, должны быть операндами указанной операции. При выходе из параллельной секции указанная операция применяется ко всем копиям на каждой нити. К полученному значению и значению переменных до входа в параллельную секцию применяется эта же операция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->', 'Тема 4. Директивы и клаузы в OpenMP.', '', 'inherit', 'closed', 'closed', '', '195-revision-v1', '', '', '2021-06-09 15:22:31', '2021-06-09 12:22:31', '', 195, 'http://brainfood-project/?p=200', 0, 'revision', '', 0),
(201, 1, '2021-06-09 15:22:41', '2021-06-09 12:22:41', '<!-- wp:paragraph -->\n<p>Для работы с OpenMP используются функции и директивы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Директивы могут иметь клаузы/спецификаторы/опции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>По сути, это специальные служебные слова, позволяющие использовать в программе возможности такой технологии параллельного программирования, как OpenMP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директивы имеют следующий вид:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":196,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-13.png\" alt=\"\" class=\"wp-image-196\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"has-text-align-center\"><strong>Директива создания параллельной секции – <em>#pragma omp parallel [клаузы]</em></strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива указывает начало выполнения параллельной секции в программе. После её объявления код, находящийся в этой директиве будет выполняться параллельно на каждом процессе.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>parallel</em></strong> имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"type\":\"1\"} -->\n<ul type=\"1\"><li><em>#pragma omp parallel private (список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":5} -->\n<div style=\"height:5px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Клауза «<em>private</em><em> (список)» </em>меняет класс переменных, указанных в списке. Они становятся личными (приватными) для каждой нити (треда). Начальные значения для переменных не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«(список)»</em> - содержит перечисление идентификаторов переменных через запятую.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel firstprivate (список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, которые становятся личными для каждой нити (треда) и начальные значения этих копий на каждой нити равны значению одноимённых переменах до входа в параллельную секцию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel shared (список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Переменные, указанные в списке, при входе в параллельную секцию становятся общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel default (shared/none){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указано «<em>shared</em><em>»</em>, то все переменные, объявленные последовательно секции, в параллельной секции будут общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указан «<em>none</em><em>»</em>, то переменные, объявленные в последовательной секции, не определены в параллельной.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel if (условие){…операторы…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение true, то создается параллельная секция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение false, то параллельная секция не создается и операторы, указанные в блоке «<em>операторы</em>» выполняются в последовательной секции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel num_threads (число) {…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>При входе в параллельную секцию будет работать столько тредов (нитей), сколько ядер в параллельном компьютере. Чтобы изменить это количество, в клаузе «<em>num</em><em>_</em><em>threads</em>» указывается необходимое «<em>(число)»</em>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel copyin (список) {…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Задает список переменных, объявленных как «threadprivate», которые при входе в параллельную область инициализируются значениями соответствующих переменных в нити-мастере.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывается, если выше была описана директива «<em>#</em><em>pragma</em><em> </em><em>omp</em><em> </em><em>threadprivate</em><em> (список)». </em>Списки у директивы «<em>threadprivate</em><em>» </em>и клаузы «<em>copyin</em><em>» </em>должны совпадать. &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel reduction (операция: список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывает о выполнении всеми тредами коллективной операции. При входе в параллельную секцию на каждой нити создаются копии переменных, указанных в списке, которые инициализируются согласно операции. Для аддитивных операций инициализируются «0», для мультипликативных – «1». Каждая нить работает со своей копией. Переменные, указанные в списке, должны быть операндами указанной операции. При выходе из параллельной секции указанная операция применяется ко всем копиям на каждой нити. К полученному значению и значению переменных до входа в параллельную секцию применяется эта же операция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->', 'Тема 4. Директивы и клаузы в OpenMP.', '', 'inherit', 'closed', 'closed', '', '195-revision-v1', '', '', '2021-06-09 15:22:41', '2021-06-09 12:22:41', '', 195, 'http://brainfood-project/?p=201', 0, 'revision', '', 0),
(202, 1, '2021-06-09 15:22:51', '2021-06-09 12:22:51', '<!-- wp:paragraph -->\n<p>Для работы с OpenMP используются функции и директивы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Директивы могут иметь клаузы/спецификаторы/опции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>По сути, это специальные служебные слова, позволяющие использовать в программе возможности такой технологии параллельного программирования, как OpenMP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директивы имеют следующий вид:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":196,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-13.png\" alt=\"\" class=\"wp-image-196\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"has-text-align-center\"><strong>Директива создания параллельной секции – <em>#pragma omp parallel [клаузы]</em></strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива указывает начало выполнения параллельной секции в программе. После её объявления код, находящийся в этой директиве будет выполняться параллельно на каждом процессе.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>parallel</em></strong> имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"type\":\"1\"} -->\n<ul type=\"1\"><li><em>#pragma omp parallel private (список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":7} -->\n<div style=\"height:7px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Клауза «<em>private</em><em> (список)» </em>меняет класс переменных, указанных в списке. Они становятся личными (приватными) для каждой нити (треда). Начальные значения для переменных не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«(список)»</em> - содержит перечисление идентификаторов переменных через запятую.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel firstprivate (список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, которые становятся личными для каждой нити (треда) и начальные значения этих копий на каждой нити равны значению одноимённых переменах до входа в параллельную секцию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel shared (список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Переменные, указанные в списке, при входе в параллельную секцию становятся общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel default (shared/none){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указано «<em>shared</em><em>»</em>, то все переменные, объявленные последовательно секции, в параллельной секции будут общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указан «<em>none</em><em>»</em>, то переменные, объявленные в последовательной секции, не определены в параллельной.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel if (условие){…операторы…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение true, то создается параллельная секция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение false, то параллельная секция не создается и операторы, указанные в блоке «<em>операторы</em>» выполняются в последовательной секции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel num_threads (число) {…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>При входе в параллельную секцию будет работать столько тредов (нитей), сколько ядер в параллельном компьютере. Чтобы изменить это количество, в клаузе «<em>num</em><em>_</em><em>threads</em>» указывается необходимое «<em>(число)»</em>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel copyin (список) {…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Задает список переменных, объявленных как «threadprivate», которые при входе в параллельную область инициализируются значениями соответствующих переменных в нити-мастере.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывается, если выше была описана директива «<em>#</em><em>pragma</em><em> </em><em>omp</em><em> </em><em>threadprivate</em><em> (список)». </em>Списки у директивы «<em>threadprivate</em><em>» </em>и клаузы «<em>copyin</em><em>» </em>должны совпадать. &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel reduction (операция: список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывает о выполнении всеми тредами коллективной операции. При входе в параллельную секцию на каждой нити создаются копии переменных, указанных в списке, которые инициализируются согласно операции. Для аддитивных операций инициализируются «0», для мультипликативных – «1». Каждая нить работает со своей копией. Переменные, указанные в списке, должны быть операндами указанной операции. При выходе из параллельной секции указанная операция применяется ко всем копиям на каждой нити. К полученному значению и значению переменных до входа в параллельную секцию применяется эта же операция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->', 'Тема 4. Директивы и клаузы в OpenMP.', '', 'inherit', 'closed', 'closed', '', '195-revision-v1', '', '', '2021-06-09 15:22:51', '2021-06-09 12:22:51', '', 195, 'http://brainfood-project/?p=202', 0, 'revision', '', 0),
(203, 1, '2021-06-09 15:23:55', '2021-06-09 12:23:55', '<!-- wp:paragraph -->\n<p>Для работы с OpenMP используются функции и директивы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Директивы могут иметь клаузы/спецификаторы/опции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>По сути, это специальные служебные слова, позволяющие использовать в программе возможности такой технологии параллельного программирования, как OpenMP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директивы имеют следующий вид:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":196,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-13.png\" alt=\"\" class=\"wp-image-196\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"has-text-align-center\"><strong>Директива создания параллельной секции – <em>#pragma omp parallel [клаузы]</em></strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива указывает начало выполнения параллельной секции в программе. После её объявления код, находящийся в этой директиве будет выполняться параллельно на каждом процессе.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>parallel</em></strong> имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp parallel private (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":7} -->\n<div style=\"height:7px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Клауза «<em>private</em><em> (список)» </em>меняет класс переменных, указанных в списке. Они становятся личными (приватными) для каждой нити (треда). Начальные значения для переменных не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«(список)»</em> - содержит перечисление идентификаторов переменных через запятую.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel firstprivate (список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, которые становятся личными для каждой нити (треда) и начальные значения этих копий на каждой нити равны значению одноимённых переменах до входа в параллельную секцию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel shared (список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Переменные, указанные в списке, при входе в параллельную секцию становятся общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel default (shared/none){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указано «<em>shared</em><em>»</em>, то все переменные, объявленные последовательно секции, в параллельной секции будут общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указан «<em>none</em><em>»</em>, то переменные, объявленные в последовательной секции, не определены в параллельной.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel if (условие){…операторы…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение true, то создается параллельная секция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение false, то параллельная секция не создается и операторы, указанные в блоке «<em>операторы</em>» выполняются в последовательной секции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel num_threads (число) {…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>При входе в параллельную секцию будет работать столько тредов (нитей), сколько ядер в параллельном компьютере. Чтобы изменить это количество, в клаузе «<em>num</em><em>_</em><em>threads</em>» указывается необходимое «<em>(число)»</em>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel copyin (список) {…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Задает список переменных, объявленных как «threadprivate», которые при входе в параллельную область инициализируются значениями соответствующих переменных в нити-мастере.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывается, если выше была описана директива «<em>#</em><em>pragma</em><em> </em><em>omp</em><em> </em><em>threadprivate</em><em> (список)». </em>Списки у директивы «<em>threadprivate</em><em>» </em>и клаузы «<em>copyin</em><em>» </em>должны совпадать. &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list -->\n<ul><li><em>#pragma omp parallel reduction (операция: список){…}</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывает о выполнении всеми тредами коллективной операции. При входе в параллельную секцию на каждой нити создаются копии переменных, указанных в списке, которые инициализируются согласно операции. Для аддитивных операций инициализируются «0», для мультипликативных – «1». Каждая нить работает со своей копией. Переменные, указанные в списке, должны быть операндами указанной операции. При выходе из параллельной секции указанная операция применяется ко всем копиям на каждой нити. К полученному значению и значению переменных до входа в параллельную секцию применяется эта же операция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->', 'Тема 4. Директивы и клаузы в OpenMP.', '', 'inherit', 'closed', 'closed', '', '195-revision-v1', '', '', '2021-06-09 15:23:55', '2021-06-09 12:23:55', '', 195, 'http://brainfood-project/?p=203', 0, 'revision', '', 0),
(205, 1, '2021-06-09 15:24:59', '2021-06-09 12:24:59', '<!-- wp:paragraph -->\n<p>Для работы с OpenMP используются функции и директивы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Директивы могут иметь клаузы/спецификаторы/опции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>По сути, это специальные служебные слова, позволяющие использовать в программе возможности такой технологии параллельного программирования, как OpenMP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директивы имеют следующий вид:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":196,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-13.png\" alt=\"\" class=\"wp-image-196\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"has-text-align-center\"><strong>Директива создания параллельной секции – <em>#pragma omp parallel [клаузы]</em></strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива указывает начало выполнения параллельной секции в программе. После её объявления код, находящийся в этой директиве будет выполняться параллельно на каждом процессе.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>parallel</em></strong> имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp parallel private (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":7} -->\n<div style=\"height:7px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Клауза «<em>private</em><em> (список)» </em>меняет класс переменных, указанных в списке. Они становятся личными (приватными) для каждой нити (треда). Начальные значения для переменных не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«(список)»</em> - содержит перечисление идентификаторов переменных через запятую.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><li><em>#pragma omp parallel firstprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, которые становятся личными для каждой нити (треда) и начальные значения этих копий на каждой нити равны значению одноимённых переменах до входа в параллельную секцию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><li><em>#pragma omp parallel shared (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Переменные, указанные в списке, при входе в параллельную секцию становятся общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\"><li><em>#pragma omp parallel default (shared/none){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указано «<em>shared</em><em>»</em>, то все переменные, объявленные последовательно секции, в параллельной секции будут общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указан «<em>none</em><em>»</em>, то переменные, объявленные в последовательной секции, не определены в параллельной.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><li><em>#pragma omp parallel if (условие){…операторы…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение true, то создается параллельная секция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение false, то параллельная секция не создается и операторы, указанные в блоке «<em>операторы</em>» выполняются в последовательной секции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":6} -->\n<ol start=\"6\"><li><em>#pragma omp parallel num_threads (число) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>При входе в параллельную секцию будет работать столько тредов (нитей), сколько ядер в параллельном компьютере. Чтобы изменить это количество, в клаузе «<em>num</em><em>_</em><em>threads</em>» указывается необходимое «<em>(число)»</em>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><li><em>#pragma omp parallel copyin (список) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Задает список переменных, объявленных как «threadprivate», которые при входе в параллельную область инициализируются значениями соответствующих переменных в нити-мастере.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывается, если выше была описана директива «<em>#</em><em>pragma</em><em> </em><em>omp</em><em> </em><em>threadprivate</em><em> (список)». </em>Списки у директивы «<em>threadprivate</em><em>» </em>и клаузы «<em>copyin</em><em>» </em>должны совпадать. &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":8} -->\n<ol start=\"8\"><li><em>#pragma omp parallel reduction (операция: список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывает о выполнении всеми тредами коллективной операции. При входе в параллельную секцию на каждой нити создаются копии переменных, указанных в списке, которые инициализируются согласно операции. Для аддитивных операций инициализируются «0», для мультипликативных – «1». Каждая нить работает со своей копией. Переменные, указанные в списке, должны быть операндами указанной операции. При выходе из параллельной секции указанная операция применяется ко всем копиям на каждой нити. К полученному значению и значению переменных до входа в параллельную секцию применяется эта же операция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->', 'Тема 4. Директивы и клаузы в OpenMP.', '', 'inherit', 'closed', 'closed', '', '195-revision-v1', '', '', '2021-06-09 15:24:59', '2021-06-09 12:24:59', '', 195, 'http://brainfood-project/?p=205', 0, 'revision', '', 0),
(206, 1, '2021-06-09 15:25:44', '2021-06-09 12:25:44', '<!-- wp:paragraph -->\n<p>Для работы с OpenMP используются функции и директивы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Директивы могут иметь клаузы/спецификаторы/опции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>По сути, это специальные служебные слова, позволяющие использовать в программе возможности такой технологии параллельного программирования, как OpenMP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директивы имеют следующий вид:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":196,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-13.png\" alt=\"\" class=\"wp-image-196\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива создания параллельной секции – <em>#pragma omp parallel [клаузы]</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива указывает начало выполнения параллельной секции в программе. После её объявления код, находящийся в этой директиве будет выполняться параллельно на каждом процессе.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>parallel</em></strong> имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp parallel private (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":7} -->\n<div style=\"height:7px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Клауза «<em>private</em><em> (список)» </em>меняет класс переменных, указанных в списке. Они становятся личными (приватными) для каждой нити (треда). Начальные значения для переменных не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«(список)»</em> - содержит перечисление идентификаторов переменных через запятую.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><li><em>#pragma omp parallel firstprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, которые становятся личными для каждой нити (треда) и начальные значения этих копий на каждой нити равны значению одноимённых переменах до входа в параллельную секцию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><li><em>#pragma omp parallel shared (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Переменные, указанные в списке, при входе в параллельную секцию становятся общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\"><li><em>#pragma omp parallel default (shared/none){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указано «<em>shared</em><em>»</em>, то все переменные, объявленные последовательно секции, в параллельной секции будут общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указан «<em>none</em><em>»</em>, то переменные, объявленные в последовательной секции, не определены в параллельной.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><li><em>#pragma omp parallel if (условие){…операторы…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение true, то создается параллельная секция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение false, то параллельная секция не создается и операторы, указанные в блоке «<em>операторы</em>» выполняются в последовательной секции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":6} -->\n<ol start=\"6\"><li><em>#pragma omp parallel num_threads (число) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>При входе в параллельную секцию будет работать столько тредов (нитей), сколько ядер в параллельном компьютере. Чтобы изменить это количество, в клаузе «<em>num</em><em>_</em><em>threads</em>» указывается необходимое «<em>(число)»</em>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><li><em>#pragma omp parallel copyin (список) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Задает список переменных, объявленных как «threadprivate», которые при входе в параллельную область инициализируются значениями соответствующих переменных в нити-мастере.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывается, если выше была описана директива «<em>#</em><em>pragma</em><em> </em><em>omp</em><em> </em><em>threadprivate</em><em> (список)». </em>Списки у директивы «<em>threadprivate</em><em>» </em>и клаузы «<em>copyin</em><em>» </em>должны совпадать. &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":8} -->\n<ol start=\"8\"><li><em>#pragma omp parallel reduction (операция: список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывает о выполнении всеми тредами коллективной операции. При входе в параллельную секцию на каждой нити создаются копии переменных, указанных в списке, которые инициализируются согласно операции. Для аддитивных операций инициализируются «0», для мультипликативных – «1». Каждая нить работает со своей копией. Переменные, указанные в списке, должны быть операндами указанной операции. При выходе из параллельной секции указанная операция применяется ко всем копиям на каждой нити. К полученному значению и значению переменных до входа в параллельную секцию применяется эта же операция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->', 'Тема 4. Директивы и клаузы в OpenMP.', '', 'inherit', 'closed', 'closed', '', '195-revision-v1', '', '', '2021-06-09 15:25:44', '2021-06-09 12:25:44', '', 195, 'http://brainfood-project/?p=206', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(208, 1, '2021-06-09 15:31:04', '2021-06-09 12:31:04', '<!-- wp:paragraph -->\n<p>Для работы с OpenMP используются функции и директивы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Директивы могут иметь клаузы/спецификаторы/опции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>По сути, это специальные служебные слова, позволяющие использовать в программе возможности такой технологии параллельного программирования, как OpenMP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директивы имеют следующий вид:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":196,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-13.png\" alt=\"\" class=\"wp-image-196\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива создания параллельной секции – <em>#pragma omp parallel [клаузы]</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива указывает начало выполнения параллельной секции в программе. После её объявления код, находящийся в этой директиве будет выполняться параллельно на каждом процессе.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>parallel</em></strong> имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp parallel private (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":7} -->\n<div style=\"height:7px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Клауза «<em>private</em><em> (список)» </em>меняет класс переменных, указанных в списке. Они становятся личными (приватными) для каждой нити (треда). Начальные значения для переменных не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«(список)»</em> - содержит перечисление идентификаторов переменных через запятую.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><li><em>#pragma omp parallel firstprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, которые становятся личными для каждой нити (треда) и начальные значения этих копий на каждой нити равны значению одноимённых переменах до входа в параллельную секцию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><li><em>#pragma omp parallel shared (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Переменные, указанные в списке, при входе в параллельную секцию становятся общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\"><li><em>#pragma omp parallel default (shared/none){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указано «<em>shared</em><em>»</em>, то все переменные, объявленные последовательно секции, в параллельной секции будут общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указан «<em>none</em><em>»</em>, то переменные, объявленные в последовательной секции, не определены в параллельной.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><li><em>#pragma omp parallel if (условие){…операторы…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение true, то создается параллельная секция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение false, то параллельная секция не создается и операторы, указанные в блоке «<em>операторы</em>» выполняются в последовательной секции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":6} -->\n<ol start=\"6\"><li><em>#pragma omp parallel num_threads (число) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>При входе в параллельную секцию будет работать столько тредов (нитей), сколько ядер в параллельном компьютере. Чтобы изменить это количество, в клаузе «<em>num</em><em>_</em><em>threads</em>» указывается необходимое «<em>(число)»</em>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><li><em>#pragma omp parallel copyin (список) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Задает список переменных, объявленных как «threadprivate», которые при входе в параллельную область инициализируются значениями соответствующих переменных в нити-мастере.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывается, если выше была описана директива «<em>#</em><em>pragma</em><em> </em><em>omp</em><em> </em><em>threadprivate</em><em> (список)». </em>Списки у директивы «<em>threadprivate</em><em>» </em>и клаузы «<em>copyin</em><em>» </em>должны совпадать. &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":8} -->\n<ol start=\"8\"><li><em>#pragma omp parallel reduction (операция: список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывает о выполнении всеми тредами коллективной операции. При входе в параллельную секцию на каждой нити создаются копии переменных, указанных в списке, которые инициализируются согласно операции. Для аддитивных операций инициализируются «0», для мультипликативных – «1». Каждая нить работает со своей копией. Переменные, указанные в списке, должны быть операндами указанной операции. При выходе из параллельной секции указанная операция применяется ко всем копиям на каждой нити. К полученному значению и значению переменных до входа в параллельную секцию применяется эта же операция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива параллельного выполнения итерации цикла –</strong> <strong><em>#pragma omp for [клаузы] for (…)</em></strong> <strong><em>{…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива распределяет итерации цикла среди потоков, которые будут выполняться одновременно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><em>#pragma omp for [</em><em>клауза</em><em>]</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>for (…)</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>{…}</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Если внутри параллельной секции только одна директива «for», то эти две директивы можно объединить.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>В конце действия директивы «for» существует неявная синхронизация, то есть действие директивы не закончится до тех пор, пока все нити не выполнят свои итерации.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>for</em></strong> имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp for private (список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, начальные значения которых не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><li><em>#pragma omp for firstprivate (список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, начальные значения которых равны значениям одноимённых переменных до входа в этот блок.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><li><em>#pragma omp for lastprivate (список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Переменные, указанные в списке, возвращают своё значение из цикла в одноимённые переменные. Возвращаться будут значения, которые были последними по времени вычисления.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\"><li><em>#pragma omp (ordered/for ordered)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Блок, помеченный данной директивой, будет выполняться последовательно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><li><em>#pragma omp for reduction (операция: список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Для переменных, указанных в списке, создаются копии, которые инициализируются согласно операции. Для аддитивных операций инициализируются «0», для мультипликативных – «1». Переменные, указанные в списке, должны быть операндами указанной операции. При выходе из блока, помеченного этой клаузой, над всеми копиями переменных выполняется операция. Затем указанная операция выполняется над полученным значением и значением переменной до входа в этот блок.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":6} -->\n<ol start=\"6\"><li><em>#pragma omp for nowait</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза снимает неявную синхронизацию. Используя условие «nowait» для цикла можно разрешить основной нити не дожидаться завершения дочерних нитей.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><li><em>#pragma omp for schedule (static/dynamic/runtime/guided) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза позволяет распределить итерации по нитям.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«</em><em>static</em><em> [, </em><em>n</em><em>]» </em>- блочно-циклическое распределение итерации. Если «n» не указано, то каждая нить берёт по одной итерации.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«</em><em>dynamic</em><em> [, </em><em>n</em><em>]» </em>- динамическое распределение итераций по нитям. Каждая нить берёт «n» итераций и выполняет их. Если «n» не указано, то значение принимается равным «1».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«</em><em>runtime</em><em>» </em>- распределение итераций по нитям выполняется по умолчанию, так как это определено в самом компиляторе OpenMP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«</em><em>guided</em><em> [, </em><em>n</em><em>]» </em>- экспоненциальное распределение итераций по нитям. Каждой нити даётся максимальное число итераций и остаток распределяется по нитям, но на каждой нити должно быть не меньше, чем «n» итераций.</p>\n<!-- /wp:paragraph -->', 'Тема 4. Директивы и клаузы в OpenMP.', '', 'inherit', 'closed', 'closed', '', '195-revision-v1', '', '', '2021-06-09 15:31:04', '2021-06-09 12:31:04', '', 195, 'http://brainfood-project/?p=208', 0, 'revision', '', 0),
(210, 1, '2021-06-09 15:33:21', '2021-06-09 12:33:21', '<!-- wp:paragraph -->\n<p>Для работы с OpenMP используются функции и директивы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Директивы могут иметь клаузы/спецификаторы/опции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>По сути, это специальные служебные слова, позволяющие использовать в программе возможности такой технологии параллельного программирования, как OpenMP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директивы имеют следующий вид:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":196,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-13.png\" alt=\"\" class=\"wp-image-196\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива создания параллельной секции – <em>#pragma omp parallel [клаузы]</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива указывает начало выполнения параллельной секции в программе. После её объявления код, находящийся в этой директиве будет выполняться параллельно на каждом процессе.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>parallel</em></strong> имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp parallel private (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":7} -->\n<div style=\"height:7px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Клауза «<em>private</em><em> (список)» </em>меняет класс переменных, указанных в списке. Они становятся личными (приватными) для каждой нити (треда). Начальные значения для переменных не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«(список)»</em> - содержит перечисление идентификаторов переменных через запятую.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><li><em>#pragma omp parallel firstprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, которые становятся личными для каждой нити (треда) и начальные значения этих копий на каждой нити равны значению одноимённых переменах до входа в параллельную секцию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><li><em>#pragma omp parallel shared (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Переменные, указанные в списке, при входе в параллельную секцию становятся общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\"><li><em>#pragma omp parallel default (shared/none){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указано «<em>shared</em><em>»</em>, то все переменные, объявленные последовательно секции, в параллельной секции будут общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указан «<em>none</em><em>»</em>, то переменные, объявленные в последовательной секции, не определены в параллельной.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><li><em>#pragma omp parallel if (условие){…операторы…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение true, то создается параллельная секция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение false, то параллельная секция не создается и операторы, указанные в блоке «<em>операторы</em>» выполняются в последовательной секции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":6} -->\n<ol start=\"6\"><li><em>#pragma omp parallel num_threads (число) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>При входе в параллельную секцию будет работать столько тредов (нитей), сколько ядер в параллельном компьютере. Чтобы изменить это количество, в клаузе «<em>num</em><em>_</em><em>threads</em>» указывается необходимое «<em>(число)»</em>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><li><em>#pragma omp parallel copyin (список) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Задает список переменных, объявленных как «threadprivate», которые при входе в параллельную область инициализируются значениями соответствующих переменных в нити-мастере.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывается, если выше была описана директива «<em>#</em><em>pragma</em><em> </em><em>omp</em><em> </em><em>threadprivate</em><em> (список)». </em>Списки у директивы «<em>threadprivate</em><em>» </em>и клаузы «<em>copyin</em><em>» </em>должны совпадать. &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":8} -->\n<ol start=\"8\"><li><em>#pragma omp parallel reduction (операция: список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывает о выполнении всеми тредами коллективной операции. При входе в параллельную секцию на каждой нити создаются копии переменных, указанных в списке, которые инициализируются согласно операции. Для аддитивных операций инициализируются «0», для мультипликативных – «1». Каждая нить работает со своей копией. Переменные, указанные в списке, должны быть операндами указанной операции. При выходе из параллельной секции указанная операция применяется ко всем копиям на каждой нити. К полученному значению и значению переменных до входа в параллельную секцию применяется эта же операция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива параллельного выполнения итерации цикла –</strong> <strong><em>#pragma omp for [клаузы] for (…)</em></strong> <strong><em>{…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива распределяет итерации цикла среди потоков, которые будут выполняться одновременно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><em>#pragma omp for [</em><em>клауза</em><em>]</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>for (…)</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>{…}</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Если внутри параллельной секции только одна директива «for», то эти две директивы можно объединить.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>В конце действия директивы «for» существует неявная синхронизация, то есть действие директивы не закончится до тех пор, пока все нити не выполнят свои итерации.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>for</em></strong> имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp for private (список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, начальные значения которых не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><li><em>#pragma omp for firstprivate (список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, начальные значения которых равны значениям одноимённых переменных до входа в этот блок.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><li><em>#pragma omp for lastprivate (список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Переменные, указанные в списке, возвращают своё значение из цикла в одноимённые переменные. Возвращаться будут значения, которые были последними по времени вычисления.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\"><li><em>#pragma omp (ordered/for ordered)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Блок, помеченный данной директивой, будет выполняться последовательно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><li><em>#pragma omp for reduction (операция: список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Для переменных, указанных в списке, создаются копии, которые инициализируются согласно операции. Для аддитивных операций инициализируются «0», для мультипликативных – «1». Переменные, указанные в списке, должны быть операндами указанной операции. При выходе из блока, помеченного этой клаузой, над всеми копиями переменных выполняется операция. Затем указанная операция выполняется над полученным значением и значением переменной до входа в этот блок.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":6} -->\n<ol start=\"6\"><li><em>#pragma omp for nowait</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза снимает неявную синхронизацию. Используя условие «nowait» для цикла можно разрешить основной нити не дожидаться завершения дочерних нитей.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><li><em>#pragma omp for schedule (static/dynamic/runtime/guided) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза позволяет распределить итерации по нитям.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><em>«</em><em>static</em><em> [, </em><em>n</em><em>]» </em>- блочно-циклическое распределение итерации. Если «n» не указано, то каждая нить берёт по одной итерации.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«</em><em>dynamic</em><em> [, </em><em>n</em><em>]» </em>- динамическое распределение итераций по нитям. Каждая нить берёт «n» итераций и выполняет их. Если «n» не указано, то значение принимается равным «1».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«</em><em>runtime</em><em>» </em>- распределение итераций по нитям выполняется по умолчанию, так как это определено в самом компиляторе OpenMP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«guided [, n]» </em>- экспоненциальное распределение итераций по нитям. Каждой нити даётся максимальное число итераций и остаток распределяется по нитям, но на каждой нити должно быть не меньше, чем «n» итераций.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива синхронизации потоков –</strong> <strong><em>#pragma omp barrier</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Все нити, обратившиеся к данной директиве, останавливаются и ждут других нитей. Как только все нити обратятся к этой директиве, действие её заканчивается. После выполнения данной директивы все нити снова работают одновременно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Тема 4. Директивы и клаузы в OpenMP.', '', 'inherit', 'closed', 'closed', '', '195-revision-v1', '', '', '2021-06-09 15:33:21', '2021-06-09 12:33:21', '', 195, 'http://brainfood-project/?p=210', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(212, 1, '2021-06-09 15:41:20', '2021-06-09 12:41:20', '<!-- wp:paragraph -->\n<p>Для работы с OpenMP используются функции и директивы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Директивы могут иметь клаузы/спецификаторы/опции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>По сути, это специальные служебные слова, позволяющие использовать в программе возможности такой технологии параллельного программирования, как OpenMP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директивы имеют следующий вид:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":196,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-13.png\" alt=\"\" class=\"wp-image-196\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива создания параллельной секции – <em>#pragma omp parallel [клаузы]</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива указывает начало выполнения параллельной секции в программе. После её объявления код, находящийся в этой директиве будет выполняться параллельно на каждом процессе.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>parallel</em></strong> имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp parallel private (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":7} -->\n<div style=\"height:7px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Клауза «<em>private</em><em> (список)» </em>меняет класс переменных, указанных в списке. Они становятся личными (приватными) для каждой нити (треда). Начальные значения для переменных не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«(список)»</em> - содержит перечисление идентификаторов переменных через запятую.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><li><em>#pragma omp parallel firstprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, которые становятся личными для каждой нити (треда) и начальные значения этих копий на каждой нити равны значению одноимённых переменах до входа в параллельную секцию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><li><em>#pragma omp parallel shared (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Переменные, указанные в списке, при входе в параллельную секцию становятся общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\"><li><em>#pragma omp parallel default (shared/none){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указано «<em>shared</em><em>»</em>, то все переменные, объявленные последовательно секции, в параллельной секции будут общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указан «<em>none</em><em>»</em>, то переменные, объявленные в последовательной секции, не определены в параллельной.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><li><em>#pragma omp parallel if (условие){…операторы…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение true, то создается параллельная секция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение false, то параллельная секция не создается и операторы, указанные в блоке «<em>операторы</em>» выполняются в последовательной секции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":6} -->\n<ol start=\"6\"><li><em>#pragma omp parallel num_threads (число) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>При входе в параллельную секцию будет работать столько тредов (нитей), сколько ядер в параллельном компьютере. Чтобы изменить это количество, в клаузе «<em>num</em><em>_</em><em>threads</em>» указывается необходимое «<em>(число)»</em>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><li><em>#pragma omp parallel copyin (список) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Задает список переменных, объявленных как «threadprivate», которые при входе в параллельную область инициализируются значениями соответствующих переменных в нити-мастере.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывается, если выше была описана директива «<em>#</em><em>pragma</em><em> </em><em>omp</em><em> </em><em>threadprivate</em><em> (список)». </em>Списки у директивы «<em>threadprivate</em><em>» </em>и клаузы «<em>copyin</em><em>» </em>должны совпадать. &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":8} -->\n<ol start=\"8\"><li><em>#pragma omp parallel reduction (операция: список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывает о выполнении всеми тредами коллективной операции. При входе в параллельную секцию на каждой нити создаются копии переменных, указанных в списке, которые инициализируются согласно операции. Для аддитивных операций инициализируются «0», для мультипликативных – «1». Каждая нить работает со своей копией. Переменные, указанные в списке, должны быть операндами указанной операции. При выходе из параллельной секции указанная операция применяется ко всем копиям на каждой нити. К полученному значению и значению переменных до входа в параллельную секцию применяется эта же операция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива параллельного выполнения итерации цикла –</strong> <strong><em>#pragma omp for [клаузы] for (…)</em></strong> <strong><em>{…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива распределяет итерации цикла среди потоков, которые будут выполняться одновременно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><em>#pragma omp for [</em><em>клауза</em><em>]</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>for (…)</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>{…}</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Если внутри параллельной секции только одна директива «for», то эти две директивы можно объединить.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>В конце действия директивы «for» существует неявная синхронизация, то есть действие директивы не закончится до тех пор, пока все нити не выполнят свои итерации.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>for</em></strong> имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp for private (список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, начальные значения которых не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><li><em>#pragma omp for firstprivate (список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, начальные значения которых равны значениям одноимённых переменных до входа в этот блок.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><li><em>#pragma omp for lastprivate (список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Переменные, указанные в списке, возвращают своё значение из цикла в одноимённые переменные. Возвращаться будут значения, которые были последними по времени вычисления.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\"><li><em>#pragma omp (ordered/for ordered)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Блок, помеченный данной директивой, будет выполняться последовательно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><li><em>#pragma omp for reduction (операция: список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Для переменных, указанных в списке, создаются копии, которые инициализируются согласно операции. Для аддитивных операций инициализируются «0», для мультипликативных – «1». Переменные, указанные в списке, должны быть операндами указанной операции. При выходе из блока, помеченного этой клаузой, над всеми копиями переменных выполняется операция. Затем указанная операция выполняется над полученным значением и значением переменной до входа в этот блок.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":6} -->\n<ol start=\"6\"><li><em>#pragma omp for nowait</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза снимает неявную синхронизацию. Используя условие «nowait» для цикла можно разрешить основной нити не дожидаться завершения дочерних нитей.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><li><em>#pragma omp for schedule (static/dynamic/runtime/guided) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза позволяет распределить итерации по нитям.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><em>«</em><em>static</em><em> [, </em><em>n</em><em>]» </em>- блочно-циклическое распределение итерации. Если «n» не указано, то каждая нить берёт по одной итерации.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«</em><em>dynamic</em><em> [, </em><em>n</em><em>]» </em>- динамическое распределение итераций по нитям. Каждая нить берёт «n» итераций и выполняет их. Если «n» не указано, то значение принимается равным «1».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«</em><em>runtime</em><em>» </em>- распределение итераций по нитям выполняется по умолчанию, так как это определено в самом компиляторе OpenMP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«guided [, n]» </em>- экспоненциальное распределение итераций по нитям. Каждой нити даётся максимальное число итераций и остаток распределяется по нитям, но на каждой нити должно быть не меньше, чем «n» итераций.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива синхронизации потоков –</strong> <strong><em>#pragma omp barrier</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Все нити, обратившиеся к данной директиве, останавливаются и ждут других нитей. Как только все нити обратятся к этой директиве, действие её заканчивается. После выполнения данной директивы все нити снова работают одновременно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива выполнение блока нитью мастер –</strong> <strong><em>#pragma omp master {…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данный блок выполняет только нулевой тред (поток). Все остальные треды пропускают его, не дожидаясь завершения работы нулевого треда.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива выполнение независимых блоков –</strong> <strong><em>#pragma omp sections [клауза]</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Все треды, входящие в данный блок, выбирают один из них и выполняют его. Если блоков больше числа тредов, некоторые треды будут выполнять несколько блоков. Если блоков меньше числа тредов, некоторые треды не будут выполнять ничего.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива имеет неявную синхронизацию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Если внутри директивы «parallel» только одна директива «sections», то эти две директивы можно объединить:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><em>#pragma omp parallel</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>{</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>#pragma section</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>{…}</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>}</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>sections</em></strong><strong><em> </em></strong>имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp sections private (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанные в списке, начальные значения которых не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><li><em>#pragma omp sections firstprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанные в списке, начальные значения которых равны значениям одноименных переменных до входа в блок, помеченный данной директивой.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><li><em>#pragma omp sections lastprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанные в списке. При выходе из блока последние по времени вычисления значения переменных из списка присваивается одноимённым переменным.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\"><li><em>#pragma omp sections nowait</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза снимает неявную синхронизацию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><li><em>#pragma omp sections reduction (операция: список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, начальные значения которых проинициализированы согласно операции. Переменные, указанные в списке, должны быть операндами указанной операций. После выхода из блока данная операция применяется ко всем локальным копиям и к начальным значениям переменных до входа в этот блок.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Тема 4. Директивы и клаузы в OpenMP.', '', 'inherit', 'closed', 'closed', '', '195-revision-v1', '', '', '2021-06-09 15:41:20', '2021-06-09 12:41:20', '', 195, 'http://brainfood-project/?p=212', 0, 'revision', '', 0),
(213, 1, '2021-06-09 15:41:53', '2021-06-09 12:41:53', '<!-- wp:paragraph -->\n<p>Для работы с OpenMP используются функции и директивы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Директивы могут иметь клаузы/спецификаторы/опции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>По сути, это специальные служебные слова, позволяющие использовать в программе возможности такой технологии параллельного программирования, как OpenMP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директивы имеют следующий вид:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":196,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-13.png\" alt=\"\" class=\"wp-image-196\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива создания параллельной секции – <em>#pragma omp parallel [клаузы]</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива указывает начало выполнения параллельной секции в программе. После её объявления код, находящийся в этой директиве будет выполняться параллельно на каждом процессе.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>parallel</em></strong> имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp parallel private (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":7} -->\n<div style=\"height:7px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Клауза «<em>private</em><em> (список)» </em>меняет класс переменных, указанных в списке. Они становятся личными (приватными) для каждой нити (треда). Начальные значения для переменных не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«(список)»</em> - содержит перечисление идентификаторов переменных через запятую.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><li><em>#pragma omp parallel firstprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, которые становятся личными для каждой нити (треда) и начальные значения этих копий на каждой нити равны значению одноимённых переменах до входа в параллельную секцию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><li><em>#pragma omp parallel shared (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Переменные, указанные в списке, при входе в параллельную секцию становятся общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\"><li><em>#pragma omp parallel default (shared/none){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указано «<em>shared</em><em>»</em>, то все переменные, объявленные последовательно секции, в параллельной секции будут общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указан «<em>none</em><em>»</em>, то переменные, объявленные в последовательной секции, не определены в параллельной.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><li><em>#pragma omp parallel if (условие){…операторы…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение true, то создается параллельная секция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение false, то параллельная секция не создается и операторы, указанные в блоке «<em>операторы</em>» выполняются в последовательной секции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":6} -->\n<ol start=\"6\"><li><em>#pragma omp parallel num_threads (число) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>При входе в параллельную секцию будет работать столько тредов (нитей), сколько ядер в параллельном компьютере. Чтобы изменить это количество, в клаузе «<em>num</em><em>_</em><em>threads</em>» указывается необходимое «<em>(число)»</em>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><li><em>#pragma omp parallel copyin (список) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Задает список переменных, объявленных как «threadprivate», которые при входе в параллельную область инициализируются значениями соответствующих переменных в нити-мастере.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывается, если выше была описана директива «<em>#</em><em>pragma</em><em> </em><em>omp</em><em> </em><em>threadprivate</em><em> (список)». </em>Списки у директивы «<em>threadprivate</em><em>» </em>и клаузы «<em>copyin</em><em>» </em>должны совпадать. &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":8} -->\n<ol start=\"8\"><li><em>#pragma omp parallel reduction (операция: список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывает о выполнении всеми тредами коллективной операции. При входе в параллельную секцию на каждой нити создаются копии переменных, указанных в списке, которые инициализируются согласно операции. Для аддитивных операций инициализируются «0», для мультипликативных – «1». Каждая нить работает со своей копией. Переменные, указанные в списке, должны быть операндами указанной операции. При выходе из параллельной секции указанная операция применяется ко всем копиям на каждой нити. К полученному значению и значению переменных до входа в параллельную секцию применяется эта же операция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива параллельного выполнения итерации цикла –</strong> <strong><em>#pragma omp for [клаузы] for (…)</em></strong> <strong><em>{…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива распределяет итерации цикла среди потоков, которые будут выполняться одновременно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><em>#pragma omp for [</em><em>клауза</em><em>]</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>for (…)</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>{…}</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Если внутри параллельной секции только одна директива «for», то эти две директивы можно объединить.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>В конце действия директивы «for» существует неявная синхронизация, то есть действие директивы не закончится до тех пор, пока все нити не выполнят свои итерации.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>for</em></strong> имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp for private (список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, начальные значения которых не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><li><em>#pragma omp for firstprivate (список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, начальные значения которых равны значениям одноимённых переменных до входа в этот блок.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><li><em>#pragma omp for lastprivate (список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Переменные, указанные в списке, возвращают своё значение из цикла в одноимённые переменные. Возвращаться будут значения, которые были последними по времени вычисления.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\"><li><em>#pragma omp (ordered/for ordered)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Блок, помеченный данной директивой, будет выполняться последовательно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><li><em>#pragma omp for reduction (операция: список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Для переменных, указанных в списке, создаются копии, которые инициализируются согласно операции. Для аддитивных операций инициализируются «0», для мультипликативных – «1». Переменные, указанные в списке, должны быть операндами указанной операции. При выходе из блока, помеченного этой клаузой, над всеми копиями переменных выполняется операция. Затем указанная операция выполняется над полученным значением и значением переменной до входа в этот блок.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":6} -->\n<ol start=\"6\"><li><em>#pragma omp for nowait</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза снимает неявную синхронизацию. Используя условие «nowait» для цикла можно разрешить основной нити не дожидаться завершения дочерних нитей.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><li><em>#pragma omp for schedule (static/dynamic/runtime/guided) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза позволяет распределить итерации по нитям.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><em>«</em><em>static</em><em> [, </em><em>n</em><em>]» </em>- блочно-циклическое распределение итерации. Если «n» не указано, то каждая нить берёт по одной итерации.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«</em><em>dynamic</em><em> [, </em><em>n</em><em>]» </em>- динамическое распределение итераций по нитям. Каждая нить берёт «n» итераций и выполняет их. Если «n» не указано, то значение принимается равным «1».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«</em><em>runtime</em><em>» </em>- распределение итераций по нитям выполняется по умолчанию, так как это определено в самом компиляторе OpenMP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«guided [, n]» </em>- экспоненциальное распределение итераций по нитям. Каждой нити даётся максимальное число итераций и остаток распределяется по нитям, но на каждой нити должно быть не меньше, чем «n» итераций.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива синхронизации потоков –</strong> <strong><em>#pragma omp barrier</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Все нити, обратившиеся к данной директиве, останавливаются и ждут других нитей. Как только все нити обратятся к этой директиве, действие её заканчивается. После выполнения данной директивы все нити снова работают одновременно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива выполнение блока нитью мастер –</strong> <strong><em>#pragma omp master {…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данный блок выполняет только нулевой тред (поток). Все остальные треды пропускают его, не дожидаясь завершения работы нулевого треда.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива выполнение независимых блоков –</strong> <strong><em>#pragma omp sections [клауза]</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Все треды, входящие в данный блок, выбирают один из них и выполняют его. Если блоков больше числа тредов, некоторые треды будут выполнять несколько блоков. Если блоков меньше числа тредов, некоторые треды не будут выполнять ничего.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива имеет неявную синхронизацию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Если внутри директивы «parallel» только одна директива «sections», то эти две директивы можно объединить:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><em>#pragma omp parallel</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>{</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>#pragma section</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>{…}</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>}</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>sections </em></strong>имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp sections private (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанные в списке, начальные значения которых не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><li><em>#pragma omp sections firstprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанные в списке, начальные значения которых равны значениям одноименных переменных до входа в блок, помеченный данной директивой.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><li><em>#pragma omp sections lastprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанные в списке. При выходе из блока последние по времени вычисления значения переменных из списка присваивается одноимённым переменным.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\"><li><em>#pragma omp sections nowait</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза снимает неявную синхронизацию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><li><em>#pragma omp sections reduction (операция: список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, начальные значения которых проинициализированы согласно операции. Переменные, указанные в списке, должны быть операндами указанной операций. После выхода из блока данная операция применяется ко всем локальным копиям и к начальным значениям переменных до входа в этот блок.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Тема 4. Директивы и клаузы в OpenMP.', '', 'inherit', 'closed', 'closed', '', '195-revision-v1', '', '', '2021-06-09 15:41:53', '2021-06-09 12:41:53', '', 195, 'http://brainfood-project/?p=213', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(215, 1, '2021-06-09 15:50:42', '2021-06-09 12:50:42', '<!-- wp:paragraph -->\n<p>Для работы с OpenMP используются функции и директивы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Директивы могут иметь клаузы/спецификаторы/опции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>По сути, это специальные служебные слова, позволяющие использовать в программе возможности такой технологии параллельного программирования, как OpenMP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директивы имеют следующий вид:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":196,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-13.png\" alt=\"\" class=\"wp-image-196\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива создания параллельной секции – <em>#pragma omp parallel [клаузы]</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива указывает начало выполнения параллельной секции в программе. После её объявления код, находящийся в этой директиве будет выполняться параллельно на каждом процессе.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>parallel</em></strong> имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp parallel private (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":7} -->\n<div style=\"height:7px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Клауза «<em>private</em><em> (список)» </em>меняет класс переменных, указанных в списке. Они становятся личными (приватными) для каждой нити (треда). Начальные значения для переменных не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«(список)»</em> - содержит перечисление идентификаторов переменных через запятую.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><li><em>#pragma omp parallel firstprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, которые становятся личными для каждой нити (треда) и начальные значения этих копий на каждой нити равны значению одноимённых переменах до входа в параллельную секцию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><li><em>#pragma omp parallel shared (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Переменные, указанные в списке, при входе в параллельную секцию становятся общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\"><li><em>#pragma omp parallel default (shared/none){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указано «<em>shared</em><em>»</em>, то все переменные, объявленные последовательно секции, в параллельной секции будут общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указан «<em>none</em><em>»</em>, то переменные, объявленные в последовательной секции, не определены в параллельной.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><li><em>#pragma omp parallel if (условие){…операторы…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение true, то создается параллельная секция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение false, то параллельная секция не создается и операторы, указанные в блоке «<em>операторы</em>» выполняются в последовательной секции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":6} -->\n<ol start=\"6\"><li><em>#pragma omp parallel num_threads (число) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>При входе в параллельную секцию будет работать столько тредов (нитей), сколько ядер в параллельном компьютере. Чтобы изменить это количество, в клаузе «<em>num</em><em>_</em><em>threads</em>» указывается необходимое «<em>(число)»</em>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><li><em>#pragma omp parallel copyin (список) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Задает список переменных, объявленных как «threadprivate», которые при входе в параллельную область инициализируются значениями соответствующих переменных в нити-мастере.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывается, если выше была описана директива «<em>#</em><em>pragma</em><em> </em><em>omp</em><em> </em><em>threadprivate</em><em> (список)». </em>Списки у директивы «<em>threadprivate</em><em>» </em>и клаузы «<em>copyin</em><em>» </em>должны совпадать. &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":8} -->\n<ol start=\"8\"><li><em>#pragma omp parallel reduction (операция: список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывает о выполнении всеми тредами коллективной операции. При входе в параллельную секцию на каждой нити создаются копии переменных, указанных в списке, которые инициализируются согласно операции. Для аддитивных операций инициализируются «0», для мультипликативных – «1». Каждая нить работает со своей копией. Переменные, указанные в списке, должны быть операндами указанной операции. При выходе из параллельной секции указанная операция применяется ко всем копиям на каждой нити. К полученному значению и значению переменных до входа в параллельную секцию применяется эта же операция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива параллельного выполнения итерации цикла –</strong> <strong><em>#pragma omp for [клаузы] for (…)</em></strong> <strong><em>{…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива распределяет итерации цикла среди потоков, которые будут выполняться одновременно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><em>#pragma omp for [</em><em>клауза</em><em>]</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>for (…)</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>{…}</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Если внутри параллельной секции только одна директива «for», то эти две директивы можно объединить.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>В конце действия директивы «for» существует неявная синхронизация, то есть действие директивы не закончится до тех пор, пока все нити не выполнят свои итерации.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>for</em></strong> имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp for private (список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, начальные значения которых не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><li><em>#pragma omp for firstprivate (список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, начальные значения которых равны значениям одноимённых переменных до входа в этот блок.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><li><em>#pragma omp for lastprivate (список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Переменные, указанные в списке, возвращают своё значение из цикла в одноимённые переменные. Возвращаться будут значения, которые были последними по времени вычисления.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\"><li><em>#pragma omp (ordered/for ordered)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Блок, помеченный данной директивой, будет выполняться последовательно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><li><em>#pragma omp for reduction (операция: список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Для переменных, указанных в списке, создаются копии, которые инициализируются согласно операции. Для аддитивных операций инициализируются «0», для мультипликативных – «1». Переменные, указанные в списке, должны быть операндами указанной операции. При выходе из блока, помеченного этой клаузой, над всеми копиями переменных выполняется операция. Затем указанная операция выполняется над полученным значением и значением переменной до входа в этот блок.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":6} -->\n<ol start=\"6\"><li><em>#pragma omp for nowait</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза снимает неявную синхронизацию. Используя условие «nowait» для цикла можно разрешить основной нити не дожидаться завершения дочерних нитей.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><li><em>#pragma omp for schedule (static/dynamic/runtime/guided) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза позволяет распределить итерации по нитям.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><em>«</em><em>static</em><em> [, </em><em>n</em><em>]» </em>- блочно-циклическое распределение итерации. Если «n» не указано, то каждая нить берёт по одной итерации.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«</em><em>dynamic</em><em> [, </em><em>n</em><em>]» </em>- динамическое распределение итераций по нитям. Каждая нить берёт «n» итераций и выполняет их. Если «n» не указано, то значение принимается равным «1».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«</em><em>runtime</em><em>» </em>- распределение итераций по нитям выполняется по умолчанию, так как это определено в самом компиляторе OpenMP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«guided [, n]» </em>- экспоненциальное распределение итераций по нитям. Каждой нити даётся максимальное число итераций и остаток распределяется по нитям, но на каждой нити должно быть не меньше, чем «n» итераций.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива синхронизации потоков –</strong> <strong><em>#pragma omp barrier</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Все нити, обратившиеся к данной директиве, останавливаются и ждут других нитей. Как только все нити обратятся к этой директиве, действие её заканчивается. После выполнения данной директивы все нити снова работают одновременно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива выполнение блока нитью мастер –</strong> <strong><em>#pragma omp master {…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данный блок выполняет только нулевой тред (поток). Все остальные треды пропускают его, не дожидаясь завершения работы нулевого треда.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива выполнение независимых блоков –</strong> <strong><em>#pragma omp sections [клауза]</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Все треды, входящие в данный блок, выбирают один из них и выполняют его. Если блоков больше числа тредов, некоторые треды будут выполнять несколько блоков. Если блоков меньше числа тредов, некоторые треды не будут выполнять ничего.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива имеет неявную синхронизацию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Если внутри директивы «parallel» только одна директива «sections», то эти две директивы можно объединить:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><em>#pragma omp parallel</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>{</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>#pragma section</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>{…}</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>}</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>sections </em></strong>имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp sections private (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанные в списке, начальные значения которых не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><li><em>#pragma omp sections firstprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанные в списке, начальные значения которых равны значениям одноименных переменных до входа в блок, помеченный данной директивой.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><li><em>#pragma omp sections lastprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанные в списке. При выходе из блока последние по времени вычисления значения переменных из списка присваивается одноимённым переменным.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\"><li><em>#pragma omp sections nowait</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза снимает неявную синхронизацию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><li><em>#pragma omp sections reduction (операция: список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, начальные значения которых проинициализированы согласно операции. Переменные, указанные в списке, должны быть операндами указанной операций. После выхода из блока данная операция применяется ко всем локальным копиям и к начальным значениям переменных до входа в этот блок.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива однократного выполнения блока одной нитью –</strong> <strong><em>#pragma omp single [клауза]</em></strong> {...}</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>При обращении к данной директиве только одна из нитей, выбранная случайно, выполняет этот блок. Остальные нити ждут завершения выполнения работы выбранной нити. Возникает неявная синхронизация.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>single </em></strong>имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp single private (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанные в списке, начальные значения которых не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><em>#pragma omp single firstprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанные в списке, начальные значения которых равны значениям одноименных переменных до входа в блок, помеченный данной директивой.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><em>#pragma omp single copyprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>После завершения работы выделенной нити, значения переменных, указанных в списке, возвращаются в одноимённые private переменные на каждой нити.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><em>#pragma omp single nowait</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза снимает неявную синхронизацию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива создания критической секции –</strong> <strong><em>#pragma omp critical(название критической секции) </em></strong>{...}</h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Нити, обратившиеся к данной директиве, выполняют блок по очереди в случайном порядке. То есть все нити параллельной секции выполняют данный блок и в каждый момент времени внутри блока будет только одна нить. Если в программе несколько критических секций, то они должны быть именованы, иметь идентификатор.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива атомарной операции –</strong> <strong><em>#pragma omp atomic {…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>После директивы стоит один оператор, чаще всего оператор присваивания. Нити, обратившиеся к директиве в случайном порядке, последовательно выполняют данный оператор присваивания. Ни один из тредов не может вклиниться в это выражение.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива выравнивания –</strong> <strong><em>#pragma omp flush (список)</em></strong> <strong><em>{…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Нити, обратившиеся к данной директиве, значения переменных, указанных в списке, которые находятся в кэш-памяти, переписывают в общие переменные. То есть после выполнения данной директивы все нити видят одно и то же значение.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива определения класса переменных –</strong> <strong><em>#pragma omp threadprivate (список)</em></strong> <strong><em>{…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Указывается в последовательной секции после объявления переменных из списка и означает, что при открытии параллельной секции указанные переменные станут личными. В этом случае директива «parallel» должна иметь клаузу «copyin», список которой должен совпадать со списком «threadprivate».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива выполнения последовательной части внутри распараллеленного цикла –</strong> <strong><em>#pragma omp ordered</em></strong> <strong><em>{…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Всегда записывается только внутри распараллеленного цикла. При этом у директивы «for» должна быть клауза «ordered».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Тема 4. Директивы и клаузы в OpenMP.', '', 'inherit', 'closed', 'closed', '', '195-revision-v1', '', '', '2021-06-09 15:50:42', '2021-06-09 12:50:42', '', 195, 'http://brainfood-project/?p=215', 0, 'revision', '', 0),
(216, 1, '2021-06-09 15:51:59', '2021-06-09 12:51:59', '<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция определения общего числа тредов –</strong> <strong><em>int omp_get_num_threads();</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Вызывается как в последовательной, так и в параллельной секции и возвращает общее число тредов (целый тип).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция установки необходимого числа тредов – <em>void omp_set_num_threads (int n-threads);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Указывается в последовательной секции при открытии в параллельной секции, в ней будет n-threads нитей. Действия этой функции аналогичны функции «num_threads (число)» директивы «parallel».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения уникального номера треда –</strong> <strong><em>int omp_get_thread_num();</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Вызывается в параллельной секции и возвращает уникальный номер нити, обратившийся к данной функции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения максимального числа тредов –</strong> <strong><em>int omp_get_max_threads();</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция может быть вызвана как в параллельной, так и в последовательной секции и возвращает максимальное допустимое число тредов для данного компилятора.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения числа процессоров, доступных приложению –</strong> <strong><em>int omp_get_num_procs();</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Вызывается как в последовательной, так и в параллельной секции и возвращает число физически существующих процессоров в компьютере.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения секции в программе –</strong> <strong><em>intomp_in_parallel();</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Вызывается как в последовательной, так и в параллельной секции и возвращает 1, если функция вызвана в параллельной секции или 0, если вызвана в последовательной секции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения времени –</strong> <strong><em>double omp_get_wtime();</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Вызывается как в последовательной, так и в параллельной секции и возвращает время в секундах.</p>\n<!-- /wp:paragraph -->', 'Тема 5. Функции в OpenMP.', '', 'publish', 'closed', 'closed', '', 'tema-5-funkcii-v-openmp', '', '', '2021-06-09 16:03:20', '2021-06-09 13:03:20', '', 184, 'http://brainfood-project/?page_id=216', 0, 'page', '', 0),
(217, 1, '2021-06-09 15:51:59', '2021-06-09 12:51:59', '<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция определения общего числа тредов –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int omp_get_num_threads();</em></strong><strong></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Вызывается как в последовательной, так и в параллельной секции и возвращает общее число тредов (целый тип).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция установки необходимого числа тредов –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void omp_set_num_threads (int n-threads);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Указывается в последовательной секции при открытии в параллельной секции, в ней будет n-threads нитей. Действия этой функции аналогичны функции «num_threads (число)» директивы «parallel».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция определения уникального номера треда –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int omp_get_thread_num();</em></strong><strong></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Вызывается в параллельной секции и возвращает уникальный номер нити, обратившийся к данной функции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция определения максимального числа тредов –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int omp_get_max_threads();</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция может быть вызвана как в параллельной, так и в последовательной секции и возвращает максимальное допустимое число тредов для данного компилятора.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция определения числа процессоров, доступных приложению –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int omp_get_num_procs();</em></strong><strong></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Вызывается как в последовательной, так и в параллельной секции и возвращает число физически существующих процессоров в компьютере.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция определения секции в программе –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>omp</em></strong><strong><em>_</em></strong><strong><em>in</em></strong><strong><em>_</em></strong><strong><em>parallel</em></strong><strong><em>();</em></strong><strong></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Вызывается как в последовательной, так и в параллельной секции и возвращает 1, если функция вызвана в параллельной секции или 0, если вызвана в последовательной секции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция определения времени –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>double omp_get_wtime();</em></strong><strong></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Вызывается как в последовательной, так и в параллельной секции и возвращает время в секундах.</p>\n<!-- /wp:paragraph -->', 'Тема 5. Функции в OpenMP.', '', 'inherit', 'closed', 'closed', '', '216-revision-v1', '', '', '2021-06-09 15:51:59', '2021-06-09 12:51:59', '', 216, 'http://brainfood-project/?p=217', 0, 'revision', '', 0),
(218, 1, '2021-06-09 15:52:35', '2021-06-09 12:52:35', '<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция определения общего числа тредов –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int omp_get_num_threads();</em></strong><strong></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Вызывается как в последовательной, так и в параллельной секции и возвращает общее число тредов (целый тип).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция установки необходимого числа тредов –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void omp_set_num_threads (int n-threads);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Указывается в последовательной секции при открытии в параллельной секции, в ней будет n-threads нитей. Действия этой функции аналогичны функции «num_threads (число)» директивы «parallel».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения уникального номера треда –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int omp_get_thread_num();</em></strong><strong></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Вызывается в параллельной секции и возвращает уникальный номер нити, обратившийся к данной функции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения максимального числа тредов –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int omp_get_max_threads();</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция может быть вызвана как в параллельной, так и в последовательной секции и возвращает максимальное допустимое число тредов для данного компилятора.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения числа процессоров, доступных приложению –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int omp_get_num_procs();</em></strong><strong></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Вызывается как в последовательной, так и в параллельной секции и возвращает число физически существующих процессоров в компьютере.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения секции в программе –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>omp</em></strong><strong><em>_</em></strong><strong><em>in</em></strong><strong><em>_</em></strong><strong><em>parallel</em></strong><strong><em>();</em></strong><strong></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Вызывается как в последовательной, так и в параллельной секции и возвращает 1, если функция вызвана в параллельной секции или 0, если вызвана в последовательной секции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения времени –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>double omp_get_wtime();</em></strong><strong></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Вызывается как в последовательной, так и в параллельной секции и возвращает время в секундах.</p>\n<!-- /wp:paragraph -->', 'Тема 5. Функции в OpenMP.', '', 'inherit', 'closed', 'closed', '', '216-revision-v1', '', '', '2021-06-09 15:52:35', '2021-06-09 12:52:35', '', 216, 'http://brainfood-project/?p=218', 0, 'revision', '', 0),
(220, 1, '2021-06-09 15:53:29', '2021-06-09 12:53:29', '<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция определения общего числа тредов –</strong> <strong><em>int omp_get_num_threads();</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Вызывается как в последовательной, так и в параллельной секции и возвращает общее число тредов (целый тип).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция установки необходимого числа тредов – <em>void omp_set_num_threads (int n-threads);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Указывается в последовательной секции при открытии в параллельной секции, в ней будет n-threads нитей. Действия этой функции аналогичны функции «num_threads (число)» директивы «parallel».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения уникального номера треда –</strong> <strong><em>int omp_get_thread_num();</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Вызывается в параллельной секции и возвращает уникальный номер нити, обратившийся к данной функции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения максимального числа тредов –</strong> <strong><em>int omp_get_max_threads();</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция может быть вызвана как в параллельной, так и в последовательной секции и возвращает максимальное допустимое число тредов для данного компилятора.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения числа процессоров, доступных приложению –</strong> <strong><em>int omp_get_num_procs();</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Вызывается как в последовательной, так и в параллельной секции и возвращает число физически существующих процессоров в компьютере.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения секции в программе –</strong> <strong><em>intomp_in_parallel();</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Вызывается как в последовательной, так и в параллельной секции и возвращает 1, если функция вызвана в параллельной секции или 0, если вызвана в последовательной секции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения времени –</strong> <strong><em>double omp_get_wtime();</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Вызывается как в последовательной, так и в параллельной секции и возвращает время в секундах.</p>\n<!-- /wp:paragraph -->', 'Тема 5. Функции в OpenMP.', '', 'inherit', 'closed', 'closed', '', '216-revision-v1', '', '', '2021-06-09 15:53:29', '2021-06-09 12:53:29', '', 216, 'http://brainfood-project/?p=220', 0, 'revision', '', 0),
(221, 1, '2021-06-09 15:54:52', '2021-06-09 12:54:52', '<!-- wp:paragraph -->\n<p>В OpenMP предусмотрены переменные окружения - специальные текстовые переменные в операционной системе, которые хранят, как правило, определённые настройки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Устанавливать значения переменных окружения можно с помощью функции – <strong>void omp_set_dynamic (int number);</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Получать значения переменных окружения можно с помощью функции – <strong>int omp_get_dynamic ();</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Переменные окружения:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":10} -->\n<div style=\"height:10px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_DYNAMIC </strong>- переменная окружения, которая разрешает или запрещает системе динамически менять количество нитей в параллельной секции</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":1} -->\n<div style=\"height:1px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_MAX_ACTIVE_LEVELS </strong>- переменная окружения, которая задаёт максимально допустимое число вложенных параллельных циклов</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":1} -->\n<div style=\"height:1px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_NESTED </strong>- переменная окружения, которая разрешает или запрещает вложенный параллелизм</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":1} -->\n<div style=\"height:1px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_NUM_THREADS </strong>- переменная окружения, которая задает количество нитей (тредов) в параллельной секции</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":1} -->\n<div style=\"height:1px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_SCHEDULE </strong>- переменная окружения, которая определяет распределение итерации при использовании клаузы «schedule (runtime)»</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":1} -->\n<div style=\"height:1px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_THREAD_LIMIT </strong>- переменная окружения, которая определяет максимальное число нитей, допустимых в данной программе</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":10} -->\n<div style=\"height:10px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Почти все компиляторы не позволяют самостоятельно изменять переменные окружения.</p>\n<!-- /wp:paragraph -->', 'Тема 6. Переменные окружения в OpenMP.', '', 'publish', 'closed', 'closed', '', 'tema-6-peremennye-okruzhenija-v-openmp', '', '', '2021-06-09 16:03:26', '2021-06-09 13:03:26', '', 184, 'http://brainfood-project/?page_id=221', 0, 'page', '', 0),
(222, 1, '2021-06-09 15:54:52', '2021-06-09 12:54:52', '<!-- wp:paragraph -->\n<p>В OpenMP предусмотрены переменные окружения - специальные текстовые переменные в операционной системе, которые хранят, как правило, определённые настройки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Устанавливать значения переменных окружения можно с помощью функции – <strong>void omp_set_dynamic (int number);</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Получать значения переменных окружения можно с помощью функции – <strong>int omp_get_dynamic ();</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Переменные окружения:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":10} -->\n<div style=\"height:10px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP</strong><strong>_</strong><strong>DYNAMIC</strong><strong> </strong>- переменная окружения, которая разрешает или запрещает системе динамически менять количество нитей в параллельной секции</li><li><strong>OMP</strong><strong>_</strong><strong>MAX</strong><strong>_</strong><strong>ACTIVE</strong><strong>_</strong><strong>LEVELS</strong><strong> </strong>- переменная окружения, которая задаёт максимально допустимое число вложенных параллельных циклов</li><li><strong>OMP</strong><strong>_</strong><strong>NESTED</strong><strong> </strong>- переменная окружения, которая разрешает или запрещает вложенный параллелизм</li><li><strong>OMP</strong><strong>_</strong><strong>NUM</strong><strong>_</strong><strong>THREADS</strong><strong> </strong>- переменная окружения, которая задает количество нитей (тредов) в параллельной секции</li><li><strong>OMP</strong><strong>_</strong><strong>SCHEDULE</strong><strong> </strong>- переменная окружения, которая определяет распределение итерации при использовании клаузы «schedule (runtime)»</li><li><strong>OMP_THREAD_LIMIT </strong>- переменная окружения, которая определяет максимальное число нитей, допустимых в данной программе</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Почти все компиляторы не позволяют самостоятельно изменять переменные окружения.</p>\n<!-- /wp:paragraph -->', 'Тема 6. Переменные окружения в OpenMP.', '', 'inherit', 'closed', 'closed', '', '221-revision-v1', '', '', '2021-06-09 15:54:52', '2021-06-09 12:54:52', '', 221, 'http://brainfood-project/?p=222', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(224, 1, '2021-06-09 15:55:46', '2021-06-09 12:55:46', '<!-- wp:paragraph -->\n<p>В OpenMP предусмотрены переменные окружения - специальные текстовые переменные в операционной системе, которые хранят, как правило, определённые настройки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Устанавливать значения переменных окружения можно с помощью функции – <strong>void omp_set_dynamic (int number);</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Получать значения переменных окружения можно с помощью функции – <strong>int omp_get_dynamic ();</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Переменные окружения:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":10} -->\n<div style=\"height:10px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_DYNAMIC </strong>- переменная окружения, которая разрешает или запрещает системе динамически менять количество нитей в параллельной секции</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":10} -->\n<div style=\"height:10px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_MAX_ACTIVE_LEVELS </strong>- переменная окружения, которая задаёт максимально допустимое число вложенных параллельных циклов</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":10} -->\n<div style=\"height:10px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_NESTED </strong>- переменная окружения, которая разрешает или запрещает вложенный параллелизм</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":10} -->\n<div style=\"height:10px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_NUM_THREADS </strong>- переменная окружения, которая задает количество нитей (тредов) в параллельной секции</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":10} -->\n<div style=\"height:10px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_SCHEDULE </strong>- переменная окружения, которая определяет распределение итерации при использовании клаузы «schedule (runtime)»</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":10} -->\n<div style=\"height:10px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_THREAD_LIMIT </strong>- переменная окружения, которая определяет максимальное число нитей, допустимых в данной программе</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":10} -->\n<div style=\"height:10px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Почти все компиляторы не позволяют самостоятельно изменять переменные окружения.</p>\n<!-- /wp:paragraph -->', 'Тема 6. Переменные окружения в OpenMP.', '', 'inherit', 'closed', 'closed', '', '221-revision-v1', '', '', '2021-06-09 15:55:46', '2021-06-09 12:55:46', '', 221, 'http://brainfood-project/?p=224', 0, 'revision', '', 0),
(225, 1, '2021-06-09 15:56:27', '2021-06-09 12:56:27', '<!-- wp:paragraph -->\n<p>В OpenMP предусмотрены переменные окружения - специальные текстовые переменные в операционной системе, которые хранят, как правило, определённые настройки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Устанавливать значения переменных окружения можно с помощью функции – <strong>void omp_set_dynamic (int number);</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Получать значения переменных окружения можно с помощью функции – <strong>int omp_get_dynamic ();</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Переменные окружения:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":10} -->\n<div style=\"height:10px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_DYNAMIC </strong>- переменная окружения, которая разрешает или запрещает системе динамически менять количество нитей в параллельной секции</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":5} -->\n<div style=\"height:5px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_MAX_ACTIVE_LEVELS </strong>- переменная окружения, которая задаёт максимально допустимое число вложенных параллельных циклов</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":5} -->\n<div style=\"height:5px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_NESTED </strong>- переменная окружения, которая разрешает или запрещает вложенный параллелизм</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":10} -->\n<div style=\"height:10px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_NUM_THREADS </strong>- переменная окружения, которая задает количество нитей (тредов) в параллельной секции</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":5} -->\n<div style=\"height:5px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_SCHEDULE </strong>- переменная окружения, которая определяет распределение итерации при использовании клаузы «schedule (runtime)»</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":5} -->\n<div style=\"height:5px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_THREAD_LIMIT </strong>- переменная окружения, которая определяет максимальное число нитей, допустимых в данной программе</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":10} -->\n<div style=\"height:10px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Почти все компиляторы не позволяют самостоятельно изменять переменные окружения.</p>\n<!-- /wp:paragraph -->', 'Тема 6. Переменные окружения в OpenMP.', '', 'inherit', 'closed', 'closed', '', '221-revision-v1', '', '', '2021-06-09 15:56:27', '2021-06-09 12:56:27', '', 221, 'http://brainfood-project/?p=225', 0, 'revision', '', 0),
(226, 1, '2021-06-09 15:57:13', '2021-06-09 12:57:13', '<!-- wp:paragraph -->\n<p>В OpenMP предусмотрены переменные окружения - специальные текстовые переменные в операционной системе, которые хранят, как правило, определённые настройки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Устанавливать значения переменных окружения можно с помощью функции – <strong>void omp_set_dynamic (int number);</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Получать значения переменных окружения можно с помощью функции – <strong>int omp_get_dynamic ();</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Переменные окружения:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":10} -->\n<div style=\"height:10px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP</strong><strong>_</strong><strong>DYNAMIC</strong><strong> </strong>- переменная окружения, которая разрешает или запрещает системе динамически менять количество нитей в параллельной секции</li><li><strong>OMP</strong><strong>_</strong><strong>MAX</strong><strong>_</strong><strong>ACTIVE</strong><strong>_</strong><strong>LEVELS</strong><strong> </strong>- переменная окружения, которая задаёт максимально допустимое число вложенных параллельных циклов</li><li><strong>OMP</strong><strong>_</strong><strong>NESTED</strong><strong> </strong>- переменная окружения, которая разрешает или запрещает вложенный параллелизм</li><li><strong>OMP</strong><strong>_</strong><strong>NUM</strong><strong>_</strong><strong>THREADS</strong><strong> </strong>- переменная окружения, которая задает количество нитей (тредов) в параллельной секции</li><li><strong>OMP</strong><strong>_</strong><strong>SCHEDULE</strong><strong> </strong>- переменная окружения, которая определяет распределение итерации при использовании клаузы «schedule (runtime)»</li><li><strong>OMP_THREAD_LIMIT </strong>- переменная окружения, которая определяет максимальное число нитей, допустимых в данной программе</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Почти все компиляторы не позволяют самостоятельно изменять переменные окружения.</p>\n<!-- /wp:paragraph -->', 'Тема 6. Переменные окружения в OpenMP.', '', 'inherit', 'closed', 'closed', '', '221-revision-v1', '', '', '2021-06-09 15:57:13', '2021-06-09 12:57:13', '', 221, 'http://brainfood-project/?p=226', 0, 'revision', '', 0),
(228, 1, '2021-06-09 15:57:54', '2021-06-09 12:57:54', '<!-- wp:paragraph -->\n<p>В OpenMP предусмотрены переменные окружения - специальные текстовые переменные в операционной системе, которые хранят, как правило, определённые настройки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Устанавливать значения переменных окружения можно с помощью функции – <strong>void omp_set_dynamic (int number);</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Получать значения переменных окружения можно с помощью функции – <strong>int omp_get_dynamic ();</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Переменные окружения:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":10} -->\n<div style=\"height:10px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_DYNAMIC </strong>- переменная окружения, которая разрешает или запрещает системе динамически менять количество нитей в параллельной секции</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":5} -->\n<div style=\"height:5px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_MAX_ACTIVE_LEVELS </strong>- переменная окружения, которая задаёт максимально допустимое число вложенных параллельных циклов</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":5} -->\n<div style=\"height:5px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_NESTED </strong>- переменная окружения, которая разрешает или запрещает вложенный параллелизм</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":5} -->\n<div style=\"height:5px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_NUM_THREADS </strong>- переменная окружения, которая задает количество нитей (тредов) в параллельной секции</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":5} -->\n<div style=\"height:5px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_SCHEDULE </strong>- переменная окружения, которая определяет распределение итерации при использовании клаузы «schedule (runtime)»</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":5} -->\n<div style=\"height:5px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_THREAD_LIMIT </strong>- переменная окружения, которая определяет максимальное число нитей, допустимых в данной программе</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":10} -->\n<div style=\"height:10px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Почти все компиляторы не позволяют самостоятельно изменять переменные окружения.</p>\n<!-- /wp:paragraph -->', 'Тема 6. Переменные окружения в OpenMP.', '', 'inherit', 'closed', 'closed', '', '221-revision-v1', '', '', '2021-06-09 15:57:54', '2021-06-09 12:57:54', '', 221, 'http://brainfood-project/?p=228', 0, 'revision', '', 0),
(229, 1, '2021-06-09 15:58:08', '2021-06-09 12:58:08', '<!-- wp:paragraph -->\n<p>В OpenMP предусмотрены переменные окружения - специальные текстовые переменные в операционной системе, которые хранят, как правило, определённые настройки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Устанавливать значения переменных окружения можно с помощью функции – <strong>void omp_set_dynamic (int number);</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Получать значения переменных окружения можно с помощью функции – <strong>int omp_get_dynamic ();</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Переменные окружения:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":10} -->\n<div style=\"height:10px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_DYNAMIC </strong>- переменная окружения, которая разрешает или запрещает системе динамически менять количество нитей в параллельной секции</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":1} -->\n<div style=\"height:1px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_MAX_ACTIVE_LEVELS </strong>- переменная окружения, которая задаёт максимально допустимое число вложенных параллельных циклов</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":5} -->\n<div style=\"height:5px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_NESTED </strong>- переменная окружения, которая разрешает или запрещает вложенный параллелизм</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":5} -->\n<div style=\"height:5px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_NUM_THREADS </strong>- переменная окружения, которая задает количество нитей (тредов) в параллельной секции</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":5} -->\n<div style=\"height:5px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_SCHEDULE </strong>- переменная окружения, которая определяет распределение итерации при использовании клаузы «schedule (runtime)»</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":5} -->\n<div style=\"height:5px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_THREAD_LIMIT </strong>- переменная окружения, которая определяет максимальное число нитей, допустимых в данной программе</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":10} -->\n<div style=\"height:10px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Почти все компиляторы не позволяют самостоятельно изменять переменные окружения.</p>\n<!-- /wp:paragraph -->', 'Тема 6. Переменные окружения в OpenMP.', '', 'inherit', 'closed', 'closed', '', '221-revision-v1', '', '', '2021-06-09 15:58:08', '2021-06-09 12:58:08', '', 221, 'http://brainfood-project/?p=229', 0, 'revision', '', 0),
(230, 1, '2021-06-09 15:58:31', '2021-06-09 12:58:31', '<!-- wp:paragraph -->\n<p>В OpenMP предусмотрены переменные окружения - специальные текстовые переменные в операционной системе, которые хранят, как правило, определённые настройки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Устанавливать значения переменных окружения можно с помощью функции – <strong>void omp_set_dynamic (int number);</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Получать значения переменных окружения можно с помощью функции – <strong>int omp_get_dynamic ();</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Переменные окружения:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":10} -->\n<div style=\"height:10px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_DYNAMIC </strong>- переменная окружения, которая разрешает или запрещает системе динамически менять количество нитей в параллельной секции</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":1} -->\n<div style=\"height:1px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_MAX_ACTIVE_LEVELS </strong>- переменная окружения, которая задаёт максимально допустимое число вложенных параллельных циклов</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":1} -->\n<div style=\"height:1px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_NESTED </strong>- переменная окружения, которая разрешает или запрещает вложенный параллелизм</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":1} -->\n<div style=\"height:1px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_NUM_THREADS </strong>- переменная окружения, которая задает количество нитей (тредов) в параллельной секции</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":1} -->\n<div style=\"height:1px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_SCHEDULE </strong>- переменная окружения, которая определяет распределение итерации при использовании клаузы «schedule (runtime)»</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":1} -->\n<div style=\"height:1px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>OMP_THREAD_LIMIT </strong>- переменная окружения, которая определяет максимальное число нитей, допустимых в данной программе</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":10} -->\n<div style=\"height:10px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Почти все компиляторы не позволяют самостоятельно изменять переменные окружения.</p>\n<!-- /wp:paragraph -->', 'Тема 6. Переменные окружения в OpenMP.', '', 'inherit', 'closed', 'closed', '', '221-revision-v1', '', '', '2021-06-09 15:58:31', '2021-06-09 12:58:31', '', 221, 'http://brainfood-project/?p=230', 0, 'revision', '', 0),
(231, 1, '2021-06-09 16:00:14', '2021-06-09 13:00:14', '<!-- wp:paragraph -->\n<p><strong>В среде «</strong><strong>Visual</strong><strong> </strong><strong>Studio</strong><strong>»:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Проект <strong>-&gt;</strong> Свойства <strong>-&gt;</strong> C/C++ <strong>-&gt; </strong>Язык <strong>-&gt;</strong> Поддержка OMP <strong>-&gt; </strong>Да <strong>-&gt;</strong> Применить <strong>-&gt; </strong>ОК</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>В среде «</strong><strong>Visual</strong><strong> </strong><strong>Studio</strong><strong> 2019 или выше»:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li>Проект <strong>-&gt;</strong> Свойства <strong>-&gt;</strong> C/C++ <strong>-&gt; </strong>Язык <strong>-&gt;</strong> Поддержка OMP <strong>-&gt; </strong>Да <strong>-&gt;</strong> Применить <strong>-&gt; </strong>ОК</li><li>Проект <strong>-&gt;</strong> Свойства <strong>-&gt;</strong> C/C++ <strong>-&gt; </strong>Командная строка <strong>-&gt;</strong> Дополнительные параметры <strong>-&gt;</strong></li><li>Прописать: /Zc:twoPhase- <strong>-&gt;</strong> Применить <strong>-&gt; </strong>ОК</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>В начале файла проекта:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Прописывается заголовочный файл, включающий библиотеку OpenMP: #include &lt;omp.h&gt;</p>\n<!-- /wp:paragraph -->', 'Тема 7. Как подключить OpenMP.', '', 'publish', 'closed', 'closed', '', 'tema-7-kak-podkljuchit-openmp', '', '', '2021-06-09 16:03:32', '2021-06-09 13:03:32', '', 184, 'http://brainfood-project/?page_id=231', 0, 'page', '', 0),
(232, 1, '2021-06-09 16:00:14', '2021-06-09 13:00:14', '<!-- wp:paragraph -->\n<p><strong>В среде «</strong><strong>Visual</strong><strong> </strong><strong>Studio</strong><strong>»:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Проект <strong>-></strong> Свойства <strong>-></strong> C/C++ <strong>-> </strong>Язык <strong>-></strong> Поддержка OMP <strong>-> </strong>Да <strong>-></strong> Применить <strong>-> </strong>ОК</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>В среде «</strong><strong>Visual</strong><strong> </strong><strong>Studio</strong><strong> 2019 или выше»:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li>Проект <strong>-&gt;</strong> Свойства <strong>-&gt;</strong> C/C++ <strong>-&gt; </strong>Язык <strong>-&gt;</strong> Поддержка OMP <strong>-&gt; </strong>Да <strong>-&gt;</strong> Применить <strong>-&gt; </strong>ОК</li><li>Проект <strong>-&gt;</strong> Свойства <strong>-&gt;</strong> C/C++ <strong>-&gt; </strong>Командная строка <strong>-&gt;</strong> Дополнительные параметры <strong>-&gt;</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Прописать: /Zc:twoPhase- <strong>-></strong> Применить <strong>-> </strong>ОК</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>В начале файла проекта:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Прописывается заголовочный файл, включающий библиотеку OpenMP: #include &lt;omp.h&gt;</p>\n<!-- /wp:paragraph -->', 'Тема 7. Как подключить OpenMP.', '', 'inherit', 'closed', 'closed', '', '231-revision-v1', '', '', '2021-06-09 16:00:14', '2021-06-09 13:00:14', '', 231, 'http://brainfood-project/?p=232', 0, 'revision', '', 0),
(233, 1, '2021-06-09 16:00:50', '2021-06-09 13:00:50', '<!-- wp:paragraph -->\n<p><strong>В среде «</strong><strong>Visual</strong><strong> </strong><strong>Studio</strong><strong>»:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Проект <strong>-></strong> Свойства <strong>-></strong> C/C++ <strong>-> </strong>Язык <strong>-></strong> Поддержка OMP <strong>-> </strong>Да <strong>-></strong> Применить <strong>-> </strong>ОК</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>В среде «</strong><strong>Visual</strong><strong> </strong><strong>Studio</strong><strong> 2019 или выше»:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li>Проект <strong>-></strong> Свойства <strong>-></strong> C/C++ <strong>-> </strong>Язык <strong>-></strong> Поддержка OMP <strong>-> </strong>Да <strong>-></strong> Применить <strong>-> </strong>ОК</li><li>Проект <strong>-></strong> Свойства <strong>-></strong> C/C++ <strong>-> </strong>Командная строка <strong>-></strong> Дополнительные параметры <strong>-></strong></li><li>Прописать: /Zc:twoPhase- <strong>-></strong> Применить <strong>-> </strong>ОК</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>В начале файла проекта:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Прописывается заголовочный файл, включающий библиотеку OpenMP: #include &lt;omp.h&gt;</p>\n<!-- /wp:paragraph -->', 'Тема 7. Как подключить OpenMP.', '', 'inherit', 'closed', 'closed', '', '231-revision-v1', '', '', '2021-06-09 16:00:50', '2021-06-09 13:00:50', '', 231, 'http://brainfood-project/?p=233', 0, 'revision', '', 0),
(234, 1, '2021-06-09 16:26:06', '2021-06-09 13:02:21', ' ', '', '', 'publish', 'closed', 'closed', '', '234', '', '', '2021-06-09 16:26:06', '2021-06-09 13:26:06', '', 184, 'http://brainfood-project/?p=234', 8, 'nav_menu_item', '', 0),
(235, 1, '2021-06-09 16:26:06', '2021-06-09 13:02:21', ' ', '', '', 'publish', 'closed', 'closed', '', '235', '', '', '2021-06-09 16:26:06', '2021-06-09 13:26:06', '', 184, 'http://brainfood-project/?p=235', 7, 'nav_menu_item', '', 0),
(236, 1, '2021-06-09 16:26:06', '2021-06-09 13:02:21', ' ', '', '', 'publish', 'closed', 'closed', '', '236', '', '', '2021-06-09 16:26:06', '2021-06-09 13:26:06', '', 184, 'http://brainfood-project/?p=236', 6, 'nav_menu_item', '', 0),
(237, 1, '2021-06-09 16:26:06', '2021-06-09 13:02:21', ' ', '', '', 'publish', 'closed', 'closed', '', '237', '', '', '2021-06-09 16:26:06', '2021-06-09 13:26:06', '', 184, 'http://brainfood-project/?p=237', 5, 'nav_menu_item', '', 0),
(238, 1, '2021-06-09 16:26:06', '2021-06-09 13:02:21', ' ', '', '', 'publish', 'closed', 'closed', '', '238', '', '', '2021-06-09 16:26:06', '2021-06-09 13:26:06', '', 184, 'http://brainfood-project/?p=238', 4, 'nav_menu_item', '', 0),
(239, 1, '2021-06-09 16:26:06', '2021-06-09 13:02:21', ' ', '', '', 'publish', 'closed', 'closed', '', '239', '', '', '2021-06-09 16:26:06', '2021-06-09 13:26:06', '', 184, 'http://brainfood-project/?p=239', 3, 'nav_menu_item', '', 0),
(240, 1, '2021-06-09 16:26:06', '2021-06-09 13:02:20', ' ', '', '', 'publish', 'closed', 'closed', '', '240', '', '', '2021-06-09 16:26:06', '2021-06-09 13:26:06', '', 184, 'http://brainfood-project/?p=240', 2, 'nav_menu_item', '', 0),
(241, 1, '2021-06-09 16:02:52', '2021-06-09 13:02:52', '<!-- wp:paragraph -->\n<p><strong>Технология OpenMP</strong> (Open Multi Processor) – предназначена для систем с общей разделяемой памятью.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Thread (поток/нить/тред)</strong> – код программы, выполняемый на одном ядре. Все потоки имеют доступ к общей разделяемой памяти, то есть могут записывать в неё и считывать из неё данные.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Последовательная секция </strong>– часть программы, только одним потоком.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Параллельная секция </strong>– часть программы, выполняющаяся каждым потоком одновременно с другими потоками.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4><strong>Схема «Fork-Join»:</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":188,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-11.png\" alt=\"\" class=\"wp-image-188\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>При старте OpenMP программы стартует последовательная секция, которую выполняет нить с номером 0 – «master thread».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>В точке «Fork» к нити «master thread» дополняются еще N-1 нить и начинает работать параллельная секция, в которой работает N - нитей.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>В точке «Join» «master thread» ожидает выполнения всех остальных нитей и продолжает работу.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Таких точек «Fork-Join» в программе может быть столько, сколько необходимо программисту. Заканчивает OpenMP программу всегда последовательная секция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->', 'Тема 1. Основные понятия OpenMp.', '', 'inherit', 'closed', 'closed', '', '187-revision-v1', '', '', '2021-06-09 16:02:52', '2021-06-09 13:02:52', '', 187, 'http://brainfood-project/?p=241', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(242, 1, '2021-06-09 16:03:14', '2021-06-09 13:03:14', '<!-- wp:paragraph -->\n<p>Для работы с OpenMP используются функции и директивы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Директивы могут иметь клаузы/спецификаторы/опции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>По сути, это специальные служебные слова, позволяющие использовать в программе возможности такой технологии параллельного программирования, как OpenMP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директивы имеют следующий вид:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":196,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-13.png\" alt=\"\" class=\"wp-image-196\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива создания параллельной секции – <em>#pragma omp parallel [клаузы]</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива указывает начало выполнения параллельной секции в программе. После её объявления код, находящийся в этой директиве будет выполняться параллельно на каждом процессе.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>parallel</em></strong> имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp parallel private (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":7} -->\n<div style=\"height:7px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Клауза «<em>private</em><em> (список)» </em>меняет класс переменных, указанных в списке. Они становятся личными (приватными) для каждой нити (треда). Начальные значения для переменных не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«(список)»</em> - содержит перечисление идентификаторов переменных через запятую.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><li><em>#pragma omp parallel firstprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, которые становятся личными для каждой нити (треда) и начальные значения этих копий на каждой нити равны значению одноимённых переменах до входа в параллельную секцию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><li><em>#pragma omp parallel shared (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Переменные, указанные в списке, при входе в параллельную секцию становятся общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\"><li><em>#pragma omp parallel default (shared/none){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указано «<em>shared</em><em>»</em>, то все переменные, объявленные последовательно секции, в параллельной секции будут общими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если указан «<em>none</em><em>»</em>, то переменные, объявленные в последовательной секции, не определены в параллельной.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><li><em>#pragma omp parallel if (условие){…операторы…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение true, то создается параллельная секция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если условие принимает значение false, то параллельная секция не создается и операторы, указанные в блоке «<em>операторы</em>» выполняются в последовательной секции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":6} -->\n<ol start=\"6\"><li><em>#pragma omp parallel num_threads (число)&nbsp;{…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>При входе в параллельную секцию будет работать столько тредов (нитей), сколько ядер в параллельном компьютере. Чтобы изменить это количество, в клаузе «<em>num</em><em>_</em><em>threads</em>» указывается необходимое «<em>(число)»</em>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><li><em>#pragma omp parallel copyin (список)&nbsp;{…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Задает список переменных, объявленных как «threadprivate», которые при входе в параллельную область инициализируются значениями соответствующих переменных в нити-мастере.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывается, если выше была описана директива «<em>#</em><em>pragma</em><em> </em><em>omp</em><em> </em><em>threadprivate</em><em> (список)». </em>Списки у директивы «<em>threadprivate</em><em>» </em>и клаузы «<em>copyin</em><em>» </em>должны совпадать. &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"start\":8} -->\n<ol start=\"8\"><li><em>#pragma omp parallel reduction (операция: список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза указывает о выполнении всеми тредами коллективной операции. При входе в параллельную секцию на каждой нити создаются копии переменных, указанных в списке, которые инициализируются согласно операции. Для аддитивных операций инициализируются «0», для мультипликативных – «1». Каждая нить работает со своей копией. Переменные, указанные в списке, должны быть операндами указанной операции. При выходе из параллельной секции указанная операция применяется ко всем копиям на каждой нити. К полученному значению и значению переменных до входа в параллельную секцию применяется эта же операция.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива параллельного выполнения итерации цикла –</strong> <strong><em>#pragma omp for [клаузы] for (…)</em></strong> <strong><em>{…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива распределяет итерации цикла среди потоков, которые будут выполняться одновременно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><em>#pragma omp for [</em><em>клауза</em><em>]</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>for (…)</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>{…}</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Если внутри параллельной секции только одна директива «for», то эти две директивы можно объединить.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>В конце действия директивы «for» существует неявная синхронизация, то есть действие директивы не закончится до тех пор, пока все нити не выполнят свои итерации.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>for</em></strong> имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp for private (список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, начальные значения которых не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><li><em>#pragma omp for firstprivate (список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, начальные значения которых равны значениям одноимённых переменных до входа в этот блок.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><li><em>#pragma omp for lastprivate (список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Переменные, указанные в списке, возвращают своё значение из цикла в одноимённые переменные. Возвращаться будут значения, которые были последними по времени вычисления.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\"><li><em>#pragma omp (ordered/for ordered)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Блок, помеченный данной директивой, будет выполняться последовательно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><li><em>#pragma omp for reduction (операция: список)</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Для переменных, указанных в списке, создаются копии, которые инициализируются согласно операции. Для аддитивных операций инициализируются «0», для мультипликативных – «1». Переменные, указанные в списке, должны быть операндами указанной операции. При выходе из блока, помеченного этой клаузой, над всеми копиями переменных выполняется операция. Затем указанная операция выполняется над полученным значением и значением переменной до входа в этот блок.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":6} -->\n<ol start=\"6\"><li><em>#pragma omp for nowait</em> <em>for (…) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза снимает неявную синхронизацию. Используя условие «nowait» для цикла можно разрешить основной нити не дожидаться завершения дочерних нитей.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><li><em>#pragma omp for schedule (static/dynamic/runtime/guided) {…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза позволяет распределить итерации по нитям.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><em>«</em><em>static</em><em> [, </em><em>n</em><em>]» </em>- блочно-циклическое распределение итерации. Если «n» не указано, то каждая нить берёт по одной итерации.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«</em><em>dynamic</em><em> [, </em><em>n</em><em>]» </em>- динамическое распределение итераций по нитям. Каждая нить берёт «n» итераций и выполняет их. Если «n» не указано, то значение принимается равным «1».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«</em><em>runtime</em><em>» </em>- распределение итераций по нитям выполняется по умолчанию, так как это определено в самом компиляторе OpenMP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>«guided [, n]» </em>- экспоненциальное распределение итераций по нитям. Каждой нити даётся максимальное число итераций и остаток распределяется по нитям, но на каждой нити должно быть не меньше, чем «n» итераций.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива синхронизации потоков –</strong> <strong><em>#pragma omp barrier</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Все нити, обратившиеся к данной директиве, останавливаются и ждут других нитей. Как только все нити обратятся к этой директиве, действие её заканчивается. После выполнения данной директивы все нити снова работают одновременно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива выполнение блока нитью мастер –</strong> <strong><em>#pragma omp master {…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данный блок выполняет только нулевой тред (поток). Все остальные треды пропускают его, не дожидаясь завершения работы нулевого треда.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива выполнение независимых блоков –</strong> <strong><em>#pragma omp sections [клауза]</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Все треды, входящие в данный блок, выбирают один из них и выполняют его. Если блоков больше числа тредов, некоторые треды будут выполнять несколько блоков. Если блоков меньше числа тредов, некоторые треды не будут выполнять ничего.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная директива имеет неявную синхронизацию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Если внутри директивы «parallel» только одна директива «sections», то эти две директивы можно объединить:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><em>#pragma omp parallel</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>{</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>#pragma section</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>{…}</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>}</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>sections </em></strong>имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp sections private (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанные в списке, начальные значения которых не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><li><em>#pragma omp sections firstprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанные в списке, начальные значения которых равны значениям одноименных переменных до входа в блок, помеченный данной директивой.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><li><em>#pragma omp sections lastprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанные в списке. При выходе из блока последние по времени вычисления значения переменных из списка присваивается одноимённым переменным.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\"><li><em>#pragma omp sections nowait</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза снимает неявную синхронизацию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><li><em>#pragma omp sections reduction (операция: список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанных в списке, начальные значения которых проинициализированы согласно операции. Переменные, указанные в списке, должны быть операндами указанной операций. После выхода из блока данная операция применяется ко всем локальным копиям и к начальным значениям переменных до входа в этот блок.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива однократного выполнения блока одной нитью –</strong> <strong><em>#pragma omp single [клауза]</em></strong> {...}</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>При обращении к данной директиве только одна из нитей, выбранная случайно, выполняет этот блок. Остальные нити ждут завершения выполнения работы выбранной нити. Возникает неявная синхронизация.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Директива <strong><em>single </em></strong>имеет следующие клаузы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><em>#pragma omp single private (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанные в списке, начальные значения которых не определены.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><em>#pragma omp single firstprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>На каждой нити создаются копии переменных, указанные в списке, начальные значения которых равны значениям одноименных переменных до входа в блок, помеченный данной директивой.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><em>#pragma omp single copyprivate (список){…}</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>После завершения работы выделенной нити, значения переменных, указанных в списке, возвращаются в одноимённые private переменные на каждой нити.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><em>#pragma omp single nowait</em></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Данная клауза снимает неявную синхронизацию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива создания критической секции –</strong> <strong><em>#pragma omp critical(название критической секции) </em></strong>{...}</h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Нити, обратившиеся к данной директиве, выполняют блок по очереди в случайном порядке. То есть все нити параллельной секции выполняют данный блок и в каждый момент времени внутри блока будет только одна нить. Если в программе несколько критических секций, то они должны быть именованы, иметь идентификатор.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива атомарной операции –</strong> <strong><em>#pragma omp atomic {…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>После директивы стоит один оператор, чаще всего оператор присваивания. Нити, обратившиеся к директиве в случайном порядке, последовательно выполняют данный оператор присваивания. Ни один из тредов не может вклиниться в это выражение.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива выравнивания –</strong> <strong><em>#pragma omp flush (список)</em></strong> <strong><em>{…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Нити, обратившиеся к данной директиве, значения переменных, указанных в списке, которые находятся в кэш-памяти, переписывают в общие переменные. То есть после выполнения данной директивы все нити видят одно и то же значение.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива определения класса переменных –</strong> <strong><em>#pragma omp threadprivate (список)</em></strong> <strong><em>{…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Указывается в последовательной секции после объявления переменных из списка и означает, что при открытии параллельной секции указанные переменные станут личными. В этом случае директива «parallel» должна иметь клаузу «copyin», список которой должен совпадать со списком «threadprivate».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Директива выполнения последовательной части внутри распараллеленного цикла –</strong> <strong><em>#pragma omp ordered</em></strong> <strong><em>{…}</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Всегда записывается только внутри распараллеленного цикла. При этом у директивы «for» должна быть клауза «ordered».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Тема 4. Директивы и клаузы в OpenMP.', '', 'inherit', 'closed', 'closed', '', '195-revision-v1', '', '', '2021-06-09 16:03:14', '2021-06-09 13:03:14', '', 195, 'http://brainfood-project/?p=242', 0, 'revision', '', 0),
(243, 1, '2021-06-09 16:03:32', '2021-06-09 13:03:32', '<!-- wp:paragraph -->\n<p><strong>В среде «</strong><strong>Visual</strong><strong> </strong><strong>Studio</strong><strong>»:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Проект <strong>-&gt;</strong> Свойства <strong>-&gt;</strong> C/C++ <strong>-&gt; </strong>Язык <strong>-&gt;</strong> Поддержка OMP <strong>-&gt; </strong>Да <strong>-&gt;</strong> Применить <strong>-&gt; </strong>ОК</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>В среде «</strong><strong>Visual</strong><strong> </strong><strong>Studio</strong><strong> 2019 или выше»:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li>Проект <strong>-&gt;</strong> Свойства <strong>-&gt;</strong> C/C++ <strong>-&gt; </strong>Язык <strong>-&gt;</strong> Поддержка OMP <strong>-&gt; </strong>Да <strong>-&gt;</strong> Применить <strong>-&gt; </strong>ОК</li><li>Проект <strong>-&gt;</strong> Свойства <strong>-&gt;</strong> C/C++ <strong>-&gt; </strong>Командная строка <strong>-&gt;</strong> Дополнительные параметры <strong>-&gt;</strong></li><li>Прописать: /Zc:twoPhase- <strong>-&gt;</strong> Применить <strong>-&gt; </strong>ОК</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>В начале файла проекта:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Прописывается заголовочный файл, включающий библиотеку OpenMP: #include &lt;omp.h&gt;</p>\n<!-- /wp:paragraph -->', 'Тема 7. Как подключить OpenMP.', '', 'inherit', 'closed', 'closed', '', '231-revision-v1', '', '', '2021-06-09 16:03:32', '2021-06-09 13:03:32', '', 231, 'http://brainfood-project/?p=243', 0, 'revision', '', 0),
(244, 1, '2021-06-09 16:23:16', '2021-06-09 13:23:16', '', 'Модуль 2. Технология параллельного программирования MPI', '', 'publish', 'closed', 'closed', '', 'modul-2-tehnologija-parallelnogo-programmirovanija-mpi', '', '', '2021-06-09 17:48:05', '2021-06-09 14:48:05', '', 0, 'http://brainfood-project/?page_id=244', 0, 'page', '', 0),
(245, 1, '2021-06-09 16:23:16', '2021-06-09 13:23:16', '', 'Модуль 2. Технология параллельного программирования MPI', '', 'inherit', 'closed', 'closed', '', '244-revision-v1', '', '', '2021-06-09 16:23:16', '2021-06-09 13:23:16', '', 244, 'http://brainfood-project/?p=245', 0, 'revision', '', 0),
(247, 1, '2021-06-09 17:44:08', '2021-06-09 13:26:16', ' ', '', '', 'publish', 'closed', 'closed', '', '247', '', '', '2021-06-09 17:44:08', '2021-06-09 14:44:08', '', 0, 'http://brainfood-project/?p=247', 8, 'nav_menu_item', '', 0),
(248, 1, '2021-06-09 16:28:00', '2021-06-09 13:28:00', '<!-- wp:paragraph -->\n<p><strong>Технология MPI</strong> (Message Passing Interface) – предназначена для систем с общей разделяемой памятью.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Идея технологии MPI состоит в распределении задачи по процессам компьютера, где каждый из процессов параллельно с другими процессами будет выполнять свою задачу. Такой подход к решаемой задачи дает существенное ускорение её решению.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Процесс</strong> – это выполнение программы на одном процессоре, причём не важно, имеются ли там параллельные ветви или это последовательный код.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Группа процессов</strong> – это совокупность процессов, каждый из которых имеет уникальный номер, это целое общее число от 0 до «size -1», где «size» - общее число процессов в группе.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Параллельная секция - </strong>часть программы, выполняющаяся каждым процессом одновременно с другими процессами. Причем каждый процесс может выполнять свой собственный код.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Сообщение</strong> – это набор данных определенного типа.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Коммуникатор</strong> – это коммуникационная среда передачи и синхронизации сообщений. При старте MPI программы автоматически стартует группа с принадлежащим ей коммуникатором «MPI_COMM_WORLD». Процессы связаны внутри коммуникатора между собой в топологии клика – то есть все со всеми.</p>\n<!-- /wp:paragraph -->', 'Тема 1. Основные понятия MPI.', '', 'publish', 'closed', 'closed', '', 'tema-1-osnovnye-ponjatija-mpi', '', '', '2021-06-09 17:47:54', '2021-06-09 14:47:54', '', 244, 'http://brainfood-project/?page_id=248', 0, 'page', '', 0),
(249, 1, '2021-06-09 16:28:00', '2021-06-09 13:28:00', '<!-- wp:paragraph -->\n<p><strong>Технология MPI</strong> (Message Passing Interface) – предназначена для систем с общей разделяемой памятью.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Идея технологии MPI состоит в распределении задачи по процессам компьютера, где каждый из процессов параллельно с другими процессами будет выполнять свою задачу. Такой подход к решаемой задачи дает существенное ускорение её решению.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Процесс</strong> – это выполнение программы на одном процессоре, причём не важно, имеются ли там параллельные ветви или это последовательный код.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Группа процессов</strong> – это совокупность процессов, каждый из которых имеет уникальный номер, это целое общее число от 0 до «size -1», где «size» - общее число процессов в группе.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Параллельная секция - </strong>часть программы, выполняющаяся каждым процессом одновременно с другими процессами. Причем каждый процесс может выполнять свой собственный код.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Сообщение</strong> – это набор данных определенного типа.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Коммуникатор</strong> – это коммуникационная среда передачи и синхронизации сообщений. При старте MPI программы автоматически стартует группа с принадлежащим ей коммуникатором «MPI_COMM_WORLD». Процессы связаны внутри коммуникатора между собой в топологии клика – то есть все со всеми.</p>\n<!-- /wp:paragraph -->', 'Тема 1. Основные понятия MPI.', '', 'inherit', 'closed', 'closed', '', '248-revision-v1', '', '', '2021-06-09 16:28:00', '2021-06-09 13:28:00', '', 248, 'http://brainfood-project/?p=249', 0, 'revision', '', 0),
(250, 1, '2021-06-09 16:29:27', '2021-06-09 13:29:27', '<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция инициализации параллельной секции –</strong> <strong><em>int MPI_Init(int *argv, char **argc);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>При вызове данной функции создаётся всеобъемлющая группа, инициализируются константы, структуры MPI. После выполнения данной функции доступна работа с параллельными функциями технологии MPI.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Сложный вид аргументов функции обусловлен тем, что в процессор передаётся информация командной строки, в которой указывается общее число процессов, занятых в каждой задаче.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция закрытия параллельной секции –</strong> <strong><em>int MPI_Finalize();</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, завершает параллельную секцию. После выполнения данной функции никакое обращение к «MPI_ Init();» невозможно</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения общего числа процессов в группе –</strong> <strong><em>int MPI_Comm_size(MPI_Comm comm, int *size);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong> <strong><em>comm</em></strong><strong><em> </em></strong>– коммуникатор системного типа «MPI_Comm», связанный с группой, в которой находятся процессы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int *size</em></strong> – адрес переменной целого типа, куда будет возвращено общее число процессов в группе с коммуникатором «comm».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, в переменную <strong><em>size</em></strong> записывает общее число процессов в группе с коммуникатором <strong><em>comm</em></strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения уникального номера процесса –</strong> <strong><em>int MPI_Comm_rank(MPI_Comm comm, int *rank);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong> <strong><em>comm</em></strong><strong><em> </em></strong>– коммуникатор системного типа «MPI_Comm», связанный с группой, в которой находятся процессы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int *rank</em></strong> – адрес переменной целого типа, куда будет возвращен уникальный номер процесса, обратившийся к данной функции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, в переменную <strong><em>rank</em></strong> записывает свой собственный уникальный номер, в котором имеется целое число от 0 до «size-1», т.к. нумерация процессов начинается с 0.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения времени –</strong> <strong><em>double MPI_Wtime();</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция возвращает время в секундах относительно некоторого момента времени, произошедшего в прошлом. Гарантируется, что во время выполнения программы этот момент не изменится.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Для определения времени вычислений в переменные типа double записываются значения времени в момент вызова данной функции до начала вычислений и после вычислений. Разность между двумя переменными будет означать время вычислений.</p>\n<!-- /wp:paragraph -->', 'Тема 2. Основные функции MPI.', '', 'publish', 'closed', 'closed', '', 'tema-2-osnovnye-funkcii-mpi', '', '', '2021-06-09 17:48:11', '2021-06-09 14:48:11', '', 244, 'http://brainfood-project/?page_id=250', 0, 'page', '', 0),
(251, 1, '2021-06-09 16:29:27', '2021-06-09 13:29:27', '<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция инициализации параллельной секции –</strong> <strong><em>int MPI_Init(int *argv, char **argc);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>При вызове данной функции создаётся всеобъемлющая группа, инициализируются константы, структуры MPI. После выполнения данной функции доступна работа с параллельными функциями технологии MPI.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Сложный вид аргументов функции обусловлен тем, что в процессор передаётся информация командной строки, в которой указывается общее число процессов, занятых в каждой задаче.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция закрытия параллельной секции –</strong> <strong><em>int MPI_Finalize();</em></strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, завершает параллельную секцию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>После выполнения данной функции никакое обращение к «MPI_ Init();» невозможно</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция определения общего числа процессов в группе –</strong> <strong><em>int MPI_Comm_size(MPI_Comm comm, int *size);</em></strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong> <strong><em>comm</em></strong><strong><em> </em></strong>– коммуникатор системного типа «MPI_Comm», связанный с группой, в которой находятся процессы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>size</em></strong> – адрес переменной целого типа, куда будет возвращено общее число процессов в группе с коммуникатором «comm».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, в переменную <strong><em>size</em></strong> записывает общее число процессов в группе с коммуникатором <strong><em>comm</em></strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция определения уникального номера процесса –</strong> <strong><em>int MPI_Comm_rank(MPI_Comm comm, int *rank);</em></strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong> <strong><em>comm</em></strong><strong><em> </em></strong>– коммуникатор системного типа «MPI_Comm», связанный с группой, в которой находятся процессы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>*</em></strong><strong><em>rank</em></strong> – адрес переменной целого типа, куда будет возвращен уникальный номер процесса, обратившийся к данной функции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, в переменную <strong><em>rank</em></strong> записывает свой собственный уникальный номер, в котором имеется целое число от 0 до «size-1», т.к. нумерация процессов начинается с 0.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция определения времени –</strong> <strong><em>double MPI_Wtime();</em></strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция возвращает время в секундах относительно некоторого момента времени, произошедшего в прошлом. Гарантируется, что во время выполнения программы этот момент не изменится.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Для определения времени вычислений в переменные типа double записываются значения времени в момент вызова данной функции до начала вычислений и после вычислений. Разность между двумя переменными будет означать время вычислений.</p>\n<!-- /wp:paragraph -->', 'Тема 2. Основные функции MPI.', '', 'inherit', 'closed', 'closed', '', '250-revision-v1', '', '', '2021-06-09 16:29:27', '2021-06-09 13:29:27', '', 250, 'http://brainfood-project/?p=251', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(252, 1, '2021-06-09 16:29:51', '2021-06-09 13:29:51', '<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция инициализации параллельной секции –</strong> <strong><em>int MPI_Init(int *argv, char **argc);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>При вызове данной функции создаётся всеобъемлющая группа, инициализируются константы, структуры MPI. После выполнения данной функции доступна работа с параллельными функциями технологии MPI.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Сложный вид аргументов функции обусловлен тем, что в процессор передаётся информация командной строки, в которой указывается общее число процессов, занятых в каждой задаче.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция закрытия параллельной секции –</strong> <strong><em>int MPI_Finalize();</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, завершает параллельную секцию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>После выполнения данной функции никакое обращение к «MPI_ Init();» невозможно</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения общего числа процессов в группе –</strong> <strong><em>int MPI_Comm_size(MPI_Comm comm, int *size);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong> <strong><em>comm</em></strong><strong><em> </em></strong>– коммуникатор системного типа «MPI_Comm», связанный с группой, в которой находятся процессы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>size</em></strong> – адрес переменной целого типа, куда будет возвращено общее число процессов в группе с коммуникатором «comm».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, в переменную <strong><em>size</em></strong> записывает общее число процессов в группе с коммуникатором <strong><em>comm</em></strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения уникального номера процесса –</strong> <strong><em>int MPI_Comm_rank(MPI_Comm comm, int *rank);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong> <strong><em>comm</em></strong><strong><em> </em></strong>– коммуникатор системного типа «MPI_Comm», связанный с группой, в которой находятся процессы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>*</em></strong><strong><em>rank</em></strong> – адрес переменной целого типа, куда будет возвращен уникальный номер процесса, обратившийся к данной функции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, в переменную <strong><em>rank</em></strong> записывает свой собственный уникальный номер, в котором имеется целое число от 0 до «size-1», т.к. нумерация процессов начинается с 0.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения времени –</strong> <strong><em>double MPI_Wtime();</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция возвращает время в секундах относительно некоторого момента времени, произошедшего в прошлом. Гарантируется, что во время выполнения программы этот момент не изменится.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Для определения времени вычислений в переменные типа double записываются значения времени в момент вызова данной функции до начала вычислений и после вычислений. Разность между двумя переменными будет означать время вычислений.</p>\n<!-- /wp:paragraph -->', 'Тема 2. Основные функции MPI.', '', 'inherit', 'closed', 'closed', '', '250-revision-v1', '', '', '2021-06-09 16:29:51', '2021-06-09 13:29:51', '', 250, 'http://brainfood-project/?p=252', 0, 'revision', '', 0),
(254, 1, '2021-06-09 16:31:34', '2021-06-09 13:31:34', '<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция инициализации параллельной секции –</strong> <strong><em>int MPI_Init(int *argv, char **argc);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>При вызове данной функции создаётся всеобъемлющая группа, инициализируются константы, структуры MPI. После выполнения данной функции доступна работа с параллельными функциями технологии MPI.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Сложный вид аргументов функции обусловлен тем, что в процессор передаётся информация командной строки, в которой указывается общее число процессов, занятых в каждой задаче.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция закрытия параллельной секции –</strong> <strong><em>int MPI_Finalize();</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, завершает параллельную секцию. После выполнения данной функции никакое обращение к «MPI_ Init();» невозможно</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения общего числа процессов в группе –</strong> <strong><em>int MPI_Comm_size(MPI_Comm comm, int *size);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong> <strong><em>comm</em></strong><strong><em> </em></strong>– коммуникатор системного типа «MPI_Comm», связанный с группой, в которой находятся процессы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int *size</em></strong> – адрес переменной целого типа, куда будет возвращено общее число процессов в группе с коммуникатором «comm».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, в переменную <strong><em>size</em></strong> записывает общее число процессов в группе с коммуникатором <strong><em>comm</em></strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения уникального номера процесса –</strong> <strong><em>int MPI_Comm_rank(MPI_Comm comm, int *rank);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong> <strong><em>comm</em></strong><strong><em> </em></strong>– коммуникатор системного типа «MPI_Comm», связанный с группой, в которой находятся процессы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int *rank</em></strong> – адрес переменной целого типа, куда будет возвращен уникальный номер процесса, обратившийся к данной функции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, в переменную <strong><em>rank</em></strong> записывает свой собственный уникальный номер, в котором имеется целое число от 0 до «size-1», т.к. нумерация процессов начинается с 0.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция определения времени –</strong> <strong><em>double MPI_Wtime();</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция возвращает время в секундах относительно некоторого момента времени, произошедшего в прошлом. Гарантируется, что во время выполнения программы этот момент не изменится.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Для определения времени вычислений в переменные типа double записываются значения времени в момент вызова данной функции до начала вычислений и после вычислений. Разность между двумя переменными будет означать время вычислений.</p>\n<!-- /wp:paragraph -->', 'Тема 2. Основные функции MPI.', '', 'inherit', 'closed', 'closed', '', '250-revision-v1', '', '', '2021-06-09 16:31:34', '2021-06-09 13:31:34', '', 250, 'http://brainfood-project/?p=254', 0, 'revision', '', 0),
(255, 1, '2021-06-09 16:32:46', '2021-06-09 13:32:46', '<!-- wp:paragraph -->\n<p><strong>Сообщение</strong> – это набор данных определенного типа.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Каждое сообщение имеет следующие атрибуты:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li>Размер</li><li>Номер процесса отправителя/получателя</li><li>Идентификатор/тег сообщения – целое число, которое должно совпадать у передающего и принимающего процесса.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Атрибуты сообщения записываются в структуру:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><em>struct</em><em> </em><em>MPI</em><em>_</em><em>Status</em><em></em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>{</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>int</em><em> </em><em>count</em><em>; // - количество принятых байт</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>int</em><em> </em><em>MPI</em><em>_</em><em>SOURCE</em><em>; // - номер процесса отправителя</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>int</em><em> </em><em>MPI</em><em>_</em><em>TAG</em><em>; // - </em><em>идентификатор принятого сообщения</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>int</em><em> </em><em>MPI</em><em>_</em><em>ERROR</em><em>; //- код ошибки при выполнении приема с блокировкой</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>};</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная структура в программе указывается как «MPI_Status status».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>В терминологии MPI тип передаваемых элементов обозначается следующим образом:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>MPI_INT – для передачи данных типа int;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_CHAR – для передачи данных типа char;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_FLOAT – для передачи данных типа float;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_DOUBLE – для передачи данных типа double.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция передачи сообщения с блокировкой – <em>int MPI_Send(void* buf, int count, MPI_Datatype type, int dest, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы, к которой принадлежат передающие и принимающие процессы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status</em></strong> - параметры отправленного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, будет передавать процессу «dest» данные типа «MPI_Datatype type», находящиеся по адресу «buf».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если процесс-получатель не готов к обмену, то данные помещаются в буфер.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция успешно завершается, и процесс-отправитель продолжат свою работу.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Если процесс-получатель готов к приему сообщения, то процесс-отправитель передает данные и функция успешно завершается. В этом случае данные физически переданы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Передача и прием с блокировкой – это прием «точка-точка» или «отправитель-получатель».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>В некоторых случаях существует задержка по времени между обращением к функции передачи сообщения и ее физической передачей сообщения. За это время значение передаваемой переменной может быть изменено. Передаваться будет именно то значение, которое было на момент обращения к функции. Это обеспечивается тем, что во временный буфер записывается значение переменной, а не ее адрес.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция синхронной передачи сообщения –</strong> <strong><em>int MPI_Ssend(void* buf, int count, MPI_Datatype type, int dest, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong> - адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы, к которой принадлежат передающие и принимающие процессы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status</em></strong> - параметры отправленного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, не закончит выполнение передачи сообщения, пока оно не будет получено процессом-получателем. Если процесс-получатель не готов к приему сообщения, то возникнет бесконечное ожидание «deadlock».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция передачи сообщения по готовности –</strong> <strong><em>int MPI_Rsend(void * buf, int count, MPI_Datatype type, int dest, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> * </em></strong><strong><em>buf</em></strong> &nbsp;- адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы, к которой принадлежат передающие и принимающие процессы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status</em></strong> - параметры отправленного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, сразу начинает передачу сообщения, не создавая никакого буфера. Если процесс-получатель не готов в этот момент времени к приему сообщения, то данная функция завершается с ошибкой.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция передачи сообщения с созданием буфера –</strong> <strong><em>int MPI_Bsend(void* buf, int count, MPI_Datatype type, int dest, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong> - адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы, к которой принадлежат передающие и принимающие процессы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status</em></strong> - параметры отправленного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Программист с помощью специальных функций самостоятельно создает буфер, в который записываются данные. После этого он самостоятельно освобождает данный буфер, с которым теперь можно работать.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Пользователь самостоятельно может описать буфер, используемый для буферизации сообщений, посылаемых в режиме буферизации.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Буферизация выполняется отправителем с помощью специальных функций:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":30} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"left\",\"level\":3} -->\n<h3 class=\"has-text-align-left\"><strong>Функция создания буфера –</strong> <strong><em>int MPI_Buffer_attach (void* buf, int size);</em></strong> </h3>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":30} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong> - начальный адрес буфера</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>size</em></strong><strong><em> </em></strong>- размер буфера, в байтах</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>В результате вызова функции создается буфер с именем «buf» и размером «size» в байтах, который можно использовать только один раз, после чего его нужно отключить путем вызова подпрограммы отключения:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":30} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"left\",\"level\":3} -->\n<h3 class=\"has-text-align-left\"><strong>Функция отключения буфера –</strong> <strong>int <em>MPI_Buffer_detach (void* buf, int* size);</em></strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":30} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- начальный адрес буфера</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int* size</em></strong> - размер буфера, в байтах</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Отключение буфера операционно связано с MPI. Вызов возвращает адрес и размер отключенного буфера. Эта операция будет блокирована, пока находящееся в буфере сообщение не будет передано. После выполнения этой функции пользователь может повторно использовать или перераспределять объем памяти, занятый буфером.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция приема сообщения –</strong> <strong><em>int MPI_Recv(void* buf, int count, MPI_Datatype type, int source, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong> - адрес начала буфера приема сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - максимальное число элементов в принимаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong> - номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status</em></strong> - параметры принятого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Процесс-получатель ожидает, пока не получит всё сообщение полностью.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Только после получения сообщения полностью функция успешно завершается.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция совмещенного приема и передачи сообщения –</strong> <strong><em>int MPI_Sendrecv(void *sbuf, int scount, MPI_Datatype stype, int dest, int stag, void *rbuf, int rcount, MPI_Datatype rtype, int source, MPI_Datatype rtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>stag</em></strong> - идентификатор посылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера приема сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - число принимаемых элементов сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип принимаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong> - номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtag</em></strong> - идентификатор принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status </em></strong>- параметры принятого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная функция объединяет в едином запросе посылку и прием сообщений. Принимающий и отправляющий процессы могут являться одним и тем же процессом. Сообщение, отправленное функцией&nbsp;«MPI_Sendrecv», может быть принято обычным образом, и точно также функция «MPI_Sendrecv»&nbsp;может принять сообщение, отправленное обычной функцией «MPI_Send». Буфера приема и посылки обязательно должны быть различными.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция совмещенного приема и передачи сообщения c замещением –</strong> <strong><em>int MPI_Sendrecv_replace(void* buf, int count, MPI_Datatype type, int dest, int stag, int source, int rtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- начальный адрес буфера отправителя и получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число элементов в буфере отправителя и получателя (целое)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип элементов в буфере отправителя и получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>stag</em></strong> - идентификатор процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong> - номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rtag</em></strong> - идентификатор процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status </em></strong>- параметры сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция выполняет блокирующие передачи и приемы. Тот же самый буфер используется для отправки и получения, так что посланное сообщение замещается полученным. Семантика операции «send-receive» похожа на запуск двух конкурирующих потоков, когда один выполняет передачу, а другой - прием, с последующим объединением этих потоков.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция определения числа фактически полученных элементов сообщения –</strong> <strong><em>int MPI_Get_count(MPI_Status *status, MPI_Datatype type, int *count);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong><strong><em> </em></strong>- атрибуты принятого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong><strong><em> </em></strong>- тип элементов принятого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int *count </em></strong>- число полученных элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция может быть вызвана либо после чтения сообщения (функциями «MPI_Recv», «MPI_Irecv»), либо после опроса факта поступления сообщения (функциями MPI_Probe, MPI_Iprobe).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Операция чтения безвозвратно уничтожает информацию в буфере приема. При этом попытка считать сообщение с параметром «count» меньше, чем число элементов в буфере, приводит к потере сообщения.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->', 'Тема 3. Функции передачи и приема сообщений с блокировкой.', '', 'publish', 'closed', 'closed', '', 'tema-3-funkcii-peredachi-i-priema-soobshhenij-s-blokirovkoj', '', '', '2021-06-09 17:48:18', '2021-06-09 14:48:18', '', 244, 'http://brainfood-project/?page_id=255', 0, 'page', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(256, 1, '2021-06-09 16:32:46', '2021-06-09 13:32:46', '<!-- wp:paragraph -->\n<p><strong>Сообщение</strong> – это набор данных определенного типа.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Каждое сообщение имеет следующие атрибуты:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li>Размер</li><li>Номер процесса отправителя/получателя</li><li>Идентификатор/тег сообщения – целое число, которое должно совпадать у передающего и принимающего процесса.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Атрибуты сообщения записываются в структуру:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>struct</em><em> </em><em>MPI</em><em>_</em><em>Status</em><em></em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>{</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>int</em><em> </em><em>count</em><em>; // - количество принятых байт</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>int</em><em> </em><em>MPI</em><em>_</em><em>SOURCE</em><em>; // - номер процесса отправителя</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>int</em><em> </em><em>MPI</em><em>_</em><em>TAG</em><em>; // - </em><em>идентификатор принятого сообщения</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>int</em><em> </em><em>MPI</em><em>_</em><em>ERROR</em><em>; //- код ошибки при выполнении приема с блокировкой</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>};</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная структура в программе указывается как «MPI_Status status».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>В терминологии </strong><strong>MPI</strong><strong> тип передаваемых элементов обозначается следующим образом:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_INT – для передачи данных типа int;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_CHAR – для передачи данных типа char;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_FLOAT – для передачи данных типа float;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_DOUBLE – для передачи данных типа double.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция передачи сообщения с блокировкой –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Send(void* buf, int count, MPI_Datatype type, int dest, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы, к которой принадлежат передающие и принимающие процессы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong> - параметры отправленного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, будет передавать процессу «dest» данные типа «MPI_Datatype type», находящиеся по адресу «buf».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если процесс-получатель не готов к обмену, то данные помещаются в буфер.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция успешно завершается, и процесс-отправитель продолжат свою работу.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если процесс-получатель готов к приему сообщения, то процесс-отправитель передает данные и функция успешно завершается. В этом случае данные физически переданы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Передача и прием с блокировкой – это прием «точка-точка» или «отправитель-получатель».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>В некоторых случаях существует задержка по времени между обращением к функции передачи сообщения и ее физической передачей сообщения. За это время значение передаваемой переменной может быть изменено. Передаваться будет именно то значение, которое было на момент обращения к функции. Это обеспечивается тем, что во временный буфер записывается значение переменной, а не ее адрес.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция синхронной передачи сообщения –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Ssend(void* buf, int count, MPI_Datatype type, int dest, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong> - адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы, к которой принадлежат передающие и принимающие процессы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong> - параметры отправленного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, не закончит выполнение передачи сообщения, пока оно не будет получено процессом-получателем. Если процесс-получатель не готов к приему сообщения, то возникнет бесконечное ожидание «deadlock».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция передачи сообщения по готовности –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Rsend(void * buf, int count, MPI_Datatype type, int dest, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> * </em></strong><strong><em>buf</em></strong> &nbsp;- адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы, к которой принадлежат передающие и принимающие процессы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong> - параметры отправленного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, сразу начинает передачу сообщения, не создавая никакого буфера. Если процесс-получатель не готов в этот момент времени к приему сообщения, то данная функция завершается с ошибкой.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция передачи сообщения с созданием буфера –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Bsend(void* buf, int count, MPI_Datatype type, int dest, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong> - адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы, к которой принадлежат передающие и принимающие процессы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong> - параметры отправленного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Программист с помощью специальных функций самостоятельно создает буфер, в который записываются данные. После этого он самостоятельно освобождает данный буфер, с которым теперь можно работать.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Пользователь самостоятельно может описать буфер, используемый для буферизации сообщений, посылаемых в режиме буферизации.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Буферизация выполняется отправителем с помощью специальных функций:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Функция</strong><strong> </strong><strong>создания</strong><strong> </strong><strong>буфера</strong><strong> –</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Buffer_attach (void* buf, int size);</em></strong> <strong><em>&nbsp;</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong> - начальный адрес буфера</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>size</em></strong><strong><em> </em></strong>- размер буфера, в байтах</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>В результате вызова функции создается буфер с именем «buf» и размером «size» в байтах, который можно использовать только один раз, после чего его нужно отключить путем вызова подпрограммы отключения:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Функция</strong><strong> </strong><strong>отключения</strong><strong> </strong><strong>буфера</strong><strong> –</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>int <em>MPI_Buffer_detach (void* buf, int* size);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- начальный адрес буфера</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em>* </em></strong><strong><em>size</em></strong> - размер буфера, в байтах</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Отключение буфера операционно связано с MPI. Вызов возвращает адрес и размер отключенного буфера. Эта операция будет блокирована, пока находящееся в буфере сообщение не будет передано. После выполнения этой функции пользователь может повторно использовать или перераспределять объем памяти, занятый буфером.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция приема сообщения –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Recv(void* buf, int count, MPI_Datatype type, int source, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong><strong></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong> - адрес начала буфера приема сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - максимальное число элементов в принимаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong> - номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong> - параметры принятого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Процесс-получатель ожидает, пока не получит всё сообщение полностью.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Только после получения сообщения полностью функция успешно завершается.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция совмещенного приема и передачи сообщения –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Sendrecv(void *sbuf, int scount, MPI_Datatype stype, int dest, int stag, void *rbuf, int rcount, MPI_Datatype rtype, int source, MPI_Datatype rtag, MPI_Comm comm, MPI_Status *status);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>stag</em></strong> - идентификатор посылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера приема сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - число принимаемых элементов сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип принимаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong> - номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtag</em></strong> - идентификатор принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong><strong><em> </em></strong>- параметры принятого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная функция объединяет в едином запросе посылку и прием сообщений. Принимающий и отправляющий процессы могут являться одним и тем же процессом. Сообщение, отправленное функцией&nbsp;«MPI_Sendrecv», может быть принято обычным образом, и точно также функция «MPI_Sendrecv»&nbsp;может принять сообщение, отправленное обычной функцией «MPI_Send». Буфера приема и посылки обязательно должны быть различными.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция совмещенного приема и передачи сообщения </strong><strong>c</strong><strong> замещением –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Sendrecv_replace(void* buf, int count, MPI_Datatype type, int dest, int stag, int source, int rtag, MPI_Comm comm, MPI_Status *status);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- начальный адрес буфера отправителя и получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число элементов в буфере отправителя и получателя (целое)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип элементов в буфере отправителя и получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>stag</em></strong> - идентификатор процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong> - номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rtag</em></strong> - идентификатор процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong><strong><em> </em></strong>- параметры сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция выполняет блокирующие передачи и приемы. Тот же самый буфер используется для отправки и получения, так что посланное сообщение замещается полученным. Семантика операции «send-receive» похожа на запуск двух конкурирующих потоков, когда один выполняет передачу, а другой - прием, с последующим объединением этих потоков.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция определения числа фактически полученных элементов сообщения –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Get_count(MPI_Status *status, MPI_Datatype type, int *count);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong><strong><em> </em></strong>- атрибуты принятого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong><strong><em> </em></strong>- тип элементов принятого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число полученных элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция может быть вызвана либо после чтения сообщения (функциями «MPI_Recv», «MPI_Irecv»), либо после опроса факта поступления сообщения (функциями MPI_Probe, MPI_Iprobe).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Операция чтения безвозвратно уничтожает информацию в буфере приема. При этом попытка считать сообщение с параметром «count» меньше, чем число элементов в буфере, приводит к потере сообщения.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->', 'Тема 3. Функции передачи и приема сообщений с блокировкой.', '', 'inherit', 'closed', 'closed', '', '255-revision-v1', '', '', '2021-06-09 16:32:46', '2021-06-09 13:32:46', '', 255, 'http://brainfood-project/?p=256', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(258, 1, '2021-06-09 16:38:34', '2021-06-09 13:38:34', '<!-- wp:paragraph -->\n<p><strong>Сообщение</strong> – это набор данных определенного типа.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Каждое сообщение имеет следующие атрибуты:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li>Размер</li><li>Номер процесса отправителя/получателя</li><li>Идентификатор/тег сообщения – целое число, которое должно совпадать у передающего и принимающего процесса.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Атрибуты сообщения записываются в структуру:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><em>struct</em><em> </em><em>MPI</em><em>_</em><em>Status</em><em></em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>{</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>int</em><em> </em><em>count</em><em>; // - количество принятых байт</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>int</em><em> </em><em>MPI</em><em>_</em><em>SOURCE</em><em>; // - номер процесса отправителя</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>int</em><em> </em><em>MPI</em><em>_</em><em>TAG</em><em>; // - </em><em>идентификатор принятого сообщения</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>int</em><em> </em><em>MPI</em><em>_</em><em>ERROR</em><em>; //- код ошибки при выполнении приема с блокировкой</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>};</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная структура в программе указывается как «MPI_Status status».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>В терминологии MPI тип передаваемых элементов обозначается следующим образом:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>MPI_INT – для передачи данных типа int;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_CHAR – для передачи данных типа char;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_FLOAT – для передачи данных типа float;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_DOUBLE – для передачи данных типа double.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция передачи сообщения с блокировкой – <em>int MPI_Send(void* buf, int count, MPI_Datatype type, int dest, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы, к которой принадлежат передающие и принимающие процессы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong> - параметры отправленного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, будет передавать процессу «dest» данные типа «MPI_Datatype type», находящиеся по адресу «buf».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если процесс-получатель не готов к обмену, то данные помещаются в буфер.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция успешно завершается, и процесс-отправитель продолжат свою работу.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если процесс-получатель готов к приему сообщения, то процесс-отправитель передает данные и функция успешно завершается. В этом случае данные физически переданы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Передача и прием с блокировкой – это прием «точка-точка» или «отправитель-получатель».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>В некоторых случаях существует задержка по времени между обращением к функции передачи сообщения и ее физической передачей сообщения. За это время значение передаваемой переменной может быть изменено. Передаваться будет именно то значение, которое было на момент обращения к функции. Это обеспечивается тем, что во временный буфер записывается значение переменной, а не ее адрес.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция синхронной передачи сообщения –</strong> <strong><em>int MPI_Ssend(void* buf, int count, MPI_Datatype type, int dest, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong> - адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы, к которой принадлежат передающие и принимающие процессы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong> - параметры отправленного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, не закончит выполнение передачи сообщения, пока оно не будет получено процессом-получателем. Если процесс-получатель не готов к приему сообщения, то возникнет бесконечное ожидание «deadlock».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция передачи сообщения по готовности –</strong> <strong><em>int MPI_Rsend(void * buf, int count, MPI_Datatype type, int dest, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> * </em></strong><strong><em>buf</em></strong> &nbsp;- адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы, к которой принадлежат передающие и принимающие процессы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong> - параметры отправленного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, сразу начинает передачу сообщения, не создавая никакого буфера. Если процесс-получатель не готов в этот момент времени к приему сообщения, то данная функция завершается с ошибкой.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция передачи сообщения с созданием буфера –</strong> <strong><em>int MPI_Bsend(void* buf, int count, MPI_Datatype type, int dest, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong> - адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы, к которой принадлежат передающие и принимающие процессы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong> - параметры отправленного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Программист с помощью специальных функций самостоятельно создает буфер, в который записываются данные. После этого он самостоятельно освобождает данный буфер, с которым теперь можно работать.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Пользователь самостоятельно может описать буфер, используемый для буферизации сообщений, посылаемых в режиме буферизации.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Буферизация выполняется отправителем с помощью специальных функций:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция создания буфера –</strong> <strong><em>int MPI_Buffer_attach (void* buf, int size);</em></strong> </h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong> - начальный адрес буфера</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>size</em></strong><strong><em> </em></strong>- размер буфера, в байтах</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>В результате вызова функции создается буфер с именем «buf» и размером «size» в байтах, который можно использовать только один раз, после чего его нужно отключить путем вызова подпрограммы отключения:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция отключения буфера –</strong> <strong>int <em>MPI_Buffer_detach (void* buf, int* size);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- начальный адрес буфера</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em>* </em></strong><strong><em>size</em></strong> - размер буфера, в байтах</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Отключение буфера операционно связано с MPI. Вызов возвращает адрес и размер отключенного буфера. Эта операция будет блокирована, пока находящееся в буфере сообщение не будет передано. После выполнения этой функции пользователь может повторно использовать или перераспределять объем памяти, занятый буфером.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция приема сообщения –</strong> <strong><em>int MPI_Recv(void* buf, int count, MPI_Datatype type, int source, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong> - адрес начала буфера приема сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - максимальное число элементов в принимаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong> - номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong> - параметры принятого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Процесс-получатель ожидает, пока не получит всё сообщение полностью.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Только после получения сообщения полностью функция успешно завершается.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция совмещенного приема и передачи сообщения –</strong> <strong><em>int MPI_Sendrecv(void *sbuf, int scount, MPI_Datatype stype, int dest, int stag, void *rbuf, int rcount, MPI_Datatype rtype, int source, MPI_Datatype rtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>stag</em></strong> - идентификатор посылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера приема сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - число принимаемых элементов сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип принимаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong> - номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtag</em></strong> - идентификатор принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong><strong><em> </em></strong>- параметры принятого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная функция объединяет в едином запросе посылку и прием сообщений. Принимающий и отправляющий процессы могут являться одним и тем же процессом. Сообщение, отправленное функцией&nbsp;«MPI_Sendrecv», может быть принято обычным образом, и точно также функция «MPI_Sendrecv»&nbsp;может принять сообщение, отправленное обычной функцией «MPI_Send». Буфера приема и посылки обязательно должны быть различными.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция совмещенного приема и передачи сообщения c замещением –</strong> <strong><em>int MPI_Sendrecv_replace(void* buf, int count, MPI_Datatype type, int dest, int stag, int source, int rtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- начальный адрес буфера отправителя и получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число элементов в буфере отправителя и получателя (целое)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип элементов в буфере отправителя и получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>stag</em></strong> - идентификатор процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong> - номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rtag</em></strong> - идентификатор процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong><strong><em> </em></strong>- параметры сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция выполняет блокирующие передачи и приемы. Тот же самый буфер используется для отправки и получения, так что посланное сообщение замещается полученным. Семантика операции «send-receive» похожа на запуск двух конкурирующих потоков, когда один выполняет передачу, а другой - прием, с последующим объединением этих потоков.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция определения числа фактически полученных элементов сообщения –</strong> <strong><em>int MPI_Get_count(MPI_Status *status, MPI_Datatype type, int *count);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong><strong><em> </em></strong>- атрибуты принятого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong><strong><em> </em></strong>- тип элементов принятого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число полученных элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция может быть вызвана либо после чтения сообщения (функциями «MPI_Recv», «MPI_Irecv»), либо после опроса факта поступления сообщения (функциями MPI_Probe, MPI_Iprobe).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Операция чтения безвозвратно уничтожает информацию в буфере приема. При этом попытка считать сообщение с параметром «count» меньше, чем число элементов в буфере, приводит к потере сообщения.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->', 'Тема 3. Функции передачи и приема сообщений с блокировкой.', '', 'inherit', 'closed', 'closed', '', '255-revision-v1', '', '', '2021-06-09 16:38:34', '2021-06-09 13:38:34', '', 255, 'http://brainfood-project/?p=258', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(260, 1, '2021-06-09 16:42:06', '2021-06-09 13:42:06', '<!-- wp:paragraph -->\n<p><strong>Сообщение</strong> – это набор данных определенного типа.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Каждое сообщение имеет следующие атрибуты:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li>Размер</li><li>Номер процесса отправителя/получателя</li><li>Идентификатор/тег сообщения – целое число, которое должно совпадать у передающего и принимающего процесса.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Атрибуты сообщения записываются в структуру:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><em>struct</em><em> </em><em>MPI</em><em>_</em><em>Status</em><em></em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>{</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>int</em><em> </em><em>count</em><em>; // - количество принятых байт</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>int</em><em> </em><em>MPI</em><em>_</em><em>SOURCE</em><em>; // - номер процесса отправителя</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>int</em><em> </em><em>MPI</em><em>_</em><em>TAG</em><em>; // - </em><em>идентификатор принятого сообщения</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>int</em><em> </em><em>MPI</em><em>_</em><em>ERROR</em><em>; //- код ошибки при выполнении приема с блокировкой</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>};</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная структура в программе указывается как «MPI_Status status».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>В терминологии MPI тип передаваемых элементов обозначается следующим образом:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>MPI_INT – для передачи данных типа int;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_CHAR – для передачи данных типа char;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_FLOAT – для передачи данных типа float;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_DOUBLE – для передачи данных типа double.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция передачи сообщения с блокировкой – <em>int MPI_Send(void* buf, int count, MPI_Datatype type, int dest, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы, к которой принадлежат передающие и принимающие процессы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status</em></strong> - параметры отправленного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, будет передавать процессу «dest» данные типа «MPI_Datatype type», находящиеся по адресу «buf».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если процесс-получатель не готов к обмену, то данные помещаются в буфер.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция успешно завершается, и процесс-отправитель продолжат свою работу.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Если процесс-получатель готов к приему сообщения, то процесс-отправитель передает данные и функция успешно завершается. В этом случае данные физически переданы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Передача и прием с блокировкой – это прием «точка-точка» или «отправитель-получатель».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>В некоторых случаях существует задержка по времени между обращением к функции передачи сообщения и ее физической передачей сообщения. За это время значение передаваемой переменной может быть изменено. Передаваться будет именно то значение, которое было на момент обращения к функции. Это обеспечивается тем, что во временный буфер записывается значение переменной, а не ее адрес.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция синхронной передачи сообщения –</strong> <strong><em>int MPI_Ssend(void* buf, int count, MPI_Datatype type, int dest, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong> - адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы, к которой принадлежат передающие и принимающие процессы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status</em></strong> - параметры отправленного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, не закончит выполнение передачи сообщения, пока оно не будет получено процессом-получателем. Если процесс-получатель не готов к приему сообщения, то возникнет бесконечное ожидание «deadlock».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция передачи сообщения по готовности –</strong> <strong><em>int MPI_Rsend(void * buf, int count, MPI_Datatype type, int dest, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> * </em></strong><strong><em>buf</em></strong> &nbsp;- адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы, к которой принадлежат передающие и принимающие процессы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status</em></strong> - параметры отправленного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, сразу начинает передачу сообщения, не создавая никакого буфера. Если процесс-получатель не готов в этот момент времени к приему сообщения, то данная функция завершается с ошибкой.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция передачи сообщения с созданием буфера –</strong> <strong><em>int MPI_Bsend(void* buf, int count, MPI_Datatype type, int dest, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong> - адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы, к которой принадлежат передающие и принимающие процессы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status</em></strong> - параметры отправленного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Программист с помощью специальных функций самостоятельно создает буфер, в который записываются данные. После этого он самостоятельно освобождает данный буфер, с которым теперь можно работать.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Пользователь самостоятельно может описать буфер, используемый для буферизации сообщений, посылаемых в режиме буферизации.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Буферизация выполняется отправителем с помощью специальных функций:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":30} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"left\",\"level\":3} -->\n<h3 class=\"has-text-align-left\"><strong>Функция создания буфера –</strong> <strong><em>int MPI_Buffer_attach (void* buf, int size);</em></strong> </h3>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":30} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong> - начальный адрес буфера</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>size</em></strong><strong><em> </em></strong>- размер буфера, в байтах</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>В результате вызова функции создается буфер с именем «buf» и размером «size» в байтах, который можно использовать только один раз, после чего его нужно отключить путем вызова подпрограммы отключения:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":30} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"left\",\"level\":3} -->\n<h3 class=\"has-text-align-left\"><strong>Функция отключения буфера –</strong> <strong>int <em>MPI_Buffer_detach (void* buf, int* size);</em></strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":30} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- начальный адрес буфера</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int* size</em></strong> - размер буфера, в байтах</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Отключение буфера операционно связано с MPI. Вызов возвращает адрес и размер отключенного буфера. Эта операция будет блокирована, пока находящееся в буфере сообщение не будет передано. После выполнения этой функции пользователь может повторно использовать или перераспределять объем памяти, занятый буфером.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция приема сообщения –</strong> <strong><em>int MPI_Recv(void* buf, int count, MPI_Datatype type, int source, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong> - адрес начала буфера приема сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - максимальное число элементов в принимаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong> - номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status</em></strong> - параметры принятого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Процесс-получатель ожидает, пока не получит всё сообщение полностью.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Только после получения сообщения полностью функция успешно завершается.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция совмещенного приема и передачи сообщения –</strong> <strong><em>int MPI_Sendrecv(void *sbuf, int scount, MPI_Datatype stype, int dest, int stag, void *rbuf, int rcount, MPI_Datatype rtype, int source, MPI_Datatype rtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>stag</em></strong> - идентификатор посылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера приема сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - число принимаемых элементов сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип принимаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong> - номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtag</em></strong> - идентификатор принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status </em></strong>- параметры принятого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная функция объединяет в едином запросе посылку и прием сообщений. Принимающий и отправляющий процессы могут являться одним и тем же процессом. Сообщение, отправленное функцией «MPI_Sendrecv», может быть принято обычным образом, и точно также функция «MPI_Sendrecv» может принять сообщение, отправленное обычной функцией «MPI_Send». Буфера приема и посылки обязательно должны быть различными.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция совмещенного приема и передачи сообщения c замещением –</strong> <strong><em>int MPI_Sendrecv_replace(void* buf, int count, MPI_Datatype type, int dest, int stag, int source, int rtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- начальный адрес буфера отправителя и получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число элементов в буфере отправителя и получателя (целое)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип элементов в буфере отправителя и получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>stag</em></strong> - идентификатор процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong> - номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rtag</em></strong> - идентификатор процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status </em></strong>- параметры сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция выполняет блокирующие передачи и приемы. Тот же самый буфер используется для отправки и получения, так что посланное сообщение замещается полученным. Семантика операции «send-receive» похожа на запуск двух конкурирующих потоков, когда один выполняет передачу, а другой - прием, с последующим объединением этих потоков.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция определения числа фактически полученных элементов сообщения –</strong> <strong><em>int MPI_Get_count(MPI_Status *status, MPI_Datatype type, int *count);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong><strong><em> </em></strong>- атрибуты принятого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong><strong><em> </em></strong>- тип элементов принятого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int *count </em></strong>- число полученных элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция может быть вызвана либо после чтения сообщения (функциями «MPI_Recv», «MPI_Irecv»), либо после опроса факта поступления сообщения (функциями MPI_Probe, MPI_Iprobe).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Операция чтения безвозвратно уничтожает информацию в буфере приема. При этом попытка считать сообщение с параметром «count» меньше, чем число элементов в буфере, приводит к потере сообщения.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->', 'Тема 3. Функции передачи и приема сообщений с блокировкой.', '', 'inherit', 'closed', 'closed', '', '255-revision-v1', '', '', '2021-06-09 16:42:06', '2021-06-09 13:42:06', '', 255, 'http://brainfood-project/?p=260', 0, 'revision', '', 0),
(261, 1, '2021-06-09 17:19:53', '2021-06-09 14:19:53', '<!-- wp:paragraph -->\n<p>Использование неблокирующих коммуникационных операций повышает безопасность с точки зрения возникновения тупиковых ситуаций, а также может увеличить скорость работы программы за счет совмещения выполнения вычислительных и коммуникационных операций. Эти задачи решаются разделением коммуникационных операций на две стадии: инициирование операции и проверку завершения операции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция определения параметров полученного сообщения –</strong> <strong><em>int MPI_Probe (int source, int tag, MPI_Comm comm, MPI_Status *status);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong><strong><em> </em></strong>- номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>tag</em></strong><strong><em> </em></strong>- идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status </em></strong>- атрибуты опрошенного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Получение информации о структуре ожидаемого сообщения с блокировкой. Возврата из подпрограммы не произойдет до тех пор, пока сообщение с подходящим идентификатором и номером процесса-отправителя не будет доступно для получения. Атрибуты доступного сообщения можно определить обычным образом с помощью параметра «status». Следует обратить внимание, что подпрограмма определяет только факт прихода сообщения, но реально его не принимает.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":2} -->\n<ol type=\"1\" start=\"2\"><li><strong>Неблокирующая функция чтения параметров полученного сообщения –</strong> <strong><em>int MPI_Iprobe (int source, int tag, MPI_Comm comm, int *flag, MPI_Status *status);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong><strong><em> </em></strong>- номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>tag</em></strong><strong><em> </em></strong>- идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong><strong><em> </em></strong>- коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>flag</em></strong><strong><em> </em></strong>- признак завершенности операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status</em></strong> - атрибуты опрошенного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Получение информации о поступлении и структуре ожидаемого сообщения без блокировки. В параметре «flag» возвращает значение 1, если сообщение с подходящими атрибутами уже может быть принято (в этом случае ее действие полностью аналогично «MPI_Probe»), и значение 0, если сообщения с указанными атрибутами еще нет.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":3} -->\n<ol type=\"1\" start=\"3\"><li><strong>Функция передачи сообщения без блокировки –</strong> <strong><em>int MPI_Isend(void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- адрес начала расположения передаваемых данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>datatype</em></strong><strong><em> </em></strong>- тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong><strong><em> </em></strong>- номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>tag</em></strong><strong><em> </em></strong>- идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm </em></strong>- коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Возврат из подпрограммы происходит немедленно, без ожидания окончания передачи данных. Этим объясняется префикс I в именах функций. Поэтому переменную «buf» повторно использовать нельзя до тех пор, пока не будет погашен \"запрос обмена\". Это можно сделать с помощью подпрограмм «MPI_Wait» или «MPI_Test», передав им параметр «request».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":4} -->\n<ol type=\"1\" start=\"4\"><li><strong>Функция приема сообщения без блокировки –</strong>  <strong><em>int MPI_Irecv(void* buf, int count, MPI_Datatype datatype, int source,</em></strong> <strong><em>int tag, MPI_Comm comm, MPI_Request *request);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- адрес для принимаемых данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- максимальное число принимаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>datatype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong><strong><em> </em></strong>- номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>tag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm </em></strong>- коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Возврат из подпрограммы происходит немедленно, без ожидания окончания приема данных. Определить момент окончания приема можно с помощью подпрограмм «MPI_Wait» или «MPI_Test» с соответствующим параметром «request».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":5} -->\n<ol type=\"1\" start=\"5\"><li><strong>Функция отмены ждущих операций –</strong> <strong><em>int MPI_Cancel(MPI_Request *request);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функцию можно использовать для аннулирования обменов, использующих как отложенный, так и обычный запрос. После вызова данной функции и следующего за ним вызова «MPI_Wait» или «MPI_Test», запрос на выполнение операции обмена становится неактивным и может быть активизирован для нового обмена. Информация об аннулированной операции содержится в аргументе «status».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":6} -->\n<ol type=\"1\" start=\"6\"><li><strong>Функция ожидания завершения неблокирующей операции –</strong> <strong><em>int MPI_Wait(MPI_Request *request, MPI_Status *status);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status </em></strong>- атрибуты сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Это нелокальная блокирующая операция. Возврат происходит после завершения операции, связанной с запросом «request». В параметре «status» возвращается информация о законченной операции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":7} -->\n<ol type=\"1\" start=\"7\"><li><strong>Функция проверки завершения неблокирующей операции –</strong> <strong><em>int MPI_Test(MPI_Request *request, int *flag, MPI_Status *status);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>flag</em></strong> - признак завершенности проверяемой операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status </em></strong>- атрибуты сообщения, если операция завершилась</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Это локальная неблокирующая операция. Если связанная с запросом «request» операция завершена, возвращается «flag = true», а «status» содержит информацию о завершенной операции. Если проверяемая операция не завершена, возвращается «flag = false», а значение «status» в этом случае не определено.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":268,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-14.png\" alt=\"\" class=\"wp-image-268\"/></figure></div>\n<!-- /wp:image -->', 'Тема 4. Функции не блокирующего обмена сообщений.', '', 'publish', 'closed', 'closed', '', 'tema-4-funkcii-ne-blokirujushhego-obmena-soobshhenij', '', '', '2021-06-09 17:48:25', '2021-06-09 14:48:25', '', 244, 'http://brainfood-project/?page_id=261', 0, 'page', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(262, 1, '2021-06-09 17:19:53', '2021-06-09 14:19:53', '<!-- wp:paragraph -->\n<p>Использование неблокирующих коммуникационных операций повышает безопасность с точки зрения возникновения тупиковых ситуаций, а также может увеличить скорость работы программы за счет совмещения выполнения вычислительных и коммуникационных операций. Эти задачи решаются разделением коммуникационных операций на две стадии: инициирование операции и проверку завершения операции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция определения параметров полученного сообщения –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Probe (int source, int tag, MPI_Comm comm, MPI_Status *status);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong><strong><em> </em></strong>- номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>tag</em></strong><strong><em> </em></strong>- идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong><strong><em> </em></strong>- атрибуты опрошенного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Получение информации о структуре ожидаемого сообщения с блокировкой. Возврата из подпрограммы не произойдет до тех пор, пока сообщение с подходящим идентификатором и номером процесса-отправителя не будет доступно для получения. Атрибуты доступного сообщения можно определить обычным образом с помощью параметра «status». Следует обратить внимание, что подпрограмма определяет только факт прихода сообщения, но реально его не принимает.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":2} -->\n<ol type=\"1\" start=\"2\"><li><strong>Неблокирующая функция чтения параметров полученного сообщения –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Iprobe (int source, int tag, MPI_Comm comm, int *flag, MPI_Status *status);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong><strong><em> </em></strong>- номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>tag</em></strong><strong><em> </em></strong>- идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong><strong><em> </em></strong>- коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>flag</em></strong><strong><em> </em></strong>- признак завершенности операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong> - атрибуты опрошенного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Получение информации о поступлении и структуре ожидаемого сообщения без блокировки. В параметре «flag» возвращает значение 1, если сообщение с подходящими атрибутами уже может быть принято (в этом случае ее действие полностью аналогично «MPI_Probe»), и значение 0, если сообщения с указанными атрибутами еще нет.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":3} -->\n<ol type=\"1\" start=\"3\"><li><strong>Функция передачи сообщения без блокировки –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Isend(void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- адрес начала расположения передаваемых данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>datatype</em></strong><strong><em> </em></strong>- тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong><strong><em> </em></strong>- номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>tag</em></strong><strong><em> </em></strong>- идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm </em></strong>- коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Возврат из подпрограммы происходит немедленно, без ожидания окончания передачи данных. Этим объясняется префикс I в именах функций. Поэтому переменную «buf» повторно использовать нельзя до тех пор, пока не будет погашен \"запрос обмена\". Это можно сделать с помощью подпрограмм «MPI_Wait» или «MPI_Test», передав им параметр «request».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":4} -->\n<ol type=\"1\" start=\"4\"><li><strong>Функция приема сообщения без блокировки –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Irecv(void* buf, int count, MPI_Datatype datatype, int source,</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int tag, MPI_Comm comm, MPI_Request *request);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- адрес для принимаемых данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- максимальное число принимаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>datatype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong><strong><em> </em></strong>- номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>tag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm </em></strong>- коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Возврат из подпрограммы происходит немедленно, без ожидания окончания приема данных. Определить момент окончания приема можно с помощью подпрограмм «MPI_Wait» или «MPI_Test» с соответствующим параметром «request».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":5} -->\n<ol type=\"1\" start=\"5\"><li><strong>Функция отмены ждущих операций –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Cancel(MPI_Request *request);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функцию можно использовать для аннулирования обменов, использующих как отложенный, так и обычный запрос. После вызова данной функции и следующего за ним вызова «MPI_Wait» или «MPI_Test», запрос на выполнение операции обмена становится неактивным и может быть активизирован для нового обмена. Информация об аннулированной операции содержится в аргументе «status».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":6} -->\n<ol type=\"1\" start=\"6\"><li><strong>Функция ожидания завершения неблокирующей операции –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Wait(MPI_Request *request, MPI_Status *status);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong><strong><em> </em></strong>- атрибуты сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Это нелокальная блокирующая операция. Возврат происходит после завершения операции, связанной с запросом «request». В параметре «status» возвращается информация о законченной операции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":7} -->\n<ol type=\"1\" start=\"7\"><li><strong>Функция проверки завершения неблокирующей операции –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Test(MPI_Request *request, int *flag, MPI_Status *status);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>flag</em></strong> - признак завершенности проверяемой операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong><strong><em> </em></strong>- атрибуты сообщения, если операция завершилась</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Это локальная неблокирующая операция. Если связанная с запросом «request» операция завершена, возвращается «flag = true», а «status» содержит информацию о завершенной операции. Если проверяемая операция не завершена, возвращается «flag = false», а значение «status» в этом случае не определено.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->', 'Тема 4. Функции не блокирующего обмена сообщений.', '', 'inherit', 'closed', 'closed', '', '261-revision-v1', '', '', '2021-06-09 17:19:53', '2021-06-09 14:19:53', '', 261, 'http://brainfood-project/?p=262', 0, 'revision', '', 0),
(264, 1, '2021-06-09 17:21:35', '2021-06-09 14:21:35', '<!-- wp:paragraph -->\n<p>Использование неблокирующих коммуникационных операций повышает безопасность с точки зрения возникновения тупиковых ситуаций, а также может увеличить скорость работы программы за счет совмещения выполнения вычислительных и коммуникационных операций. Эти задачи решаются разделением коммуникационных операций на две стадии: инициирование операции и проверку завершения операции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция определения параметров полученного сообщения –</strong> <strong><em>int MPI_Probe (int source, int tag, MPI_Comm comm, MPI_Status *status);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong><strong><em> </em></strong>- номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>tag</em></strong><strong><em> </em></strong>- идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong><strong><em> </em></strong>- атрибуты опрошенного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Получение информации о структуре ожидаемого сообщения с блокировкой. Возврата из подпрограммы не произойдет до тех пор, пока сообщение с подходящим идентификатором и номером процесса-отправителя не будет доступно для получения. Атрибуты доступного сообщения можно определить обычным образом с помощью параметра «status». Следует обратить внимание, что подпрограмма определяет только факт прихода сообщения, но реально его не принимает.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":2} -->\n<ol type=\"1\" start=\"2\"><li><strong>Неблокирующая функция чтения параметров полученного сообщения –</strong> <strong><em>int MPI_Iprobe (int source, int tag, MPI_Comm comm, int *flag, MPI_Status *status);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong><strong><em> </em></strong>- номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>tag</em></strong><strong><em> </em></strong>- идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong><strong><em> </em></strong>- коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>flag</em></strong><strong><em> </em></strong>- признак завершенности операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong> - атрибуты опрошенного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Получение информации о поступлении и структуре ожидаемого сообщения без блокировки. В параметре «flag» возвращает значение 1, если сообщение с подходящими атрибутами уже может быть принято (в этом случае ее действие полностью аналогично «MPI_Probe»), и значение 0, если сообщения с указанными атрибутами еще нет.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":3} -->\n<ol type=\"1\" start=\"3\"><li><strong>Функция передачи сообщения без блокировки –</strong> <strong><em>int MPI_Isend(void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- адрес начала расположения передаваемых данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>datatype</em></strong><strong><em> </em></strong>- тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong><strong><em> </em></strong>- номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>tag</em></strong><strong><em> </em></strong>- идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm </em></strong>- коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Возврат из подпрограммы происходит немедленно, без ожидания окончания передачи данных. Этим объясняется префикс I в именах функций. Поэтому переменную «buf» повторно использовать нельзя до тех пор, пока не будет погашен \"запрос обмена\". Это можно сделать с помощью подпрограмм «MPI_Wait» или «MPI_Test», передав им параметр «request».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":4} -->\n<ol type=\"1\" start=\"4\"><li><strong>Функция приема сообщения без блокировки –</strong>  <strong><em>int MPI_Irecv(void* buf, int count, MPI_Datatype datatype, int source,</em></strong> <strong><em>int tag, MPI_Comm comm, MPI_Request *request);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- адрес для принимаемых данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- максимальное число принимаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>datatype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong><strong><em> </em></strong>- номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>tag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm </em></strong>- коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Возврат из подпрограммы происходит немедленно, без ожидания окончания приема данных. Определить момент окончания приема можно с помощью подпрограмм «MPI_Wait» или «MPI_Test» с соответствующим параметром «request».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":5} -->\n<ol type=\"1\" start=\"5\"><li><strong>Функция отмены ждущих операций –</strong> <strong><em>int MPI_Cancel(MPI_Request *request);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функцию можно использовать для аннулирования обменов, использующих как отложенный, так и обычный запрос. После вызова данной функции и следующего за ним вызова «MPI_Wait» или «MPI_Test», запрос на выполнение операции обмена становится неактивным и может быть активизирован для нового обмена. Информация об аннулированной операции содержится в аргументе «status».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":6} -->\n<ol type=\"1\" start=\"6\"><li><strong>Функция ожидания завершения неблокирующей операции –</strong> <strong><em>int MPI_Wait(MPI_Request *request, MPI_Status *status);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong><strong><em> </em></strong>- атрибуты сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Это нелокальная блокирующая операция. Возврат происходит после завершения операции, связанной с запросом «request». В параметре «status» возвращается информация о законченной операции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":7} -->\n<ol type=\"1\" start=\"7\"><li><strong>Функция проверки завершения неблокирующей операции –</strong> <strong><em>int MPI_Test(MPI_Request *request, int *flag, MPI_Status *status);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>flag</em></strong> - признак завершенности проверяемой операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong><strong><em> </em></strong>- атрибуты сообщения, если операция завершилась</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Это локальная неблокирующая операция. Если связанная с запросом «request» операция завершена, возвращается «flag = true», а «status» содержит информацию о завершенной операции. Если проверяемая операция не завершена, возвращается «flag = false», а значение «status» в этом случае не определено.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->', 'Тема 4. Функции не блокирующего обмена сообщений.', '', 'inherit', 'closed', 'closed', '', '261-revision-v1', '', '', '2021-06-09 17:21:35', '2021-06-09 14:21:35', '', 261, 'http://brainfood-project/?p=264', 0, 'revision', '', 0),
(266, 1, '2021-06-09 17:22:50', '2021-06-09 14:22:50', '<!-- wp:paragraph -->\n<p>Использование неблокирующих коммуникационных операций повышает безопасность с точки зрения возникновения тупиковых ситуаций, а также может увеличить скорость работы программы за счет совмещения выполнения вычислительных и коммуникационных операций. Эти задачи решаются разделением коммуникационных операций на две стадии: инициирование операции и проверку завершения операции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция определения параметров полученного сообщения –</strong> <strong><em>int MPI_Probe (int source, int tag, MPI_Comm comm, MPI_Status *status);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong><strong><em> </em></strong>- номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>tag</em></strong><strong><em> </em></strong>- идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status </em></strong>- атрибуты опрошенного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Получение информации о структуре ожидаемого сообщения с блокировкой. Возврата из подпрограммы не произойдет до тех пор, пока сообщение с подходящим идентификатором и номером процесса-отправителя не будет доступно для получения. Атрибуты доступного сообщения можно определить обычным образом с помощью параметра «status». Следует обратить внимание, что подпрограмма определяет только факт прихода сообщения, но реально его не принимает.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":2} -->\n<ol type=\"1\" start=\"2\"><li><strong>Неблокирующая функция чтения параметров полученного сообщения –</strong> <strong><em>int MPI_Iprobe (int source, int tag, MPI_Comm comm, int *flag, MPI_Status *status);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong><strong><em> </em></strong>- номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>tag</em></strong><strong><em> </em></strong>- идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong><strong><em> </em></strong>- коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>flag</em></strong><strong><em> </em></strong>- признак завершенности операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status</em></strong> - атрибуты опрошенного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Получение информации о поступлении и структуре ожидаемого сообщения без блокировки. В параметре «flag» возвращает значение 1, если сообщение с подходящими атрибутами уже может быть принято (в этом случае ее действие полностью аналогично «MPI_Probe»), и значение 0, если сообщения с указанными атрибутами еще нет.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":3} -->\n<ol type=\"1\" start=\"3\"><li><strong>Функция передачи сообщения без блокировки –</strong> <strong><em>int MPI_Isend(void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- адрес начала расположения передаваемых данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>datatype</em></strong><strong><em> </em></strong>- тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong><strong><em> </em></strong>- номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>tag</em></strong><strong><em> </em></strong>- идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm </em></strong>- коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Возврат из подпрограммы происходит немедленно, без ожидания окончания передачи данных. Этим объясняется префикс I в именах функций. Поэтому переменную «buf» повторно использовать нельзя до тех пор, пока не будет погашен \"запрос обмена\". Это можно сделать с помощью подпрограмм «MPI_Wait» или «MPI_Test», передав им параметр «request».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":4} -->\n<ol type=\"1\" start=\"4\"><li><strong>Функция приема сообщения без блокировки –</strong>  <strong><em>int MPI_Irecv(void* buf, int count, MPI_Datatype datatype, int source,</em></strong> <strong><em>int tag, MPI_Comm comm, MPI_Request *request);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- адрес для принимаемых данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- максимальное число принимаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>datatype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong><strong><em> </em></strong>- номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>tag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm </em></strong>- коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Возврат из подпрограммы происходит немедленно, без ожидания окончания приема данных. Определить момент окончания приема можно с помощью подпрограмм «MPI_Wait» или «MPI_Test» с соответствующим параметром «request».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":5} -->\n<ol type=\"1\" start=\"5\"><li><strong>Функция отмены ждущих операций –</strong> <strong><em>int MPI_Cancel(MPI_Request *request);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функцию можно использовать для аннулирования обменов, использующих как отложенный, так и обычный запрос. После вызова данной функции и следующего за ним вызова «MPI_Wait» или «MPI_Test», запрос на выполнение операции обмена становится неактивным и может быть активизирован для нового обмена. Информация об аннулированной операции содержится в аргументе «status».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":6} -->\n<ol type=\"1\" start=\"6\"><li><strong>Функция ожидания завершения неблокирующей операции –</strong> <strong><em>int MPI_Wait(MPI_Request *request, MPI_Status *status);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status </em></strong>- атрибуты сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Это нелокальная блокирующая операция. Возврат происходит после завершения операции, связанной с запросом «request». В параметре «status» возвращается информация о законченной операции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":7} -->\n<ol type=\"1\" start=\"7\"><li><strong>Функция проверки завершения неблокирующей операции –</strong> <strong><em>int MPI_Test(MPI_Request *request, int *flag, MPI_Status *status);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>flag</em></strong> - признак завершенности проверяемой операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status </em></strong>- атрибуты сообщения, если операция завершилась</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Это локальная неблокирующая операция. Если связанная с запросом «request» операция завершена, возвращается «flag = true», а «status» содержит информацию о завершенной операции. Если проверяемая операция не завершена, возвращается «flag = false», а значение «status» в этом случае не определено.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->', 'Тема 4. Функции не блокирующего обмена сообщений.', '', 'inherit', 'closed', 'closed', '', '261-revision-v1', '', '', '2021-06-09 17:22:50', '2021-06-09 14:22:50', '', 261, 'http://brainfood-project/?p=266', 0, 'revision', '', 0),
(268, 1, '2021-06-09 17:23:51', '2021-06-09 14:23:51', '', 'image-14', '', 'inherit', 'open', 'closed', '', 'image-14', '', '', '2021-06-09 17:23:51', '2021-06-09 14:23:51', '', 261, 'http://brainfood-project/wp-content/uploads/2021/06/image-14.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(269, 1, '2021-06-09 17:23:56', '2021-06-09 14:23:56', '<!-- wp:paragraph -->\n<p>Использование неблокирующих коммуникационных операций повышает безопасность с точки зрения возникновения тупиковых ситуаций, а также может увеличить скорость работы программы за счет совмещения выполнения вычислительных и коммуникационных операций. Эти задачи решаются разделением коммуникационных операций на две стадии: инициирование операции и проверку завершения операции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция определения параметров полученного сообщения –</strong> <strong><em>int MPI_Probe (int source, int tag, MPI_Comm comm, MPI_Status *status);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong><strong><em> </em></strong>- номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>tag</em></strong><strong><em> </em></strong>- идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status </em></strong>- атрибуты опрошенного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Получение информации о структуре ожидаемого сообщения с блокировкой. Возврата из подпрограммы не произойдет до тех пор, пока сообщение с подходящим идентификатором и номером процесса-отправителя не будет доступно для получения. Атрибуты доступного сообщения можно определить обычным образом с помощью параметра «status». Следует обратить внимание, что подпрограмма определяет только факт прихода сообщения, но реально его не принимает.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":2} -->\n<ol type=\"1\" start=\"2\"><li><strong>Неблокирующая функция чтения параметров полученного сообщения –</strong> <strong><em>int MPI_Iprobe (int source, int tag, MPI_Comm comm, int *flag, MPI_Status *status);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong><strong><em> </em></strong>- номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>tag</em></strong><strong><em> </em></strong>- идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong><strong><em> </em></strong>- коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>flag</em></strong><strong><em> </em></strong>- признак завершенности операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status</em></strong> - атрибуты опрошенного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Получение информации о поступлении и структуре ожидаемого сообщения без блокировки. В параметре «flag» возвращает значение 1, если сообщение с подходящими атрибутами уже может быть принято (в этом случае ее действие полностью аналогично «MPI_Probe»), и значение 0, если сообщения с указанными атрибутами еще нет.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":3} -->\n<ol type=\"1\" start=\"3\"><li><strong>Функция передачи сообщения без блокировки –</strong> <strong><em>int MPI_Isend(void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- адрес начала расположения передаваемых данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>datatype</em></strong><strong><em> </em></strong>- тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong><strong><em> </em></strong>- номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>tag</em></strong><strong><em> </em></strong>- идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm </em></strong>- коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Возврат из подпрограммы происходит немедленно, без ожидания окончания передачи данных. Этим объясняется префикс I в именах функций. Поэтому переменную «buf» повторно использовать нельзя до тех пор, пока не будет погашен \"запрос обмена\". Это можно сделать с помощью подпрограмм «MPI_Wait» или «MPI_Test», передав им параметр «request».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":4} -->\n<ol type=\"1\" start=\"4\"><li><strong>Функция приема сообщения без блокировки –</strong>  <strong><em>int MPI_Irecv(void* buf, int count, MPI_Datatype datatype, int source,</em></strong> <strong><em>int tag, MPI_Comm comm, MPI_Request *request);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- адрес для принимаемых данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- максимальное число принимаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>datatype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong><strong><em> </em></strong>- номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>tag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm </em></strong>- коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Возврат из подпрограммы происходит немедленно, без ожидания окончания приема данных. Определить момент окончания приема можно с помощью подпрограмм «MPI_Wait» или «MPI_Test» с соответствующим параметром «request».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":5} -->\n<ol type=\"1\" start=\"5\"><li><strong>Функция отмены ждущих операций –</strong> <strong><em>int MPI_Cancel(MPI_Request *request);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функцию можно использовать для аннулирования обменов, использующих как отложенный, так и обычный запрос. После вызова данной функции и следующего за ним вызова «MPI_Wait» или «MPI_Test», запрос на выполнение операции обмена становится неактивным и может быть активизирован для нового обмена. Информация об аннулированной операции содержится в аргументе «status».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":6} -->\n<ol type=\"1\" start=\"6\"><li><strong>Функция ожидания завершения неблокирующей операции –</strong> <strong><em>int MPI_Wait(MPI_Request *request, MPI_Status *status);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status </em></strong>- атрибуты сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Это нелокальная блокирующая операция. Возврат происходит после завершения операции, связанной с запросом «request». В параметре «status» возвращается информация о законченной операции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\",\"start\":7} -->\n<ol type=\"1\" start=\"7\"><li><strong>Функция проверки завершения неблокирующей операции –</strong> <strong><em>int MPI_Test(MPI_Request *request, int *flag, MPI_Status *status);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Request *request </em></strong>- \"запрос обмена\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>flag</em></strong> - признак завершенности проверяемой операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status </em></strong>- атрибуты сообщения, если операция завершилась</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Это локальная неблокирующая операция. Если связанная с запросом «request» операция завершена, возвращается «flag = true», а «status» содержит информацию о завершенной операции. Если проверяемая операция не завершена, возвращается «flag = false», а значение «status» в этом случае не определено.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":268,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-14.png\" alt=\"\" class=\"wp-image-268\"/></figure></div>\n<!-- /wp:image -->', 'Тема 4. Функции не блокирующего обмена сообщений.', '', 'inherit', 'closed', 'closed', '', '261-revision-v1', '', '', '2021-06-09 17:23:56', '2021-06-09 14:23:56', '', 261, 'http://brainfood-project/?p=269', 0, 'revision', '', 0),
(270, 1, '2021-06-09 17:25:13', '2021-06-09 14:25:13', '<!-- wp:paragraph -->\n<p><strong>Константы, описывающие коллективные операции:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>MPI_SUM – нахождение суммы;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_PROD – нахождение произведения;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_MAX – нахождение максимального значения;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_MIN – нахождение минимального значения;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_LAND – выполнение логической конъюнкции;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_BAND – выполнение битовой конъюнкции;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_LOR – выполнение логической дизъюнкции;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_BOR – выполнение битовой дизъюнкции;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_LXOR – выполнение логической дизъюнкции в смысле разъединительном;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_BXOR – выполнение битовой дизъюнкции в смысле разъединительном;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция синхронизации –</strong> <strong><em>int MPI_Barrier(MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция указывается без условий на номер процесса.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, останавливается и ждет, пока все остальные процессы, принадлежащие коммуникатору «comm» не обратятся к этой функции. После выполнения данной функции её действие прекращается и код, стоящий после вызова этой функции, будет снова выполняться одновременно всеми процессами, принадлежащими коммуникатору «comm».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция широкоформатного вещания – <em>int MPI_Bcast(void *buf, int count, MPI_Datatype type, int source, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>buf</em></strong> - адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong> - номер рассылающего процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm</em></strong> - идентификатор группы </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция выполняет рассылку сообщения от процесса «source» всем процессам, включая рассылающий процесс. При возврате из процедуры содержимое буфера «buf» процесса «source» будет скопировано в локальный буфер процесса. Значения параметров «count», «datatype» и «source» должны быть одинаковыми у всех процессов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция выполнения коллективной операции –</strong> <strong><em>int MPI_Reduce(void *sbuf, void *rbuf, int count, MPI_Datatype type, MPI_Op op, int root, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера для аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера для результата</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число аргументов у каждого процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Op</em></strong><strong><em> </em></strong><strong><em>op</em></strong> - идентификатор глобальной операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong> - процесс-получатель результата</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция выполняет коллективную операцию «op<strong>»</strong> над аргументами «sbuf», которые берутся с каждого процесса. Результат операции сохраняется на процессе «root» в переменной «rbuf».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция выполнения коллективной операции с общим сохранением –</strong> <strong><em>int MPI_Allreduce(void *sbuf, void *rbuf, int count, MPI_Datatype type,</em></strong> <strong><em>MPI_Op op, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера для аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера для результата</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число аргументов у каждого процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Op</em></strong><strong><em> </em></strong><strong><em>op</em></strong> - идентификатор глобальной операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данную функцию можно представить, как функцию «MPI_Reduce», где результат коллективной операции сохраняется на всех процессах, а не только на главном.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция выполнения коллективной операции с сохранением промежуточных результатов –</strong> <strong><em>int MPI_Scan(void *sbuf, void *rbuf, int count, MPI_Datatype type, MPI_Op op, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера для аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера для результата</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число аргументов у каждого процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Op</em></strong><strong><em> </em></strong><strong><em>op</em></strong> - идентификатор глобальной операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Каждый процесс применяет коллективную операцию к своему аргументу и к аргументам процессов, находящихся перед ним.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция сбора данных от каждого процесса в один массив –</strong> <strong><em>int MPI_Gather(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, MPI_Datatype rtype, int root, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов в посылаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип элементов отсылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера сборки данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - число элементов в принимаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong> - номер процесса, на котором происходит сборка данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Сборка данных со всех процессов в буфере «rbuf» процесса «dest». Каждый процесс, включая «root», посылает содержимое своего буфера «sbuf» процессу «dest». Собирающий процесс сохраняет данные в буфере «rbuf», располагая их в порядке возрастания номеров процессов. Параметр «rbuf» имеет значение только на собирающем процессе и на остальных игнорируется, значения параметров «count», «datatype» и «root» должны быть одинаковыми у всех процессов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция сбора данных от каждого процесса в один массив с общим сохранением –</strong> <strong><em>int MPI_Allgather(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, MPI_Datatype rtype, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов в посылаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип элементов отсылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера сборки данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - число элементов в принимаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная функция является аналогом функции «MPI_Gather», но сборка выполняется всеми процессами группы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция сбора данных в один массив с переменным числом аргументов и с заданным размещением данных –</strong> <strong><em>int MPI_Gatherv(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, int *disp, MPI_Datatype rtype, int root, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов в посылаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип элементов отсылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера сборки данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - целочисленный массив (размер равен числу процессов в группе), i-й элемент которого определяет число элементов, которое должно быть получено от процесса i</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>disp</em></strong><strong><em> </em></strong>- целочисленный массив (размер равен числу процессов в группе), i-ое значение определяет смещение i-го блока данных относительно начала «rbuf»</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong> - номер процесса, на котором происходит сборка данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция позволяет собирать блоки с разным числом элементов от каждого процесса, так как количество элементов, принимаемых от каждого процесса, задается индивидуально с помощью массива «rcount». Эта функция обеспечивает также большую гибкость при размещении данных в процессе-получателе, благодаря введению в качестве параметра массива смещений «disp».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция сбора данных в один массив с переменным числом аргументов и с заданным размещением данных с общим сохранением –</strong> <strong><em>int MPI_Allgatherv(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, int *disp, MPI_Datatype rtype, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов в посылаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип элементов отсылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера сборки данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - целочисленный массив (размер равен числу процессов в группе), i-й элемент которого определяет число элементов, которое должно быть получено от процесса i</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>disp</em></strong><strong><em> </em></strong>- целочисленный массив (размер равен числу процессов в группе), i-ое значение определяет смещение i-го блока данных относительно начала «rbuf»</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная функция является аналогом функции «MPI_Gatherv», но сборка выполняется всеми процессами группы. Поэтому в списке параметров отсутствует параметр «root».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция рассылки равного числа данных с одного процесса остальным –</strong> <strong><em>int MPI_Scatter(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, MPI_Datatype rtype, int root, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong>&nbsp; -адрес начала размещения блоков распределяемых данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов, посылаемых каждому процессу</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера приема</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong><strong><em> </em></strong>- число получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong> - номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm </em></strong>- идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция рассылает сообщение из буфера посылки процесса «root» на равные части размером «scount» и посылает i-ю часть в буфер приема процесса с номером i (в том числе и самому себе). Процесс «root» использует оба буфера (посылки и приема), поэтому в вызываемой им подпрограмме все параметры являются существенными. Остальные процессы группы с коммуникатором «comm» являются только получателями, поэтому для них параметры, специфицирующие буфер посылки, не существенны.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция рассылки переменного числа данных с различным смещением с одного процесса остальным –</strong> <strong><em>int MPI_Scatterv(void* sbuf, int *scounts, int *disp, MPI_Datatype stype, void* rbuf, int rcount, MPI_Datatype rtype, int root, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера посылки (используется только в процессе-отправителе root)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>scounts</em></strong>&nbsp; - целочисленный массив (размер равен числу процессов в группе), содержащий число элементов, посылаемых каждому процессу</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>disp</em></strong> - целочисленный массив (размер равен числу процессов в группе), i-ое значение определяет смещение относительно начала «sbuf» для данных, посылаемых процессу i</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong><strong><em> </em></strong>- тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>rbuf</em></strong> - адрес начала буфера приема</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - число получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong><strong><em> </em></strong>- тип получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong><strong><em> </em></strong>- номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm </em></strong>– идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция является векторным вариантом функции «MPI_Scatter», позволяющим посылать каждому процессу различное количество элементов. Начало расположения элементов блока, посылаемого i-му процессу, задается в массиве смещений «disp», а число посылаемых элементов - в массиве «scounts». Эта функция является обратной по отношению к функции «MPI_Gatherv».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция совмещенной коллективной операции –</strong> <strong><em>int MPI_Alltoall(void* sbuf, int scount, MPI_Datatype stype, void* rbuf, int rcount, MPI_Datatype rtype, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong><strong><em> </em></strong>- тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>rbuf</em></strong><strong><em> </em></strong>- адрес начала буфера приема</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong><strong><em> </em></strong>- число элементов, получаемых от каждого процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция совмещает в себе операции «Scatter» и «Gather» и является по сути дела расширением операции «Allgather», когда каждый процесс посылает различные данные разным получателям. Процесс i посылает j-ый блок своего буфера «<em>sbuf</em>» процессу j, который помещает его в i-ый блок своего буфера «<em>rbuf</em>». Количество посланных данных должно быть равно количеству полученных данных для каждой пары процессов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция совмещенной коллективной операции со смещением –</strong> <strong><em>int MPI_Alltoallv(void* sbuf, int *scounts, int *sdisp, MPI_Datatype stype, void* rbuf, int *rcounts, int *rdisp, MPI_Datatype rtype, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>scounts</em></strong> - целочисленный массив, равный размеру группы, определяющий количество элементов для отправки каждому процессору</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>sdisp</em></strong> - целочисленный массив (размер группы длины). Запись j указывает смещение (относительно «sbuf», из которого можно взять исходящие данные, предназначенные для процесса j</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong><strong><em> </em></strong>- тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>rcounts</em></strong> - целочисленный массив, равный размеру группы, определяющий максимальное количество элементов, которые могут быть получены от каждого процессора</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>rdisp</em></strong> - целочисленный массив (размер группы длины). Запись i указывает смещение (относительно «rbuf», в котором помещаются входящие данные из процесса i</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция реализует векторный вариант операции «Alltoall», допускающий передачу и прием блоков различной длины с более гибким размещением передаваемых и принимаемых данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->', 'Тема 5. Функции коллективного взаимодействия процессов.', '', 'publish', 'closed', 'closed', '', 'tema-5-funkcii-kollektivnogo-vzaimodejstvija-processov', '', '', '2021-06-09 17:48:32', '2021-06-09 14:48:32', '', 244, 'http://brainfood-project/?page_id=270', 0, 'page', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(271, 1, '2021-06-09 17:25:13', '2021-06-09 14:25:13', '<!-- wp:paragraph -->\n<p><strong>Константы, описывающие коллективные операции:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_SUM – нахождение суммы;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_PROD – нахождение произведения;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_MAX – нахождение максимального значения;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_MIN – нахождение минимального значения;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_LAND – выполнение логической конъюнкции;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_BAND – выполнение битовой конъюнкции;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_LOR – выполнение логической дизъюнкции;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_BOR – выполнение битовой дизъюнкции;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_LXOR – выполнение логической дизъюнкции в смысле разъединительном;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_BXOR – выполнение битовой дизъюнкции в смысле разъединительном;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция</strong><strong> </strong><strong>синхронизации</strong><strong> –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Barrier(MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция указывается без условий на номер процесса.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, останавливается и ждет, пока все остальные процессы, принадлежащие коммуникатору «comm» не обратятся к этой функции. После выполнения данной функции её действие прекращается и код, стоящий после вызова этой функции, будет снова выполняться одновременно всеми процессами, принадлежащими коммуникатору «comm».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция широкоформатного вещания –</strong><strong><em></em></strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Bcast(void *buf, int count, MPI_Datatype type, int source, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>buf</em></strong> - адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong> - номер рассылающего процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция выполняет рассылку сообщения от процесса «source» всем процессам, включая рассылающий процесс. При возврате из процедуры содержимое буфера «buf» процесса «source» будет скопировано в локальный буфер процесса. Значения параметров «count», «datatype» и «source» должны быть одинаковыми у всех процессов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция выполнения коллективной операции –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Reduce(void *sbuf, void *rbuf, int count, MPI_Datatype type, MPI_Op op, int root, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера для аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера для результата</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число аргументов у каждого процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Op</em></strong><strong><em> </em></strong><strong><em>op</em></strong> - идентификатор глобальной операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong> - процесс-получатель результата</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция выполняет коллективную операцию «op<strong>»</strong> над аргументами «sbuf», которые берутся с каждого процесса. Результат операции сохраняется на процессе «root» в переменной «rbuf».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция выполнения коллективной операции с общим сохранением –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Allreduce(void *sbuf, void *rbuf, int count, MPI_Datatype type,</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Op op, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера для аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера для результата</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число аргументов у каждого процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Op</em></strong><strong><em> </em></strong><strong><em>op</em></strong> - идентификатор глобальной операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данную функцию можно представить, как функцию «MPI_Reduce», где результат коллективной операции сохраняется на всех процессах, а не только на главном.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция выполнения коллективной операции с сохранением промежуточных результатов –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Scan(void *sbuf, void *rbuf, int count, MPI_Datatype type,</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Op op, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера для аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера для результата</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число аргументов у каждого процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Op</em></strong><strong><em> </em></strong><strong><em>op</em></strong> - идентификатор глобальной операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Каждый процесс применяет коллективную операцию к своему аргументу и к аргументам процессов, находящихся перед ним.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция сбора данных от каждого процесса в один массив –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Gather(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, MPI_Datatype rtype, int root, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов в посылаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип элементов отсылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера сборки данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - число элементов в принимаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong> - номер процесса, на котором происходит сборка данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Сборка данных со всех процессов в буфере «rbuf» процесса «dest». Каждый процесс, включая «root», посылает содержимое своего буфера «sbuf» процессу «dest». Собирающий процесс сохраняет данные в буфере «rbuf», располагая их в порядке возрастания номеров процессов. Параметр «rbuf» имеет значение только на собирающем процессе и на остальных игнорируется, значения параметров «count», «datatype» и «root» должны быть одинаковыми у всех процессов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция сбора данных от каждого процесса в один массив с общим сохранением –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Allgather(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, MPI_Datatype rtype, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов в посылаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип элементов отсылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера сборки данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - число элементов в принимаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная функция является аналогом функции «MPI_Gather», но сборка выполняется всеми процессами группы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция сбора данных в один массив с переменным числом аргументов и с заданным размещением данных –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Gatherv(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, int *disp, MPI_Datatype rtype, int root, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов в посылаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип элементов отсылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера сборки данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - целочисленный массив (размер равен числу процессов в группе), i-й элемент которого определяет число элементов, которое должно быть получено от процесса i</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>disp</em></strong><strong><em> </em></strong>- целочисленный массив (размер равен числу процессов в группе), i-ое значение определяет смещение i-го блока данных относительно начала «rbuf»</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong> - номер процесса, на котором происходит сборка данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция позволяет собирать блоки с разным числом элементов от каждого процесса, так как количество элементов, принимаемых от каждого процесса, задается индивидуально с помощью массива «rcount». Эта функция обеспечивает также большую гибкость при размещении данных в процессе-получателе, благодаря введению в качестве параметра массива смещений «disp».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция сбора данных в один массив с переменным числом аргументов и с заданным размещением данных с общим сохранением –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Allgatherv(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, int *disp, MPI_Datatype rtype, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов в посылаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип элементов отсылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера сборки данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - целочисленный массив (размер равен числу процессов в группе), i-й элемент которого определяет число элементов, которое должно быть получено от процесса i</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>disp</em></strong><strong><em> </em></strong>- целочисленный массив (размер равен числу процессов в группе), i-ое значение определяет смещение i-го блока данных относительно начала «rbuf»</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная функция является аналогом функции «MPI_Gatherv», но сборка выполняется всеми процессами группы. Поэтому в списке параметров отсутствует параметр «root».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция рассылки равного числа данных с одного процесса остальным –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Scatter(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, MPI_Datatype rtype, int root, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong>&nbsp; -адрес начала размещения блоков распределяемых данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов, посылаемых каждому процессу</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера приема</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong><strong><em> </em></strong>- число получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong> - номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong><strong><em> </em></strong>- идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция рассылает сообщение из буфера посылки процесса «root» на равные части размером «scount» и посылает i-ю часть в буфер приема процесса с номером i (в том числе и самому себе). Процесс «root» использует оба буфера (посылки и приема), поэтому в вызываемой им подпрограмме все параметры являются существенными. Остальные процессы группы с коммуникатором «comm» являются только получателями, поэтому для них параметры, специфицирующие буфер посылки, не существенны.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция рассылки переменного числа данных с различным смещением с одного процесса остальным –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Scatterv(void* sbuf, int *scounts, int *disp, MPI_Datatype stype, void* rbuf, int rcount, MPI_Datatype rtype, int root, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера посылки (используется только в процессе-отправителе root)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>scounts</em></strong>&nbsp; - целочисленный массив (размер равен числу процессов в группе), содержащий число элементов, посылаемых каждому процессу</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>disp</em></strong> - целочисленный массив (размер равен числу процессов в группе), i-ое значение определяет смещение относительно начала «sbuf» для данных, посылаемых процессу i</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong><strong><em> </em></strong>- тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>rbuf</em></strong> - адрес начала буфера приема</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - число получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong><strong><em> </em></strong>- тип получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong><strong><em> </em></strong>- номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong><strong><em> </em></strong>– идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция является векторным вариантом функции «MPI_Scatter», позволяющим посылать каждому процессу различное количество элементов. Начало расположения элементов блока, посылаемого i-му процессу, задается в массиве смещений «disp», а число посылаемых элементов - в массиве «scounts». Эта функция является обратной по отношению к функции «MPI_Gatherv».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция совмещенной коллективной операции –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Alltoall(void* sbuf, int scount, MPI_Datatype stype, void* rbuf, int rcount, MPI_Datatype rtype, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong><strong><em> </em></strong>- тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>rbuf</em></strong><strong><em> </em></strong>- адрес начала буфера приема</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong><strong><em> </em></strong>- число элементов, получаемых от каждого процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция совмещает в себе операции «Scatter» и «Gather» и является по сути дела расширением операции «Allgather», когда каждый процесс посылает различные данные разным получателям. Процесс i посылает j-ый блок своего буфера «<em>sbuf</em>» процессу j, который помещает его в i-ый блок своего буфера «<em>rbuf</em>». Количество посланных данных должно быть равно количеству полученных данных для каждой пары процессов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция совмещенной коллективной операции со смещением –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Alltoallv(void* sbuf, int *scounts, int *sdisp, MPI_Datatype stype, void* rbuf, int *rcounts, int *rdisp, MPI_Datatype rtype, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>scounts</em></strong> - целочисленный массив, равный размеру группы, определяющий количество элементов для отправки каждому процессору</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>sdisp</em></strong> - целочисленный массив (размер группы длины). Запись j указывает смещение (относительно «sbuf», из которого можно взять исходящие данные, предназначенные для процесса j</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong><strong><em> </em></strong>- тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>rcounts</em></strong> - целочисленный массив, равный размеру группы, определяющий максимальное количество элементов, которые могут быть получены от каждого процессора</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>rdisp</em></strong> - целочисленный массив (размер группы длины). Запись i указывает смещение (относительно «rbuf», в котором помещаются входящие данные из процесса i</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция реализует векторный вариант операции «Alltoall», допускающий передачу и прием блоков различной длины с более гибким размещением передаваемых и принимаемых данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->', 'Тема 5. Функции коллективного взаимодействия процессов.', '', 'inherit', 'closed', 'closed', '', '270-revision-v1', '', '', '2021-06-09 17:25:13', '2021-06-09 14:25:13', '', 270, 'http://brainfood-project/?p=271', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(272, 1, '2021-06-09 17:25:50', '2021-06-09 14:25:50', '<!-- wp:paragraph -->\n<p><strong>Константы, описывающие коллективные операции:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>MPI_SUM – нахождение суммы;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_PROD – нахождение произведения;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_MAX – нахождение максимального значения;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_MIN – нахождение минимального значения;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_LAND – выполнение логической конъюнкции;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_BAND – выполнение битовой конъюнкции;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_LOR – выполнение логической дизъюнкции;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_BOR – выполнение битовой дизъюнкции;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_LXOR – выполнение логической дизъюнкции в смысле разъединительном;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_BXOR – выполнение битовой дизъюнкции в смысле разъединительном;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция</strong><strong> </strong><strong>синхронизации</strong><strong> –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Barrier(MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция указывается без условий на номер процесса.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, останавливается и ждет, пока все остальные процессы, принадлежащие коммуникатору «comm» не обратятся к этой функции. После выполнения данной функции её действие прекращается и код, стоящий после вызова этой функции, будет снова выполняться одновременно всеми процессами, принадлежащими коммуникатору «comm».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция широкоформатного вещания –</strong><strong><em></em></strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Bcast(void *buf, int count, MPI_Datatype type, int source, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>buf</em></strong> - адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong> - номер рассылающего процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция выполняет рассылку сообщения от процесса «source» всем процессам, включая рассылающий процесс. При возврате из процедуры содержимое буфера «buf» процесса «source» будет скопировано в локальный буфер процесса. Значения параметров «count», «datatype» и «source» должны быть одинаковыми у всех процессов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция выполнения коллективной операции –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Reduce(void *sbuf, void *rbuf, int count, MPI_Datatype type, MPI_Op op, int root, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера для аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера для результата</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число аргументов у каждого процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Op</em></strong><strong><em> </em></strong><strong><em>op</em></strong> - идентификатор глобальной операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong> - процесс-получатель результата</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция выполняет коллективную операцию «op<strong>»</strong> над аргументами «sbuf», которые берутся с каждого процесса. Результат операции сохраняется на процессе «root» в переменной «rbuf».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция выполнения коллективной операции с общим сохранением –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Allreduce(void *sbuf, void *rbuf, int count, MPI_Datatype type,</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Op op, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера для аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера для результата</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число аргументов у каждого процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Op</em></strong><strong><em> </em></strong><strong><em>op</em></strong> - идентификатор глобальной операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данную функцию можно представить, как функцию «MPI_Reduce», где результат коллективной операции сохраняется на всех процессах, а не только на главном.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция выполнения коллективной операции с сохранением промежуточных результатов –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Scan(void *sbuf, void *rbuf, int count, MPI_Datatype type,</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Op op, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера для аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера для результата</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число аргументов у каждого процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Op</em></strong><strong><em> </em></strong><strong><em>op</em></strong> - идентификатор глобальной операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Каждый процесс применяет коллективную операцию к своему аргументу и к аргументам процессов, находящихся перед ним.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция сбора данных от каждого процесса в один массив –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Gather(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, MPI_Datatype rtype, int root, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов в посылаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип элементов отсылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера сборки данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - число элементов в принимаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong> - номер процесса, на котором происходит сборка данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Сборка данных со всех процессов в буфере «rbuf» процесса «dest». Каждый процесс, включая «root», посылает содержимое своего буфера «sbuf» процессу «dest». Собирающий процесс сохраняет данные в буфере «rbuf», располагая их в порядке возрастания номеров процессов. Параметр «rbuf» имеет значение только на собирающем процессе и на остальных игнорируется, значения параметров «count», «datatype» и «root» должны быть одинаковыми у всех процессов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция сбора данных от каждого процесса в один массив с общим сохранением –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Allgather(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, MPI_Datatype rtype, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов в посылаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип элементов отсылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера сборки данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - число элементов в принимаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная функция является аналогом функции «MPI_Gather», но сборка выполняется всеми процессами группы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция сбора данных в один массив с переменным числом аргументов и с заданным размещением данных –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Gatherv(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, int *disp, MPI_Datatype rtype, int root, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов в посылаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип элементов отсылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера сборки данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - целочисленный массив (размер равен числу процессов в группе), i-й элемент которого определяет число элементов, которое должно быть получено от процесса i</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>disp</em></strong><strong><em> </em></strong>- целочисленный массив (размер равен числу процессов в группе), i-ое значение определяет смещение i-го блока данных относительно начала «rbuf»</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong> - номер процесса, на котором происходит сборка данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция позволяет собирать блоки с разным числом элементов от каждого процесса, так как количество элементов, принимаемых от каждого процесса, задается индивидуально с помощью массива «rcount». Эта функция обеспечивает также большую гибкость при размещении данных в процессе-получателе, благодаря введению в качестве параметра массива смещений «disp».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция сбора данных в один массив с переменным числом аргументов и с заданным размещением данных с общим сохранением –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Allgatherv(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, int *disp, MPI_Datatype rtype, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов в посылаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип элементов отсылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера сборки данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - целочисленный массив (размер равен числу процессов в группе), i-й элемент которого определяет число элементов, которое должно быть получено от процесса i</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>disp</em></strong><strong><em> </em></strong>- целочисленный массив (размер равен числу процессов в группе), i-ое значение определяет смещение i-го блока данных относительно начала «rbuf»</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная функция является аналогом функции «MPI_Gatherv», но сборка выполняется всеми процессами группы. Поэтому в списке параметров отсутствует параметр «root».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция рассылки равного числа данных с одного процесса остальным –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Scatter(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, MPI_Datatype rtype, int root, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong>&nbsp; -адрес начала размещения блоков распределяемых данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов, посылаемых каждому процессу</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера приема</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong><strong><em> </em></strong>- число получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong> - номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong><strong><em> </em></strong>- идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция рассылает сообщение из буфера посылки процесса «root» на равные части размером «scount» и посылает i-ю часть в буфер приема процесса с номером i (в том числе и самому себе). Процесс «root» использует оба буфера (посылки и приема), поэтому в вызываемой им подпрограмме все параметры являются существенными. Остальные процессы группы с коммуникатором «comm» являются только получателями, поэтому для них параметры, специфицирующие буфер посылки, не существенны.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция рассылки переменного числа данных с различным смещением с одного процесса остальным –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Scatterv(void* sbuf, int *scounts, int *disp, MPI_Datatype stype, void* rbuf, int rcount, MPI_Datatype rtype, int root, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера посылки (используется только в процессе-отправителе root)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>scounts</em></strong>&nbsp; - целочисленный массив (размер равен числу процессов в группе), содержащий число элементов, посылаемых каждому процессу</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>disp</em></strong> - целочисленный массив (размер равен числу процессов в группе), i-ое значение определяет смещение относительно начала «sbuf» для данных, посылаемых процессу i</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong><strong><em> </em></strong>- тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>rbuf</em></strong> - адрес начала буфера приема</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - число получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong><strong><em> </em></strong>- тип получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong><strong><em> </em></strong>- номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong><strong><em> </em></strong>– идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция является векторным вариантом функции «MPI_Scatter», позволяющим посылать каждому процессу различное количество элементов. Начало расположения элементов блока, посылаемого i-му процессу, задается в массиве смещений «disp», а число посылаемых элементов - в массиве «scounts». Эта функция является обратной по отношению к функции «MPI_Gatherv».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция совмещенной коллективной операции –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Alltoall(void* sbuf, int scount, MPI_Datatype stype, void* rbuf, int rcount, MPI_Datatype rtype, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong><strong><em> </em></strong>- тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>rbuf</em></strong><strong><em> </em></strong>- адрес начала буфера приема</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong><strong><em> </em></strong>- число элементов, получаемых от каждого процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция совмещает в себе операции «Scatter» и «Gather» и является по сути дела расширением операции «Allgather», когда каждый процесс посылает различные данные разным получателям. Процесс i посылает j-ый блок своего буфера «<em>sbuf</em>» процессу j, который помещает его в i-ый блок своего буфера «<em>rbuf</em>». Количество посланных данных должно быть равно количеству полученных данных для каждой пары процессов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция совмещенной коллективной операции со смещением –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Alltoallv(void* sbuf, int *scounts, int *sdisp, MPI_Datatype stype, void* rbuf, int *rcounts, int *rdisp, MPI_Datatype rtype, MPI_Comm comm);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>scounts</em></strong> - целочисленный массив, равный размеру группы, определяющий количество элементов для отправки каждому процессору</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>sdisp</em></strong> - целочисленный массив (размер группы длины). Запись j указывает смещение (относительно «sbuf», из которого можно взять исходящие данные, предназначенные для процесса j</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong><strong><em> </em></strong>- тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>rcounts</em></strong> - целочисленный массив, равный размеру группы, определяющий максимальное количество элементов, которые могут быть получены от каждого процессора</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>rdisp</em></strong> - целочисленный массив (размер группы длины). Запись i указывает смещение (относительно «rbuf», в котором помещаются входящие данные из процесса i</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция реализует векторный вариант операции «Alltoall», допускающий передачу и прием блоков различной длины с более гибким размещением передаваемых и принимаемых данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->', 'Тема 5. Функции коллективного взаимодействия процессов.', '', 'inherit', 'closed', 'closed', '', '270-revision-v1', '', '', '2021-06-09 17:25:50', '2021-06-09 14:25:50', '', 270, 'http://brainfood-project/?p=272', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(274, 1, '2021-06-09 17:28:25', '2021-06-09 14:28:25', '<!-- wp:paragraph -->\n<p><strong>Константы, описывающие коллективные операции:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>MPI_SUM – нахождение суммы;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_PROD – нахождение произведения;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_MAX – нахождение максимального значения;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_MIN – нахождение минимального значения;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_LAND – выполнение логической конъюнкции;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_BAND – выполнение битовой конъюнкции;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_LOR – выполнение логической дизъюнкции;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_BOR – выполнение битовой дизъюнкции;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_LXOR – выполнение логической дизъюнкции в смысле разъединительном;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_BXOR – выполнение битовой дизъюнкции в смысле разъединительном;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция синхронизации –</strong> <strong><em>int MPI_Barrier(MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция указывается без условий на номер процесса.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, останавливается и ждет, пока все остальные процессы, принадлежащие коммуникатору «comm» не обратятся к этой функции. После выполнения данной функции её действие прекращается и код, стоящий после вызова этой функции, будет снова выполняться одновременно всеми процессами, принадлежащими коммуникатору «comm».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция широкоформатного вещания – <em>int MPI_Bcast(void *buf, int count, MPI_Datatype type, int source, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>buf</em></strong> - адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong> - номер рассылающего процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция выполняет рассылку сообщения от процесса «source» всем процессам, включая рассылающий процесс. При возврате из процедуры содержимое буфера «buf» процесса «source» будет скопировано в локальный буфер процесса. Значения параметров «count», «datatype» и «source» должны быть одинаковыми у всех процессов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция выполнения коллективной операции –</strong> <strong><em>int MPI_Reduce(void *sbuf, void *rbuf, int count, MPI_Datatype type, MPI_Op op, int root, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера для аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера для результата</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число аргументов у каждого процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Op</em></strong><strong><em> </em></strong><strong><em>op</em></strong> - идентификатор глобальной операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong> - процесс-получатель результата</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция выполняет коллективную операцию «op<strong>»</strong> над аргументами «sbuf», которые берутся с каждого процесса. Результат операции сохраняется на процессе «root» в переменной «rbuf».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция выполнения коллективной операции с общим сохранением –</strong> <strong><em>int MPI_Allreduce(void *sbuf, void *rbuf, int count, MPI_Datatype type,</em></strong> <strong><em>MPI_Op op, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера для аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера для результата</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число аргументов у каждого процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Op</em></strong><strong><em> </em></strong><strong><em>op</em></strong> - идентификатор глобальной операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данную функцию можно представить, как функцию «MPI_Reduce», где результат коллективной операции сохраняется на всех процессах, а не только на главном.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция выполнения коллективной операции с сохранением промежуточных результатов –</strong> <strong><em>int MPI_Scan(void *sbuf, void *rbuf, int count, MPI_Datatype type, MPI_Op op, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера для аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера для результата</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число аргументов у каждого процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Op</em></strong><strong><em> </em></strong><strong><em>op</em></strong> - идентификатор глобальной операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Каждый процесс применяет коллективную операцию к своему аргументу и к аргументам процессов, находящихся перед ним.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция сбора данных от каждого процесса в один массив –</strong> <strong><em>int MPI_Gather(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, MPI_Datatype rtype, int root, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов в посылаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип элементов отсылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера сборки данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - число элементов в принимаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong> - номер процесса, на котором происходит сборка данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Сборка данных со всех процессов в буфере «rbuf» процесса «dest». Каждый процесс, включая «root», посылает содержимое своего буфера «sbuf» процессу «dest». Собирающий процесс сохраняет данные в буфере «rbuf», располагая их в порядке возрастания номеров процессов. Параметр «rbuf» имеет значение только на собирающем процессе и на остальных игнорируется, значения параметров «count», «datatype» и «root» должны быть одинаковыми у всех процессов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция сбора данных от каждого процесса в один массив с общим сохранением –</strong> <strong><em>int MPI_Allgather(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, MPI_Datatype rtype, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов в посылаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип элементов отсылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера сборки данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - число элементов в принимаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная функция является аналогом функции «MPI_Gather», но сборка выполняется всеми процессами группы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция сбора данных в один массив с переменным числом аргументов и с заданным размещением данных –</strong> <strong><em>int MPI_Gatherv(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, int *disp, MPI_Datatype rtype, int root, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов в посылаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип элементов отсылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера сборки данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - целочисленный массив (размер равен числу процессов в группе), i-й элемент которого определяет число элементов, которое должно быть получено от процесса i</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>disp</em></strong><strong><em> </em></strong>- целочисленный массив (размер равен числу процессов в группе), i-ое значение определяет смещение i-го блока данных относительно начала «rbuf»</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong> - номер процесса, на котором происходит сборка данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция позволяет собирать блоки с разным числом элементов от каждого процесса, так как количество элементов, принимаемых от каждого процесса, задается индивидуально с помощью массива «rcount». Эта функция обеспечивает также большую гибкость при размещении данных в процессе-получателе, благодаря введению в качестве параметра массива смещений «disp».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция сбора данных в один массив с переменным числом аргументов и с заданным размещением данных с общим сохранением –</strong> <strong><em>int MPI_Allgatherv(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, int *disp, MPI_Datatype rtype, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов в посылаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип элементов отсылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера сборки данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - целочисленный массив (размер равен числу процессов в группе), i-й элемент которого определяет число элементов, которое должно быть получено от процесса i</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>disp</em></strong><strong><em> </em></strong>- целочисленный массив (размер равен числу процессов в группе), i-ое значение определяет смещение i-го блока данных относительно начала «rbuf»</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Данная функция является аналогом функции «MPI_Gatherv», но сборка выполняется всеми процессами группы. Поэтому в списке параметров отсутствует параметр «root».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция рассылки равного числа данных с одного процесса остальным –</strong> <strong><em>int MPI_Scatter(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, MPI_Datatype rtype, int root, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong>&nbsp; -адрес начала размещения блоков распределяемых данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов, посылаемых каждому процессу</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера приема</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong><strong><em> </em></strong>- число получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong> - номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong><strong><em> </em></strong>- идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция рассылает сообщение из буфера посылки процесса «root» на равные части размером «scount» и посылает i-ю часть в буфер приема процесса с номером i (в том числе и самому себе). Процесс «root» использует оба буфера (посылки и приема), поэтому в вызываемой им подпрограмме все параметры являются существенными. Остальные процессы группы с коммуникатором «comm» являются только получателями, поэтому для них параметры, специфицирующие буфер посылки, не существенны.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция рассылки переменного числа данных с различным смещением с одного процесса остальным –</strong> <strong><em>int MPI_Scatterv(void* sbuf, int *scounts, int *disp, MPI_Datatype stype, void* rbuf, int rcount, MPI_Datatype rtype, int root, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера посылки (используется только в процессе-отправителе root)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>scounts</em></strong>&nbsp; - целочисленный массив (размер равен числу процессов в группе), содержащий число элементов, посылаемых каждому процессу</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>disp</em></strong> - целочисленный массив (размер равен числу процессов в группе), i-ое значение определяет смещение относительно начала «sbuf» для данных, посылаемых процессу i</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong><strong><em> </em></strong>- тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>rbuf</em></strong> - адрес начала буфера приема</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - число получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong><strong><em> </em></strong>- тип получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong><strong><em> </em></strong>- номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong><strong><em> </em></strong>– идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция является векторным вариантом функции «MPI_Scatter», позволяющим посылать каждому процессу различное количество элементов. Начало расположения элементов блока, посылаемого i-му процессу, задается в массиве смещений «disp», а число посылаемых элементов - в массиве «scounts». Эта функция является обратной по отношению к функции «MPI_Gatherv».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция совмещенной коллективной операции –</strong> <strong><em>int MPI_Alltoall(void* sbuf, int scount, MPI_Datatype stype, void* rbuf, int rcount, MPI_Datatype rtype, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong><strong><em> </em></strong>- тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>rbuf</em></strong><strong><em> </em></strong>- адрес начала буфера приема</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong><strong><em> </em></strong>- число элементов, получаемых от каждого процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция совмещает в себе операции «Scatter» и «Gather» и является по сути дела расширением операции «Allgather», когда каждый процесс посылает различные данные разным получателям. Процесс i посылает j-ый блок своего буфера «<em>sbuf</em>» процессу j, который помещает его в i-ый блок своего буфера «<em>rbuf</em>». Количество посланных данных должно быть равно количеству полученных данных для каждой пары процессов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция совмещенной коллективной операции со смещением –</strong> <strong><em>int MPI_Alltoallv(void* sbuf, int *scounts, int *sdisp, MPI_Datatype stype, void* rbuf, int *rcounts, int *rdisp, MPI_Datatype rtype, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>scounts</em></strong> - целочисленный массив, равный размеру группы, определяющий количество элементов для отправки каждому процессору</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>sdisp</em></strong> - целочисленный массив (размер группы длины). Запись j указывает смещение (относительно «sbuf», из которого можно взять исходящие данные, предназначенные для процесса j</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong><strong><em> </em></strong>- тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>rcounts</em></strong> - целочисленный массив, равный размеру группы, определяющий максимальное количество элементов, которые могут быть получены от каждого процессора</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>rdisp</em></strong> - целочисленный массив (размер группы длины). Запись i указывает смещение (относительно «rbuf», в котором помещаются входящие данные из процесса i</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция реализует векторный вариант операции «Alltoall», допускающий передачу и прием блоков различной длины с более гибким размещением передаваемых и принимаемых данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->', 'Тема 5. Функции коллективного взаимодействия процессов.', '', 'inherit', 'closed', 'closed', '', '270-revision-v1', '', '', '2021-06-09 17:28:25', '2021-06-09 14:28:25', '', 270, 'http://brainfood-project/?p=274', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(276, 1, '2021-06-09 17:30:38', '2021-06-09 14:30:38', '<!-- wp:paragraph -->\n<p><strong>Константы, описывающие коллективные операции:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>MPI_SUM – нахождение суммы;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_PROD – нахождение произведения;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_MAX – нахождение максимального значения;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_MIN – нахождение минимального значения;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_LAND – выполнение логической конъюнкции;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_BAND – выполнение битовой конъюнкции;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_LOR – выполнение логической дизъюнкции;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_BOR – выполнение битовой дизъюнкции;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_LXOR – выполнение логической дизъюнкции в смысле разъединительном;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_BXOR – выполнение битовой дизъюнкции в смысле разъединительном;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция синхронизации –</strong> <strong><em>int MPI_Barrier(MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция указывается без условий на номер процесса.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, останавливается и ждет, пока все остальные процессы, принадлежащие коммуникатору «comm» не обратятся к этой функции. После выполнения данной функции её действие прекращается и код, стоящий после вызова этой функции, будет снова выполняться одновременно всеми процессами, принадлежащими коммуникатору «comm».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция широкоформатного вещания – <em>int MPI_Bcast(void *buf, int count, MPI_Datatype type, int source, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>buf</em></strong> - адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong> - номер рассылающего процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm</em></strong> - идентификатор группы </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция выполняет рассылку сообщения от процесса «source» всем процессам, включая рассылающий процесс. При возврате из процедуры содержимое буфера «buf» процесса «source» будет скопировано в локальный буфер процесса. Значения параметров «count», «datatype» и «source» должны быть одинаковыми у всех процессов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция выполнения коллективной операции –</strong> <strong><em>int MPI_Reduce(void *sbuf, void *rbuf, int count, MPI_Datatype type, MPI_Op op, int root, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера для аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера для результата</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число аргументов у каждого процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Op</em></strong><strong><em> </em></strong><strong><em>op</em></strong> - идентификатор глобальной операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong> - процесс-получатель результата</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция выполняет коллективную операцию «op<strong>»</strong> над аргументами «sbuf», которые берутся с каждого процесса. Результат операции сохраняется на процессе «root» в переменной «rbuf».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция выполнения коллективной операции с общим сохранением –</strong> <strong><em>int MPI_Allreduce(void *sbuf, void *rbuf, int count, MPI_Datatype type,</em></strong> <strong><em>MPI_Op op, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера для аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера для результата</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число аргументов у каждого процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Op</em></strong><strong><em> </em></strong><strong><em>op</em></strong> - идентификатор глобальной операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данную функцию можно представить, как функцию «MPI_Reduce», где результат коллективной операции сохраняется на всех процессах, а не только на главном.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция выполнения коллективной операции с сохранением промежуточных результатов –</strong> <strong><em>int MPI_Scan(void *sbuf, void *rbuf, int count, MPI_Datatype type, MPI_Op op, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера для аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера для результата</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число аргументов у каждого процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип аргументов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Op</em></strong><strong><em> </em></strong><strong><em>op</em></strong> - идентификатор глобальной операции</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Каждый процесс применяет коллективную операцию к своему аргументу и к аргументам процессов, находящихся перед ним.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция сбора данных от каждого процесса в один массив –</strong> <strong><em>int MPI_Gather(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, MPI_Datatype rtype, int root, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов в посылаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип элементов отсылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера сборки данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - число элементов в принимаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong> - номер процесса, на котором происходит сборка данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Сборка данных со всех процессов в буфере «rbuf» процесса «dest». Каждый процесс, включая «root», посылает содержимое своего буфера «sbuf» процессу «dest». Собирающий процесс сохраняет данные в буфере «rbuf», располагая их в порядке возрастания номеров процессов. Параметр «rbuf» имеет значение только на собирающем процессе и на остальных игнорируется, значения параметров «count», «datatype» и «root» должны быть одинаковыми у всех процессов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция сбора данных от каждого процесса в один массив с общим сохранением –</strong> <strong><em>int MPI_Allgather(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, MPI_Datatype rtype, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов в посылаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип элементов отсылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера сборки данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - число элементов в принимаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная функция является аналогом функции «MPI_Gather», но сборка выполняется всеми процессами группы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция сбора данных в один массив с переменным числом аргументов и с заданным размещением данных –</strong> <strong><em>int MPI_Gatherv(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, int *disp, MPI_Datatype rtype, int root, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов в посылаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип элементов отсылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера сборки данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - целочисленный массив (размер равен числу процессов в группе), i-й элемент которого определяет число элементов, которое должно быть получено от процесса i</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>disp</em></strong><strong><em> </em></strong>- целочисленный массив (размер равен числу процессов в группе), i-ое значение определяет смещение i-го блока данных относительно начала «rbuf»</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong> - номер процесса, на котором происходит сборка данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция позволяет собирать блоки с разным числом элементов от каждого процесса, так как количество элементов, принимаемых от каждого процесса, задается индивидуально с помощью массива «rcount». Эта функция обеспечивает также большую гибкость при размещении данных в процессе-получателе, благодаря введению в качестве параметра массива смещений «disp».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция сбора данных в один массив с переменным числом аргументов и с заданным размещением данных с общим сохранением –</strong> <strong><em>int MPI_Allgatherv(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, int *disp, MPI_Datatype rtype, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов в посылаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип элементов отсылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера сборки данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - целочисленный массив (размер равен числу процессов в группе), i-й элемент которого определяет число элементов, которое должно быть получено от процесса i</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>disp</em></strong><strong><em> </em></strong>- целочисленный массив (размер равен числу процессов в группе), i-ое значение определяет смещение i-го блока данных относительно начала «rbuf»</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная функция является аналогом функции «MPI_Gatherv», но сборка выполняется всеми процессами группы. Поэтому в списке параметров отсутствует параметр «root».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция рассылки равного числа данных с одного процесса остальным –</strong> <strong><em>int MPI_Scatter(void *sbuf, int scount, MPI_Datatype stype, void *rbuf, int rcount, MPI_Datatype rtype, int root, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong>&nbsp; -адрес начала размещения блоков распределяемых данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число элементов, посылаемых каждому процессу</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера приема</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong><strong><em> </em></strong>- число получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong> - номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm </em></strong>- идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция рассылает сообщение из буфера посылки процесса «root» на равные части размером «scount» и посылает i-ю часть в буфер приема процесса с номером i (в том числе и самому себе). Процесс «root» использует оба буфера (посылки и приема), поэтому в вызываемой им подпрограмме все параметры являются существенными. Остальные процессы группы с коммуникатором «comm» являются только получателями, поэтому для них параметры, специфицирующие буфер посылки, не существенны.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция рассылки переменного числа данных с различным смещением с одного процесса остальным –</strong> <strong><em>int MPI_Scatterv(void* sbuf, int *scounts, int *disp, MPI_Datatype stype, void* rbuf, int rcount, MPI_Datatype rtype, int root, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера посылки (используется только в процессе-отправителе root)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>scounts</em></strong>&nbsp; - целочисленный массив (размер равен числу процессов в группе), содержащий число элементов, посылаемых каждому процессу</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>disp</em></strong> - целочисленный массив (размер равен числу процессов в группе), i-ое значение определяет смещение относительно начала «sbuf» для данных, посылаемых процессу i</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong><strong><em> </em></strong>- тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>rbuf</em></strong> - адрес начала буфера приема</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - число получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong><strong><em> </em></strong>- тип получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>root</em></strong><strong><em> </em></strong>- номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm </em></strong>– идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция является векторным вариантом функции «MPI_Scatter», позволяющим посылать каждому процессу различное количество элементов. Начало расположения элементов блока, посылаемого i-му процессу, задается в массиве смещений «disp», а число посылаемых элементов - в массиве «scounts». Эта функция является обратной по отношению к функции «MPI_Gatherv».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция совмещенной коллективной операции –</strong> <strong><em>int MPI_Alltoall(void* sbuf, int scount, MPI_Datatype stype, void* rbuf, int rcount, MPI_Datatype rtype, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong><strong><em> </em></strong>- тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>rbuf</em></strong><strong><em> </em></strong>- адрес начала буфера приема</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong><strong><em> </em></strong>- число элементов, получаемых от каждого процесса</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция совмещает в себе операции «Scatter» и «Gather» и является по сути дела расширением операции «Allgather», когда каждый процесс посылает различные данные разным получателям. Процесс i посылает j-ый блок своего буфера «<em>sbuf</em>» процессу j, который помещает его в i-ый блок своего буфера «<em>rbuf</em>». Количество посланных данных должно быть равно количеству полученных данных для каждой пары процессов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция совмещенной коллективной операции со смещением –</strong> <strong><em>int MPI_Alltoallv(void* sbuf, int *scounts, int *sdisp, MPI_Datatype stype, void* rbuf, int *rcounts, int *rdisp, MPI_Datatype rtype, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>sbuf</em></strong> &nbsp;- адрес начала буфера посылки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>scounts</em></strong> - целочисленный массив, равный размеру группы, определяющий количество элементов для отправки каждому процессору</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>sdisp</em></strong> - целочисленный массив (размер группы длины). Запись j указывает смещение (относительно «sbuf», из которого можно взять исходящие данные, предназначенные для процесса j</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong><strong><em> </em></strong>- тип посылаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>rcounts</em></strong> - целочисленный массив, равный размеру группы, определяющий максимальное количество элементов, которые могут быть получены от каждого процессора</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>rdisp</em></strong> - целочисленный массив (размер группы длины). Запись i указывает смещение (относительно «rbuf», в котором помещаются входящие данные из процесса i</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип получаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция реализует векторный вариант операции «Alltoall», допускающий передачу и прием блоков различной длины с более гибким размещением передаваемых и принимаемых данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->', 'Тема 5. Функции коллективного взаимодействия процессов.', '', 'inherit', 'closed', 'closed', '', '270-revision-v1', '', '', '2021-06-09 17:30:38', '2021-06-09 14:30:38', '', 270, 'http://brainfood-project/?p=276', 0, 'revision', '', 0),
(277, 1, '2021-06-09 17:32:12', '2021-06-09 14:32:12', '<!-- wp:paragraph -->\n<p>Для передачи несмежных данных, данных различного типа можно использовать функции упаковки, которые помещают в буфер последовательно данные и передают их как единое целое.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>В этом случае тип данных в терминологии MPI определяется как MPI_PACKED.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Созданный и упакованный буфер имеет размер больше, чем сумма данных в байтах.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>При приеме и передачи упакованных данных используются функции «MPI_Send()» и «MPI_Recv()» соответственно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция упаковки сообщений –</strong> <strong><em>int MPI_Pack(void* inbuf, int incount, MPI_Datatype type, void* outbuf, int outsize, int *position, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>inbuf</em></strong> - адрес упакованного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>incount</em></strong> - число упакованных элементов&nbsp;&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип данных упакованных элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>outbuf</em></strong> - адрес выходного буфера</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>outsize</em></strong> - размер выходного буфера в байтах &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>position</em></strong><strong><em> </em></strong>- указатель на переменную целого типа, в которой сохраняется текущая позиция в упакованном буфере&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm</em></strong> - коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция пакует сообщение в буфер посылки, описанный аргументами «inbuf», «incount», «datatype» в буферном пространстве, описанном аргументами «outbuf» и «outsize». Входным буфером может быть любой коммуникационный буфер, разрешенный в «MPI_Send()». Входное значение «position» есть первая ячейка в выходном буфере, которая должна быть использована для упаковки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция распаковки сообщений –</strong> <strong><em>int MPI_Unpack(void* inbuf, int insize, int *position, void *outbuf, int outcount, MPI_Datatype type, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>inbuf</em></strong><strong><em> </em></strong>- адрес упакованного буфера</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>insize</em></strong><strong><em> </em></strong>- размер входного буфера в байтах</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>position</em></strong><strong><em> </em></strong>- адрес переменной целого типа, в которой сохраняется текущая позиция в распакованном буфере&nbsp;&nbsp;&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>outbuf</em></strong><strong><em> </em></strong>- начало выходного буфера</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>outcount</em></strong><strong><em> </em></strong>- число распакованных элементов&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип данных распакованных элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm </em></strong>- коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция распаковывает сообщение в приемный буфер, описанный аргументами «outbuf», «outcount», «datatype» из буферного пространства, описанного аргументами «inbuf» и «insize». Выходным буфером может быть любой коммуникационный буфер, разрешенный в «MPI_Recv()». Входной буфер есть смежная область памяти, содержащая «insize» байтов, начиная с адреса «inbuf». Входное значение «position» есть первая ячейка во входном буфере, занятом упакованным сообщением.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->', 'Тема 6. Функции упаковки и распаковки сообщений.', '', 'publish', 'closed', 'closed', '', 'tema-6-funkcii-upakovki-i-raspakovki-soobshhenij', '', '', '2021-06-09 17:48:39', '2021-06-09 14:48:39', '', 244, 'http://brainfood-project/?page_id=277', 0, 'page', '', 0),
(278, 1, '2021-06-09 17:32:12', '2021-06-09 14:32:12', '<!-- wp:paragraph -->\n<p>Для передачи несмежных данных, данных различного типа можно использовать функции упаковки, которые помещают в буфер последовательно данные и передают их как единое целое.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>В этом случае тип данных в терминологии MPI определяется как MPI_PACKED.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Созданный и упакованный буфер имеет размер больше, чем сумма данных в байтах.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>При приеме и передачи упакованных данных используются функции «MPI_Send()» и «MPI_Recv()» соответственно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция упаковки сообщений –</strong> <strong><em>int MPI_Pack(void* inbuf, int incount, MPI_Datatype type, void* outbuf, int outsize, int *position, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>inbuf</em></strong> - адрес упакованного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>incount</em></strong> - число упакованных элементов&nbsp;&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип данных упакованных элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>outbuf</em></strong> - адрес выходного буфера</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>outsize</em></strong> - размер выходного буфера в байтах &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>position</em></strong><strong><em> </em></strong>- указатель на переменную целого типа, в которой сохраняется текущая позиция в упакованном буфере&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция пакует сообщение в буфер посылки, описанный аргументами «inbuf», «incount», «datatype» в буферном пространстве, описанном аргументами «outbuf» и «outsize». Входным буфером может быть любой коммуникационный буфер, разрешенный в «MPI_Send()». Входное значение «position» есть первая ячейка в выходном буфере, которая должна быть использована для упаковки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция распаковки сообщений –</strong> <strong><em>int MPI_Unpack(void* inbuf, int insize, int *position, void *outbuf, int outcount, MPI_Datatype type, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>inbuf</em></strong><strong><em> </em></strong>- адрес упакованного буфера</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>insize</em></strong><strong><em> </em></strong>- размер входного буфера в байтах</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>position</em></strong><strong><em> </em></strong>- адрес переменной целого типа, в которой сохраняется текущая позиция в распакованном буфере&nbsp;&nbsp;&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>outbuf</em></strong><strong><em> </em></strong>- начало выходного буфера</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>outcount</em></strong><strong><em> </em></strong>- число распакованных элементов&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип данных распакованных элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong><strong><em> </em></strong>- коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция распаковывает сообщение в приемный буфер, описанный аргументами «outbuf», «outcount», «datatype» из буферного пространства, описанного аргументами «inbuf» и «insize». Выходным буфером может быть любой коммуникационный буфер, разрешенный в «MPI_Recv()». Входной буфер есть смежная область памяти, содержащая «insize» байтов, начиная с адреса «inbuf». Входное значение «position» есть первая ячейка во входном буфере, занятом упакованным сообщением.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->', 'Тема 6. Функции упаковки и распаковки сообщений.', '', 'inherit', 'closed', 'closed', '', '277-revision-v1', '', '', '2021-06-09 17:32:12', '2021-06-09 14:32:12', '', 277, 'http://brainfood-project/?p=278', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(280, 1, '2021-06-09 17:33:23', '2021-06-09 14:33:23', '<!-- wp:paragraph -->\n<p>Для передачи несмежных данных, данных различного типа можно использовать функции упаковки, которые помещают в буфер последовательно данные и передают их как единое целое.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>В этом случае тип данных в терминологии MPI определяется как MPI_PACKED.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Созданный и упакованный буфер имеет размер больше, чем сумма данных в байтах.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>При приеме и передачи упакованных данных используются функции «MPI_Send()» и «MPI_Recv()» соответственно.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция упаковки сообщений –</strong> <strong><em>int MPI_Pack(void* inbuf, int incount, MPI_Datatype type, void* outbuf, int outsize, int *position, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>inbuf</em></strong> - адрес упакованного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>incount</em></strong> - число упакованных элементов&nbsp;&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип данных упакованных элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>outbuf</em></strong> - адрес выходного буфера</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>outsize</em></strong> - размер выходного буфера в байтах &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>position</em></strong><strong><em> </em></strong>- указатель на переменную целого типа, в которой сохраняется текущая позиция в упакованном буфере&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm</em></strong> - коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция пакует сообщение в буфер посылки, описанный аргументами «inbuf», «incount», «datatype» в буферном пространстве, описанном аргументами «outbuf» и «outsize». Входным буфером может быть любой коммуникационный буфер, разрешенный в «MPI_Send()». Входное значение «position» есть первая ячейка в выходном буфере, которая должна быть использована для упаковки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция распаковки сообщений –</strong> <strong><em>int MPI_Unpack(void* inbuf, int insize, int *position, void *outbuf, int outcount, MPI_Datatype type, MPI_Comm comm);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>inbuf</em></strong><strong><em> </em></strong>- адрес упакованного буфера</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>insize</em></strong><strong><em> </em></strong>- размер входного буфера в байтах</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>position</em></strong><strong><em> </em></strong>- адрес переменной целого типа, в которой сохраняется текущая позиция в распакованном буфере&nbsp;&nbsp;&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>outbuf</em></strong><strong><em> </em></strong>- начало выходного буфера</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>outcount</em></strong><strong><em> </em></strong>- число распакованных элементов&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип данных распакованных элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Comm comm </em></strong>- коммуникатор</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция распаковывает сообщение в приемный буфер, описанный аргументами «outbuf», «outcount», «datatype» из буферного пространства, описанного аргументами «inbuf» и «insize». Выходным буфером может быть любой коммуникационный буфер, разрешенный в «MPI_Recv()». Входной буфер есть смежная область памяти, содержащая «insize» байтов, начиная с адреса «inbuf». Входное значение «position» есть первая ячейка во входном буфере, занятом упакованным сообщением.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->', 'Тема 6. Функции упаковки и распаковки сообщений.', '', 'inherit', 'closed', 'closed', '', '277-revision-v1', '', '', '2021-06-09 17:33:23', '2021-06-09 14:33:23', '', 277, 'http://brainfood-project/?p=280', 0, 'revision', '', 0),
(281, 1, '2021-06-09 17:37:41', '2021-06-09 14:37:41', '<!-- wp:paragraph -->\n<p>Если необходимо передать сообщение, которое содержит значения разных типов данных или не смежной области данных, то можно поступить следующим образом:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li>Упаковать сообщение на передающем процессе, распаковать его на принимающим. Но это требует дополнительных операций копирования в память на каждом процессе.</li><li>Создать производный тип данных</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Универсальный тип данных </strong>– это скрытый объект MPI, который описывается двумя составляющими:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>1 - последовательность базисных типов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>2 - последовательность смещений</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Не требуется, чтобы смещения были различными, положительными и возрастающими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Карта типа</strong> – это последовательность пар и последовательность смещений.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Сигнатура типа</strong> – это последовательность базисных типов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Созданный производный тип можно использовать в операциях обмена вместо базисного типа MPI_Datatype.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Производные типы данных отличаются следующим образом: MPI_Datatype <strong>mytype</strong>;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция конструктора производного типа данных –</strong> <strong><em>int MPI_Type_contiguous(int count, MPI_Datatype oldtype, MPI_Datatype *newtype);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число элементов базового типа</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>oldtype</em></strong><strong><em> </em></strong>- базовый тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Datatype *newtype</em></strong> - новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция создает новый тип, элементы которого состоят из указанного числа элементов базового типа, занимающих смежные области памяти.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция универсального конструктора производного типа данных –</strong> <strong><em>int MPI_Type_vector(int count, int blocklength, int stride, MPI_Datatype oldtype, MPI_Datatype *newtype);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число блоков</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>blocklength</em></strong><strong><em> </em></strong>- число элементов базового типа в каждом блоке</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>stride</em></strong><strong><em> </em></strong>- шаг между началами соседних блоков, измеренный числом элементов базового типа</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>oldtype</em></strong><strong><em> </em></strong>- базовый тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Datatype *newtype </em></strong>- новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция создает тип, элемент которого представляет собой несколько равноудаленных друг от друга блоков из одинакового числа смежных элементов базового типа. Функция создает тип «newtype», элемент которого состоит из «count» блоков, каждый из которых содержит одинаковое число «blocklength» элементов типа «oldtype». Шаг «stride» между началом блока и началом следующего блока всюду одинаков и кратен протяженности представления базового типа.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция конструктор для блоков разной длины с разным смещением –</strong> <strong><em>int MPI_Type_indexed(int count, int *array_of_blocklengths, int *array_of_displacements, MPI_Datatype oldtype, MPI_Datatype *newtype);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число блоков</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>blocklengths</em></strong><strong><em> </em></strong>- массив, содержащий число элементов базового типа в каждом блоке</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>displacements</em></strong><strong><em> </em></strong>- массив смещений каждого блока от начала размещения элемента нового типа, смещения измеряются числом элементов базового типа</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>oldtype</em></strong><strong><em> </em></strong>- базовый тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Datatype *newtype </em></strong>- новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция является более универсальным конструктором по сравнению с «MPI_Type_vector()», так как элементы создаваемого типа состоят из произвольных по длине блоков с произвольным смещением блоков от начала размещения элемента. Смещения измеряются в элементах старого типа. &nbsp;Функция позволяет собрать старый тип «oldtype» в последовательность блоков, где каждый блок может иметь различное число смещений. Все смещения кратны «oldtype». Если смещения для каждого блока указаны в байтах, то используют функцию «MPI_Type_hindexed()».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки. &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция общего типа конструктора – <em>&nbsp;int MPI_Type_struct(int count, int *array_of_blocklengths, &nbsp;MPI_Aint *array_of_displacements, MPI_Datatype *array_of_types, MPI_Datatype *newtype);</em></strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число блоков</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>blocklengths</em></strong><strong><em> </em></strong>- массив, содержащий число элементов одного из базовых типов в каждом блоке</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Aint</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>displacements</em></strong><strong><em> </em></strong>- массив смещений каждого блока от начала размещения структуры, смещения измеряются в байтах</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>types</em></strong><strong><em> </em></strong>- массив, содержащий тип элементов в каждом блоке</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Datatype *newtype </em></strong>- новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция представляет самый универсальный из всех конструкторов типа. Создаваемый им тип является структурой, состоящей из произвольного числа блоков, каждый из которых может содержать произвольное число элементов одного из базовых типов и может быть смещен на произвольное число байтов от начала размещения структуры.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция объявления производного типа данных –</strong> <strong><em>int MPI_Type_commit(MPI_Datatype *datatype);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Datatype *datatype</em></strong> - новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция регистрирует созданный производный тип. Только после регистрации новый тип может использоваться в коммуникационных операциях.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция удаления производного типа данных –</strong> <strong><em>int MPI_Type_free(MPI_Datatype *datatype);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Datatype *datatype</em></strong> - новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция освобождает производный тип, т.е. присваивает ему значение константы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Адресная функция –</strong> <strong><em>int MPI_Address(void *loc, MPI_Aint *disp);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>loc</em></strong><strong><em> </em></strong>- ячейка в памяти, адрес которой необходимо узнать</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Aint *disp </em></strong>- адрес данной ячейки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция возвращает в «disp» адрес «loc».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->', 'Тема 7. Производный тип данных. Универсальный тип данных.', '', 'publish', 'closed', 'closed', '', 'tema-7-proizvodnyj-tip-dannyh-universalnyj-tip-dannyh', '', '', '2021-06-09 17:48:44', '2021-06-09 14:48:44', '', 244, 'http://brainfood-project/?page_id=281', 0, 'page', '', 0),
(282, 1, '2021-06-09 17:37:41', '2021-06-09 14:37:41', '<!-- wp:paragraph -->\n<p>Если необходимо передать сообщение, которое содержит значения разных типов данных или не смежной области данных, то можно поступить следующим образом:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li>Упаковать сообщение на передающем процессе, распаковать его на принимающим. Но это требует дополнительных операций копирования в память на каждом процессе.</li><li>Создать производный тип данных</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Универсальный тип данных </strong>– это скрытый объект MPI, который описывается двумя составляющими:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>1 - последовательность базисных типов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>2 - последовательность смещений</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Не требуется, чтобы смещения были различными, положительными и возрастающими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Карта типа</strong> – это последовательность пар и последовательность смещений.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Сигнатура типа</strong> – это последовательность базисных типов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Созданный производный тип можно использовать в операциях обмена вместо базисного типа MPI_Datatype.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Производные типы данных отличаются следующим образом: MPI_Datatype <strong>mytype</strong>;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция конструктора производного типа данных –</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Type_contiguous(int count, MPI_Datatype oldtype, MPI_Datatype *newtype);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число элементов базового типа</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>oldtype</em></strong><strong><em> </em></strong>- базовый тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> *</em></strong><strong><em>newtype</em></strong> - новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция создает новый тип, элементы которого состоят из указанного числа элементов базового типа, занимающих смежные области памяти.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция универсального конструктора производного типа данных –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Type_vector(int count, int blocklength, int stride, MPI_Datatype oldtype, MPI_Datatype *newtype);</em></strong><strong></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число блоков</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>blocklength</em></strong><strong><em> </em></strong>- число элементов базового типа в каждом блоке</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>stride</em></strong><strong><em> </em></strong>- шаг между началами соседних блоков, измеренный числом элементов базового типа</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>oldtype</em></strong><strong><em> </em></strong>- базовый тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> *</em></strong><strong><em>newtype</em></strong><strong><em> </em></strong>- новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция создает тип, элемент которого представляет собой несколько равноудаленных друг от друга блоков из одинакового числа смежных элементов базового типа. Функция создает тип «newtype», элемент которого состоит из «count» блоков, каждый из которых содержит одинаковое число «blocklength» элементов типа «oldtype». Шаг «stride» между началом блока и началом следующего блока всюду одинаков и кратен протяженности представления базового типа.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция конструктор для блоков разной длины с разным смещением –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Type_indexed(int count, int *array_of_blocklengths, int *array_of_displacements, MPI_Datatype oldtype, MPI_Datatype *newtype);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число блоков</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>blocklengths</em></strong><strong><em> </em></strong>- массив, содержащий число элементов базового типа в каждом блоке</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>displacements</em></strong><strong><em> </em></strong>- массив смещений каждого блока от начала размещения элемента нового типа, смещения измеряются числом элементов базового типа</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>oldtype</em></strong><strong><em> </em></strong>- базовый тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> *</em></strong><strong><em>newtype</em></strong><strong><em> </em></strong>- новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция является более универсальным конструктором по сравнению с «MPI_Type_vector()», так как элементы создаваемого типа состоят из произвольных по длине блоков с произвольным смещением блоков от начала размещения элемента. Смещения измеряются в элементах старого типа. &nbsp;Функция позволяет собрать старый тип «oldtype» в последовательность блоков, где каждый блок может иметь различное число смещений. Все смещения кратны «oldtype». Если смещения для каждого блока указаны в байтах, то используют функцию «MPI_Type_hindexed()».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки. &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция общего типа конструктора – </strong><strong><em></em></strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>&nbsp;int MPI_Type_struct(int count, int *array_of_blocklengths, &nbsp;MPI_Aint *array_of_displacements, MPI_Datatype *array_of_types, MPI_Datatype *newtype);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число блоков</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>blocklengths</em></strong><strong><em> </em></strong>- массив, содержащий число элементов одного из базовых типов в каждом блоке</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Aint</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>displacements</em></strong><strong><em> </em></strong>- массив смещений каждого блока от начала размещения структуры, смещения измеряются в байтах</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>types</em></strong><strong><em> </em></strong>- массив, содержащий тип элементов в каждом блоке</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> *</em></strong><strong><em>newtype</em></strong><strong><em> </em></strong>- новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция представляет самый универсальный из всех конструкторов типа. Создаваемый им тип является структурой, состоящей из произвольного числа блоков, каждый из которых может содержать произвольное число элементов одного из базовых типов и может быть смещен на произвольное число байтов от начала размещения структуры.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция объявления производного типа данных –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Type_commit(MPI_Datatype *datatype);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> *</em></strong><strong><em>datatype</em></strong> - новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция регистрирует созданный производный тип. Только после регистрации новый тип может использоваться в коммуникационных операциях.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция удаления производного типа данных –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Type_free(MPI_Datatype *datatype);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> *</em></strong><strong><em>datatype</em></strong> - новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция освобождает производный тип, т.е. присваивает ему значение константы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Адресная функция –</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int MPI_Address(void *loc, MPI_Aint *disp);</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>loc</em></strong><strong><em> </em></strong>- ячейка в памяти, адрес которой необходимо узнать</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Aint</em></strong><strong><em> *</em></strong><strong><em>disp</em></strong><strong><em> </em></strong>- адрес данной ячейки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция возвращает в «disp» адрес «loc».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->', 'Тема 7. Производный тип данных. Универсальный тип данных.', '', 'inherit', 'closed', 'closed', '', '281-revision-v1', '', '', '2021-06-09 17:37:41', '2021-06-09 14:37:41', '', 281, 'http://brainfood-project/?p=282', 0, 'revision', '', 0),
(284, 1, '2021-06-09 17:39:21', '2021-06-09 14:39:21', '<!-- wp:paragraph -->\n<p>Если необходимо передать сообщение, которое содержит значения разных типов данных или не смежной области данных, то можно поступить следующим образом:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li>Упаковать сообщение на передающем процессе, распаковать его на принимающим. Но это требует дополнительных операций копирования в память на каждом процессе.</li><li>Создать производный тип данных</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Универсальный тип данных </strong>– это скрытый объект MPI, который описывается двумя составляющими:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>1 - последовательность базисных типов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>2 - последовательность смещений</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Не требуется, чтобы смещения были различными, положительными и возрастающими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Карта типа</strong> – это последовательность пар и последовательность смещений.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Сигнатура типа</strong> – это последовательность базисных типов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Созданный производный тип можно использовать в операциях обмена вместо базисного типа MPI_Datatype.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Производные типы данных отличаются следующим образом: MPI_Datatype <strong>mytype</strong>;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция конструктора производного типа данных –</strong> <strong><em>int MPI_Type_contiguous(int count, MPI_Datatype oldtype, MPI_Datatype *newtype);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число элементов базового типа</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>oldtype</em></strong><strong><em> </em></strong>- базовый тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> *</em></strong><strong><em>newtype</em></strong> - новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция создает новый тип, элементы которого состоят из указанного числа элементов базового типа, занимающих смежные области памяти.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция универсального конструктора производного типа данных –</strong> <strong><em>int MPI_Type_vector(int count, int blocklength, int stride, MPI_Datatype oldtype, MPI_Datatype *newtype);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число блоков</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>blocklength</em></strong><strong><em> </em></strong>- число элементов базового типа в каждом блоке</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>stride</em></strong><strong><em> </em></strong>- шаг между началами соседних блоков, измеренный числом элементов базового типа</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>oldtype</em></strong><strong><em> </em></strong>- базовый тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> *</em></strong><strong><em>newtype</em></strong><strong><em> </em></strong>- новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция создает тип, элемент которого представляет собой несколько равноудаленных друг от друга блоков из одинакового числа смежных элементов базового типа. Функция создает тип «newtype», элемент которого состоит из «count» блоков, каждый из которых содержит одинаковое число «blocklength» элементов типа «oldtype». Шаг «stride» между началом блока и началом следующего блока всюду одинаков и кратен протяженности представления базового типа.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция конструктор для блоков разной длины с разным смещением –</strong> <strong><em>int MPI_Type_indexed(int count, int *array_of_blocklengths, int *array_of_displacements, MPI_Datatype oldtype, MPI_Datatype *newtype);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число блоков</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>blocklengths</em></strong><strong><em> </em></strong>- массив, содержащий число элементов базового типа в каждом блоке</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>displacements</em></strong><strong><em> </em></strong>- массив смещений каждого блока от начала размещения элемента нового типа, смещения измеряются числом элементов базового типа</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>oldtype</em></strong><strong><em> </em></strong>- базовый тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> *</em></strong><strong><em>newtype</em></strong><strong><em> </em></strong>- новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция является более универсальным конструктором по сравнению с «MPI_Type_vector()», так как элементы создаваемого типа состоят из произвольных по длине блоков с произвольным смещением блоков от начала размещения элемента. Смещения измеряются в элементах старого типа. &nbsp;Функция позволяет собрать старый тип «oldtype» в последовательность блоков, где каждый блок может иметь различное число смещений. Все смещения кратны «oldtype». Если смещения для каждого блока указаны в байтах, то используют функцию «MPI_Type_hindexed()».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки. &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция общего типа конструктора – <em> int MPI_Type_struct(int count, int *array_of_blocklengths,  MPI_Aint *array_of_displacements, MPI_Datatype *array_of_types, MPI_Datatype *newtype);</em></strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число блоков</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>blocklengths</em></strong><strong><em> </em></strong>- массив, содержащий число элементов одного из базовых типов в каждом блоке</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Aint</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>displacements</em></strong><strong><em> </em></strong>- массив смещений каждого блока от начала размещения структуры, смещения измеряются в байтах</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>types</em></strong><strong><em> </em></strong>- массив, содержащий тип элементов в каждом блоке</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> *</em></strong><strong><em>newtype</em></strong><strong><em> </em></strong>- новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция представляет самый универсальный из всех конструкторов типа. Создаваемый им тип является структурой, состоящей из произвольного числа блоков, каждый из которых может содержать произвольное число элементов одного из базовых типов и может быть смещен на произвольное число байтов от начала размещения структуры.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция объявления производного типа данных –</strong> <strong><em>int MPI_Type_commit(MPI_Datatype *datatype);</em></strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> *</em></strong><strong><em>datatype</em></strong> - новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция регистрирует созданный производный тип. Только после регистрации новый тип может использоваться в коммуникационных операциях.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция удаления производного типа данных –</strong> <strong><em>int MPI_Type_free(MPI_Datatype *datatype);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> *</em></strong><strong><em>datatype</em></strong> - новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция освобождает производный тип, т.е. присваивает ему значение константы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Адресная функция –</strong> <strong><em>int MPI_Address(void *loc, MPI_Aint *disp);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>loc</em></strong><strong><em> </em></strong>- ячейка в памяти, адрес которой необходимо узнать</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Aint</em></strong><strong><em> *</em></strong><strong><em>disp</em></strong><strong><em> </em></strong>- адрес данной ячейки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция возвращает в «disp» адрес «loc».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->', 'Тема 7. Производный тип данных. Универсальный тип данных.', '', 'inherit', 'closed', 'closed', '', '281-revision-v1', '', '', '2021-06-09 17:39:21', '2021-06-09 14:39:21', '', 281, 'http://brainfood-project/?p=284', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(286, 1, '2021-06-09 17:41:24', '2021-06-09 14:41:24', '<!-- wp:paragraph -->\n<p>Если необходимо передать сообщение, которое содержит значения разных типов данных или не смежной области данных, то можно поступить следующим образом:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li>Упаковать сообщение на передающем процессе, распаковать его на принимающим. Но это требует дополнительных операций копирования в память на каждом процессе.</li><li>Создать производный тип данных</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Универсальный тип данных </strong>– это скрытый объект MPI, который описывается двумя составляющими:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>1 - последовательность базисных типов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>2 - последовательность смещений</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Не требуется, чтобы смещения были различными, положительными и возрастающими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Карта типа</strong> – это последовательность пар и последовательность смещений.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Сигнатура типа</strong> – это последовательность базисных типов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Созданный производный тип можно использовать в операциях обмена вместо базисного типа MPI_Datatype.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Производные типы данных отличаются следующим образом: MPI_Datatype <strong>mytype</strong>;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция конструктора производного типа данных –</strong> <strong><em>int MPI_Type_contiguous(int count, MPI_Datatype oldtype, MPI_Datatype *newtype);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число элементов базового типа</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>oldtype</em></strong><strong><em> </em></strong>- базовый тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Datatype *newtype</em></strong> - новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция создает новый тип, элементы которого состоят из указанного числа элементов базового типа, занимающих смежные области памяти.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция универсального конструктора производного типа данных –</strong> <strong><em>int MPI_Type_vector(int count, int blocklength, int stride, MPI_Datatype oldtype, MPI_Datatype *newtype);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число блоков</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>blocklength</em></strong><strong><em> </em></strong>- число элементов базового типа в каждом блоке</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>stride</em></strong><strong><em> </em></strong>- шаг между началами соседних блоков, измеренный числом элементов базового типа</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>oldtype</em></strong><strong><em> </em></strong>- базовый тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Datatype *newtype </em></strong>- новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция создает тип, элемент которого представляет собой несколько равноудаленных друг от друга блоков из одинакового числа смежных элементов базового типа. Функция создает тип «newtype», элемент которого состоит из «count» блоков, каждый из которых содержит одинаковое число «blocklength» элементов типа «oldtype». Шаг «stride» между началом блока и началом следующего блока всюду одинаков и кратен протяженности представления базового типа.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция конструктор для блоков разной длины с разным смещением –</strong> <strong><em>int MPI_Type_indexed(int count, int *array_of_blocklengths, int *array_of_displacements, MPI_Datatype oldtype, MPI_Datatype *newtype);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число блоков</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>blocklengths</em></strong><strong><em> </em></strong>- массив, содержащий число элементов базового типа в каждом блоке</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>displacements</em></strong><strong><em> </em></strong>- массив смещений каждого блока от начала размещения элемента нового типа, смещения измеряются числом элементов базового типа</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>oldtype</em></strong><strong><em> </em></strong>- базовый тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Datatype *newtype </em></strong>- новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция является более универсальным конструктором по сравнению с «MPI_Type_vector()», так как элементы создаваемого типа состоят из произвольных по длине блоков с произвольным смещением блоков от начала размещения элемента. Смещения измеряются в элементах старого типа.  Функция позволяет собрать старый тип «oldtype» в последовательность блоков, где каждый блок может иметь различное число смещений. Все смещения кратны «oldtype». Если смещения для каждого блока указаны в байтах, то используют функцию «MPI_Type_hindexed()».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки. &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция общего типа конструктора – <em> int MPI_Type_struct(int count, int *array_of_blocklengths,  MPI_Aint *array_of_displacements, MPI_Datatype *array_of_types, MPI_Datatype *newtype);</em></strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число блоков</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>blocklengths</em></strong><strong><em> </em></strong>- массив, содержащий число элементов одного из базовых типов в каждом блоке</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Aint</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>displacements</em></strong><strong><em> </em></strong>- массив смещений каждого блока от начала размещения структуры, смещения измеряются в байтах</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>types</em></strong><strong><em> </em></strong>- массив, содержащий тип элементов в каждом блоке</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Datatype *newtype </em></strong>- новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция представляет самый универсальный из всех конструкторов типа. Создаваемый им тип является структурой, состоящей из произвольного числа блоков, каждый из которых может содержать произвольное число элементов одного из базовых типов и может быть смещен на произвольное число байтов от начала размещения структуры.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция объявления производного типа данных –</strong> <strong><em>int MPI_Type_commit(MPI_Datatype *datatype);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Datatype *datatype</em></strong> - новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция регистрирует созданный производный тип. Только после регистрации новый тип может использоваться в коммуникационных операциях.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция удаления производного типа данных –</strong> <strong><em>int MPI_Type_free(MPI_Datatype *datatype);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Datatype *datatype</em></strong> - новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция освобождает производный тип, т.е. присваивает ему значение константы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Адресная функция –</strong> <strong><em>int MPI_Address(void *loc, MPI_Aint *disp);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>loc</em></strong><strong><em> </em></strong>- ячейка в памяти, адрес которой необходимо узнать</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Aint *disp </em></strong>- адрес данной ячейки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция возвращает в «disp» адрес «loc».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->', 'Тема 7. Производный тип данных. Универсальный тип данных.', '', 'inherit', 'closed', 'closed', '', '281-revision-v1', '', '', '2021-06-09 17:41:24', '2021-06-09 14:41:24', '', 281, 'http://brainfood-project/?p=286', 0, 'revision', '', 0),
(287, 1, '2021-06-09 17:44:08', '2021-06-09 14:44:08', ' ', '', '', 'publish', 'closed', 'closed', '', '287', '', '', '2021-06-09 17:44:08', '2021-06-09 14:44:08', '', 244, 'http://brainfood-project/?p=287', 15, 'nav_menu_item', '', 0),
(288, 1, '2021-06-09 17:44:08', '2021-06-09 14:44:08', ' ', '', '', 'publish', 'closed', 'closed', '', '288', '', '', '2021-06-09 17:44:08', '2021-06-09 14:44:08', '', 244, 'http://brainfood-project/?p=288', 14, 'nav_menu_item', '', 0),
(289, 1, '2021-06-09 17:44:08', '2021-06-09 14:44:08', ' ', '', '', 'publish', 'closed', 'closed', '', '289', '', '', '2021-06-09 17:44:08', '2021-06-09 14:44:08', '', 244, 'http://brainfood-project/?p=289', 13, 'nav_menu_item', '', 0),
(290, 1, '2021-06-09 17:44:08', '2021-06-09 14:44:08', ' ', '', '', 'publish', 'closed', 'closed', '', '290', '', '', '2021-06-09 17:44:08', '2021-06-09 14:44:08', '', 244, 'http://brainfood-project/?p=290', 12, 'nav_menu_item', '', 0),
(291, 1, '2021-06-09 17:44:08', '2021-06-09 14:44:08', ' ', '', '', 'publish', 'closed', 'closed', '', '291', '', '', '2021-06-09 17:44:08', '2021-06-09 14:44:08', '', 244, 'http://brainfood-project/?p=291', 11, 'nav_menu_item', '', 0),
(292, 1, '2021-06-09 17:44:08', '2021-06-09 14:44:08', ' ', '', '', 'publish', 'closed', 'closed', '', '292', '', '', '2021-06-09 17:44:08', '2021-06-09 14:44:08', '', 244, 'http://brainfood-project/?p=292', 10, 'nav_menu_item', '', 0),
(293, 1, '2021-06-09 17:44:08', '2021-06-09 14:44:08', ' ', '', '', 'publish', 'closed', 'closed', '', '293', '', '', '2021-06-09 17:44:08', '2021-06-09 14:44:08', '', 244, 'http://brainfood-project/?p=293', 9, 'nav_menu_item', '', 0),
(294, 1, '2021-06-09 17:48:17', '2021-06-09 14:48:17', '<!-- wp:paragraph -->\n<p><strong>Сообщение</strong> – это набор данных определенного типа.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Каждое сообщение имеет следующие атрибуты:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li>Размер</li><li>Номер процесса отправителя/получателя</li><li>Идентификатор/тег сообщения – целое число, которое должно совпадать у передающего и принимающего процесса.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Атрибуты сообщения записываются в структуру:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><em>struct</em><em> </em><em>MPI</em><em>_</em><em>Status</em><em></em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>{</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>int</em><em> </em><em>count</em><em>; // - количество принятых байт</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>int</em><em> </em><em>MPI</em><em>_</em><em>SOURCE</em><em>; // - номер процесса отправителя</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>int</em><em> </em><em>MPI</em><em>_</em><em>TAG</em><em>; // - </em><em>идентификатор принятого сообщения</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>int</em><em> </em><em>MPI</em><em>_</em><em>ERROR</em><em>; //- код ошибки при выполнении приема с блокировкой</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>};</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная структура в программе указывается как «MPI_Status status».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>В терминологии MPI тип передаваемых элементов обозначается следующим образом:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>MPI_INT – для передачи данных типа int;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_CHAR – для передачи данных типа char;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_FLOAT – для передачи данных типа float;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>MPI_DOUBLE – для передачи данных типа double.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция передачи сообщения с блокировкой – <em>int MPI_Send(void* buf, int count, MPI_Datatype type, int dest, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы, к которой принадлежат передающие и принимающие процессы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status</em></strong> - параметры отправленного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, будет передавать процессу «dest» данные типа «MPI_Datatype type», находящиеся по адресу «buf».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Если процесс-получатель не готов к обмену, то данные помещаются в буфер.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Функция успешно завершается, и процесс-отправитель продолжат свою работу.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Если процесс-получатель готов к приему сообщения, то процесс-отправитель передает данные и функция успешно завершается. В этом случае данные физически переданы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Передача и прием с блокировкой – это прием «точка-точка» или «отправитель-получатель».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>В некоторых случаях существует задержка по времени между обращением к функции передачи сообщения и ее физической передачей сообщения. За это время значение передаваемой переменной может быть изменено. Передаваться будет именно то значение, которое было на момент обращения к функции. Это обеспечивается тем, что во временный буфер записывается значение переменной, а не ее адрес.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция синхронной передачи сообщения –</strong> <strong><em>int MPI_Ssend(void* buf, int count, MPI_Datatype type, int dest, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong> - адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы, к которой принадлежат передающие и принимающие процессы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status</em></strong> - параметры отправленного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, не закончит выполнение передачи сообщения, пока оно не будет получено процессом-получателем. Если процесс-получатель не готов к приему сообщения, то возникнет бесконечное ожидание «deadlock».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция передачи сообщения по готовности –</strong> <strong><em>int MPI_Rsend(void * buf, int count, MPI_Datatype type, int dest, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> * </em></strong><strong><em>buf</em></strong> &nbsp;- адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы, к которой принадлежат передающие и принимающие процессы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status</em></strong> - параметры отправленного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Процесс, обратившийся к данной функции, сразу начинает передачу сообщения, не создавая никакого буфера. Если процесс-получатель не готов в этот момент времени к приему сообщения, то данная функция завершается с ошибкой.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция передачи сообщения с созданием буфера –</strong> <strong><em>int MPI_Bsend(void* buf, int count, MPI_Datatype type, int dest, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong> - адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы, к которой принадлежат передающие и принимающие процессы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status</em></strong> - параметры отправленного сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Программист с помощью специальных функций самостоятельно создает буфер, в который записываются данные. После этого он самостоятельно освобождает данный буфер, с которым теперь можно работать.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Пользователь самостоятельно может описать буфер, используемый для буферизации сообщений, посылаемых в режиме буферизации.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Буферизация выполняется отправителем с помощью специальных функций:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":30} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"left\",\"level\":3} -->\n<h3 class=\"has-text-align-left\"><strong>Функция создания буфера –</strong> <strong><em>int MPI_Buffer_attach (void* buf, int size);</em></strong> </h3>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":30} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong> - начальный адрес буфера</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>size</em></strong><strong><em> </em></strong>- размер буфера, в байтах</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>В результате вызова функции создается буфер с именем «buf» и размером «size» в байтах, который можно использовать только один раз, после чего его нужно отключить путем вызова подпрограммы отключения:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":30} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"left\",\"level\":3} -->\n<h3 class=\"has-text-align-left\"><strong>Функция отключения буфера –</strong> <strong>int <em>MPI_Buffer_detach (void* buf, int* size);</em></strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":30} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- начальный адрес буфера</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int* size</em></strong> - размер буфера, в байтах</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Отключение буфера операционно связано с MPI. Вызов возвращает адрес и размер отключенного буфера. Эта операция будет блокирована, пока находящееся в буфере сообщение не будет передано. После выполнения этой функции пользователь может повторно использовать или перераспределять объем памяти, занятый буфером.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция приема сообщения –</strong> <strong><em>int MPI_Recv(void* buf, int count, MPI_Datatype type, int source, int msgtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong> - адрес начала буфера приема сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - максимальное число элементов в принимаемом сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип элементов принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong> - номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>msgtag</em></strong> - идентификатор принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status</em></strong> - параметры принятого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Процесс-получатель ожидает, пока не получит всё сообщение полностью.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Только после получения сообщения полностью функция успешно завершается.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция совмещенного приема и передачи сообщения –</strong> <strong><em>int MPI_Sendrecv(void *sbuf, int scount, MPI_Datatype stype, int dest, int stag, void *rbuf, int rcount, MPI_Datatype rtype, int source, MPI_Datatype rtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>sbuf</em></strong> - адрес начала буфера посылки сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>scount</em></strong> - число передаваемых элементов в сообщении</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>stype</em></strong> - тип передаваемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>stag</em></strong> - идентификатор посылаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>rbuf</em></strong> - адрес начала буфера приема сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rcount</em></strong> - число принимаемых элементов сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtype</em></strong> - тип принимаемых элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong> - номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>rtag</em></strong> - идентификатор принимаемого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status </em></strong>- параметры принятого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Данная функция объединяет в едином запросе посылку и прием сообщений. Принимающий и отправляющий процессы могут являться одним и тем же процессом. Сообщение, отправленное функцией&nbsp;«MPI_Sendrecv», может быть принято обычным образом, и точно также функция «MPI_Sendrecv»&nbsp;может принять сообщение, отправленное обычной функцией «MPI_Send». Буфера приема и посылки обязательно должны быть различными.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция совмещенного приема и передачи сообщения c замещением –</strong> <strong><em>int MPI_Sendrecv_replace(void* buf, int count, MPI_Datatype type, int dest, int stag, int source, int rtag, MPI_Comm comm, MPI_Status *status);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em>* </em></strong><strong><em>buf</em></strong><strong><em> </em></strong>- начальный адрес буфера отправителя и получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong> - число элементов в буфере отправителя и получателя (целое)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong> - тип элементов в буфере отправителя и получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>dest</em></strong> - номер процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>stag</em></strong> - идентификатор процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>source</em></strong> - номер процесса-отправителя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>rtag</em></strong> - идентификатор процесса-получателя</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Comm</em></strong><strong><em> </em></strong><strong><em>comm</em></strong> - идентификатор группы</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Status *status </em></strong>- параметры сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция выполняет блокирующие передачи и приемы. Тот же самый буфер используется для отправки и получения, так что посланное сообщение замещается полученным. Семантика операции «send-receive» похожа на запуск двух конкурирующих потоков, когда один выполняет передачу, а другой - прием, с последующим объединением этих потоков.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\"} -->\n<h2 class=\"has-text-align-center\"><strong>Функция определения числа фактически полученных элементов сообщения –</strong> <strong><em>int MPI_Get_count(MPI_Status *status, MPI_Datatype type, int *count);</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Status</em></strong><strong><em> *</em></strong><strong><em>status</em></strong><strong><em> </em></strong>- атрибуты принятого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>type</em></strong><strong><em> </em></strong>- тип элементов принятого сообщения</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int *count </em></strong>- число полученных элементов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция может быть вызвана либо после чтения сообщения (функциями «MPI_Recv», «MPI_Irecv»), либо после опроса факта поступления сообщения (функциями MPI_Probe, MPI_Iprobe).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Операция чтения безвозвратно уничтожает информацию в буфере приема. При этом попытка считать сообщение с параметром «count» меньше, чем число элементов в буфере, приводит к потере сообщения.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->', 'Тема 3. Функции передачи и приема сообщений с блокировкой.', '', 'inherit', 'closed', 'closed', '', '255-revision-v1', '', '', '2021-06-09 17:48:17', '2021-06-09 14:48:17', '', 255, 'http://brainfood-project/?p=294', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(295, 1, '2021-06-09 17:48:44', '2021-06-09 14:48:44', '<!-- wp:paragraph -->\n<p>Если необходимо передать сообщение, которое содержит значения разных типов данных или не смежной области данных, то можно поступить следующим образом:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li>Упаковать сообщение на передающем процессе, распаковать его на принимающим. Но это требует дополнительных операций копирования в память на каждом процессе.</li><li>Создать производный тип данных</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Универсальный тип данных </strong>– это скрытый объект MPI, который описывается двумя составляющими:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>1 - последовательность базисных типов</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>2 - последовательность смещений</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Не требуется, чтобы смещения были различными, положительными и возрастающими.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Карта типа</strong> – это последовательность пар и последовательность смещений.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Сигнатура типа</strong> – это последовательность базисных типов.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Созданный производный тип можно использовать в операциях обмена вместо базисного типа MPI_Datatype.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Производные типы данных отличаются следующим образом: MPI_Datatype <strong>mytype</strong>;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>Функция конструктора производного типа данных –</strong> <strong><em>int MPI_Type_contiguous(int count, MPI_Datatype oldtype, MPI_Datatype *newtype);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число элементов базового типа</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>oldtype</em></strong><strong><em> </em></strong>- базовый тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Datatype *newtype</em></strong> - новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция создает новый тип, элементы которого состоят из указанного числа элементов базового типа, занимающих смежные области памяти.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция универсального конструктора производного типа данных –</strong> <strong><em>int MPI_Type_vector(int count, int blocklength, int stride, MPI_Datatype oldtype, MPI_Datatype *newtype);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число блоков</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>blocklength</em></strong><strong><em> </em></strong>- число элементов базового типа в каждом блоке</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>stride</em></strong><strong><em> </em></strong>- шаг между началами соседних блоков, измеренный числом элементов базового типа</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>oldtype</em></strong><strong><em> </em></strong>- базовый тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Datatype *newtype </em></strong>- новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция создает тип, элемент которого представляет собой несколько равноудаленных друг от друга блоков из одинакового числа смежных элементов базового типа. Функция создает тип «newtype», элемент которого состоит из «count» блоков, каждый из которых содержит одинаковое число «blocklength» элементов типа «oldtype». Шаг «stride» между началом блока и началом следующего блока всюду одинаков и кратен протяженности представления базового типа.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция конструктор для блоков разной длины с разным смещением –</strong> <strong><em>int MPI_Type_indexed(int count, int *array_of_blocklengths, int *array_of_displacements, MPI_Datatype oldtype, MPI_Datatype *newtype);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число блоков</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>blocklengths</em></strong><strong><em> </em></strong>- массив, содержащий число элементов базового типа в каждом блоке</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>displacements</em></strong><strong><em> </em></strong>- массив смещений каждого блока от начала размещения элемента нового типа, смещения измеряются числом элементов базового типа</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> </em></strong><strong><em>oldtype</em></strong><strong><em> </em></strong>- базовый тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Datatype *newtype </em></strong>- новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция является более универсальным конструктором по сравнению с «MPI_Type_vector()», так как элементы создаваемого типа состоят из произвольных по длине блоков с произвольным смещением блоков от начала размещения элемента. Смещения измеряются в элементах старого типа. &nbsp;Функция позволяет собрать старый тип «oldtype» в последовательность блоков, где каждый блок может иметь различное число смещений. Все смещения кратны «oldtype». Если смещения для каждого блока указаны в байтах, то используют функцию «MPI_Type_hindexed()».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки. &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Функция общего типа конструктора – <em>&nbsp;int MPI_Type_struct(int count, int *array_of_blocklengths, &nbsp;MPI_Aint *array_of_displacements, MPI_Datatype *array_of_types, MPI_Datatype *newtype);</em></strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> </em></strong><strong><em>count</em></strong><strong><em> </em></strong>- число блоков</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>int</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>blocklengths</em></strong><strong><em> </em></strong>- массив, содержащий число элементов одного из базовых типов в каждом блоке</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Aint</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>displacements</em></strong><strong><em> </em></strong>- массив смещений каждого блока от начала размещения структуры, смещения измеряются в байтах</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI</em></strong><strong><em>_</em></strong><strong><em>Datatype</em></strong><strong><em> *</em></strong><strong><em>array</em></strong><strong><em>_</em></strong><strong><em>of</em></strong><strong><em>_</em></strong><strong><em>types</em></strong><strong><em> </em></strong>- массив, содержащий тип элементов в каждом блоке</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Datatype *newtype </em></strong>- новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция представляет самый универсальный из всех конструкторов типа. Создаваемый им тип является структурой, состоящей из произвольного числа блоков, каждый из которых может содержать произвольное число элементов одного из базовых типов и может быть смещен на произвольное число байтов от начала размещения структуры.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция объявления производного типа данных –</strong> <strong><em>int MPI_Type_commit(MPI_Datatype *datatype);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Datatype *datatype</em></strong> - новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция регистрирует созданный производный тип. Только после регистрации новый тип может использоваться в коммуникационных операциях.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Функция удаления производного типа данных –</strong> <strong><em>int MPI_Type_free(MPI_Datatype *datatype);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Datatype *datatype</em></strong> - новый производный тип данных</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция освобождает производный тип, т.е. присваивает ему значение константы.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Адресная функция –</strong> <strong><em>int MPI_Address(void *loc, MPI_Aint *disp);</em></strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>void</em></strong><strong><em> *</em></strong><strong><em>loc</em></strong><strong><em> </em></strong>- ячейка в памяти, адрес которой необходимо узнать</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>MPI_Aint *disp </em></strong>- адрес данной ячейки</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Функция возвращает в «disp» адрес «loc».</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>(*) Функция возвращает константу «MPI_SUCCESS=0» в случае удачного завершения, либо код ошибки.</p>\n<!-- /wp:paragraph -->', 'Тема 7. Производный тип данных. Универсальный тип данных.', '', 'inherit', 'closed', 'closed', '', '281-revision-v1', '', '', '2021-06-09 17:48:44', '2021-06-09 14:48:44', '', 281, 'http://brainfood-project/?p=295', 0, 'revision', '', 0),
(296, 1, '2021-06-09 18:02:32', '2021-06-09 15:02:32', '', 'Модуль 1. Технология параллельного программирования CUDA', '', 'publish', 'closed', 'closed', '', 'modul-1-tehnologija-parallelnogo-programmirovanija-cuda', '', '', '2021-06-09 18:13:50', '2021-06-09 15:13:50', '', 0, 'http://brainfood-project/?page_id=296', 0, 'page', '', 0),
(297, 1, '2021-06-09 18:02:32', '2021-06-09 15:02:32', '', 'Модуль 1. Технология параллельного программирования CUDA', '', 'inherit', 'closed', 'closed', '', '296-revision-v1', '', '', '2021-06-09 18:02:32', '2021-06-09 15:02:32', '', 296, 'http://brainfood-project/?p=297', 0, 'revision', '', 0),
(298, 1, '2021-06-09 18:04:44', '2021-06-09 15:04:44', '<!-- wp:paragraph -->\n<p><strong>Технология CUDA</strong> (Compute Unified Device Architecture) – программно-аппаратная архитектура параллельных вычислений, которая позволяет существенно увеличить вычислительную производительность благодаря использованию графических процессоров фирмы Nvidia.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Концепция SIMD</strong> – одна команда обрабатывает сразу несколько потоков данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Мультипроцессор</strong> – многоядерный SIMD процессор, позволяющий в каждый определенный момент времени выполнять на всех ядрах только одну инструкцию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Device (устройство)</strong> – графический процессор (GPU), поддерживающий драйвер CUDA.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Host (хост)</strong> – программа в оперативной памяти ЦПУ, которая использует GPU, выполняя над ним управленческие функции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Kernel (ядро)</strong> – функция, которая вызывается на хосте и выполняется на девайсе.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Блочно-сеточная структура:</strong> На девайсе определяется сетка Grid, на которой будут проводиться вычисления. Сетка Grid состоит из блоков, каждый элемент блока – это тред.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":299,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-15.png\" alt=\"\" class=\"wp-image-299\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":300,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-16.png\" alt=\"\" class=\"wp-image-300\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":301,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-17.png\" alt=\"\" class=\"wp-image-301\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->', 'Тема 1. Концепция и основные понятия CUDA.', '', 'publish', 'closed', 'closed', '', 'tema-1-koncepcija-i-osnovnye-ponjatija-cuda', '', '', '2021-06-09 18:14:01', '2021-06-09 15:14:01', '', 296, 'http://brainfood-project/?page_id=298', 0, 'page', '', 0),
(299, 1, '2021-06-09 18:03:30', '2021-06-09 15:03:30', '', 'image-15', '', 'inherit', 'open', 'closed', '', 'image-15', '', '', '2021-06-09 18:03:30', '2021-06-09 15:03:30', '', 298, 'http://brainfood-project/wp-content/uploads/2021/06/image-15.png', 0, 'attachment', 'image/png', 0),
(300, 1, '2021-06-09 18:03:47', '2021-06-09 15:03:47', '', 'image-16', '', 'inherit', 'open', 'closed', '', 'image-16', '', '', '2021-06-09 18:03:47', '2021-06-09 15:03:47', '', 298, 'http://brainfood-project/wp-content/uploads/2021/06/image-16.png', 0, 'attachment', 'image/png', 0),
(301, 1, '2021-06-09 18:04:02', '2021-06-09 15:04:02', '', 'image-17', '', 'inherit', 'open', 'closed', '', 'image-17', '', '', '2021-06-09 18:04:02', '2021-06-09 15:04:02', '', 298, 'http://brainfood-project/wp-content/uploads/2021/06/image-17.png', 0, 'attachment', 'image/png', 0),
(302, 1, '2021-06-09 18:04:44', '2021-06-09 15:04:44', '<!-- wp:paragraph -->\n<p><strong>Технология CUDA</strong> (Compute Unified Device Architecture) – программно-аппаратная архитектура параллельных вычислений, которая позволяет существенно увеличить вычислительную производительность благодаря использованию графических процессоров фирмы Nvidia.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Концепция SIMD</strong> – одна команда обрабатывает сразу несколько потоков данных.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Мультипроцессор</strong> – многоядерный SIMD процессор, позволяющий в каждый определенный момент времени выполнять на всех ядрах только одну инструкцию.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Device (устройство)</strong> – графический процессор (GPU), поддерживающий драйвер CUDA.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Host (хост)</strong> – программа в оперативной памяти ЦПУ, которая использует GPU, выполняя над ним управленческие функции.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Kernel (ядро)</strong> – функция, которая вызывается на хосте и выполняется на девайсе.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Блочно-сеточная структура:</strong> На девайсе определяется сетка Grid, на которой будут проводиться вычисления. Сетка Grid состоит из блоков, каждый элемент блока – это тред.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":299,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-15.png\" alt=\"\" class=\"wp-image-299\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":300,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-16.png\" alt=\"\" class=\"wp-image-300\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":301,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"http://brainfood-project/wp-content/uploads/2021/06/image-17.png\" alt=\"\" class=\"wp-image-301\"/></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->', 'Тема 1. Концепция и основные понятия CUDA.', '', 'inherit', 'closed', 'closed', '', '298-revision-v1', '', '', '2021-06-09 18:04:44', '2021-06-09 15:04:44', '', 298, 'http://brainfood-project/?p=302', 0, 'revision', '', 0),
(303, 1, '2021-06-09 18:05:43', '2021-06-09 15:05:43', '<!-- wp:paragraph -->\n<p><strong>В концепции </strong><strong>CUDA</strong><strong> </strong><strong>существует 6 видов памяти:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li>Глобальная память устройства (device memory)</li><li>Текстурная память</li><li>Константная память</li><li>Разделяемая память</li><li>Локальная память</li><li>Регистры</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Тема 2. Виды памяти в CUDA.', '', 'publish', 'closed', 'closed', '', 'tema-2-vidy-pamjati-v-cuda', '', '', '2021-06-09 18:14:08', '2021-06-09 15:14:08', '', 296, 'http://brainfood-project/?page_id=303', 0, 'page', '', 0),
(304, 1, '2021-06-09 18:05:43', '2021-06-09 15:05:43', '<!-- wp:paragraph -->\n<p><strong>В концепции </strong><strong>CUDA</strong><strong> </strong><strong>существует 6 видов памяти:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li>Глобальная память устройства (device memory)</li><li>Текстурная память</li><li>Константная память</li><li>Разделяемая память</li><li>Локальная память</li><li>Регистры</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Тема 2. Виды памяти в CUDA.', '', 'inherit', 'closed', 'closed', '', '303-revision-v1', '', '', '2021-06-09 18:05:43', '2021-06-09 15:05:43', '', 303, 'http://brainfood-project/?p=304', 0, 'revision', '', 0),
(305, 1, '2021-06-09 18:06:51', '2021-06-09 15:06:51', '<!-- wp:paragraph -->\n<p>В структуре типа «CudaDeviceProp» прописаны поля, в которых указаны характеристики графического процессора.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Фрагмент программы, содержащей некоторые характеристики устройства:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>#include &lt;stdio.h&gt;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>#include &lt;cuda_runtime_api.h&gt;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>#include &lt;cuda_runtime.h&gt;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>int main(int argc, char **argv)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>{</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int deviceCount; //количество графических плат в данном компьютере</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int warpsize; int major,minor; int MultiProcessorCount;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cudaGetDeviceCount(&amp;deviceCount); //возвращает количество плат</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cudaDeviceProp prop;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; deviceCount; i++)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cudaGetDeviceProperties(&amp;prop, i);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(\"device - %d\\n\",i);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(\"name of device %s\\n\", prop.name);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(\"Global memory - %d\\n\", prop.totalGlobalMem);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(\"Common memory for a block - %d\\n\", prop.sharedMemPerBlock);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(\"Number of registers per block - %d\\n\", prop.regsPerBlock);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(\"Max size of block for each measurement&nbsp; - %d %d %d\\n\", prop.maxThreadsDim[0],prop.maxThreadsDim[1],prop.maxThreadsDim[2]);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(\"Max size of grid for each measurement - %d %d %d\\n\", prop.maxGridSize[0],prop.maxGridSize[1],prop.maxGridSize[2]);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(\"Warp size - %d\\n\",prop.warpSize);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(\"Major -%d\\n\",prop.major);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(\"Minor -%d\\n\",prop.minor);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fflush(stdin);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getchar();</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>}</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Для обозначение возможностей CUDA использует понятие Compute Capability, выражаемое парой чисел – major и minor. Первое число обозначает глобальную архитектурную версию, второе - небольшие изменения.</p>\n<!-- /wp:paragraph -->', 'Тема 3. Информация об устройстве. Характеристики GPU.', '', 'publish', 'closed', 'closed', '', 'tema-3-informacija-ob-ustrojstve-harakteristiki-gpu', '', '', '2021-06-09 18:14:13', '2021-06-09 15:14:13', '', 296, 'http://brainfood-project/?page_id=305', 0, 'page', '', 0),
(306, 1, '2021-06-09 18:06:51', '2021-06-09 15:06:51', '<!-- wp:paragraph -->\n<p>В структуре типа «CudaDeviceProp» прописаны поля, в которых указаны характеристики графического процессора.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Фрагмент программы, содержащей некоторые характеристики устройства:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>#include &lt;stdio.h&gt;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>#include &lt;cuda_runtime_api.h&gt;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>#include &lt;cuda_runtime.h&gt;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>int main(int argc, char **argv)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>{</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int deviceCount; //количество графических плат в данном компьютере</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int warpsize; int major,minor; int MultiProcessorCount;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cudaGetDeviceCount(&amp;deviceCount); //возвращает количество плат</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cudaDeviceProp prop;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; deviceCount; i++)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cudaGetDeviceProperties(&amp;prop, i);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(\"device - %d\\n\",i);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(\"name of device %s\\n\", prop.name);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(\"Global memory - %d\\n\", prop.totalGlobalMem);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(\"Common memory for a block - %d\\n\", prop.sharedMemPerBlock);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(\"Number of registers per block - %d\\n\", prop.regsPerBlock);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(\"Max size of block for each measurement&nbsp; - %d %d %d\\n\", prop.maxThreadsDim[0],prop.maxThreadsDim[1],prop.maxThreadsDim[2]);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(\"Max size of grid for each measurement - %d %d %d\\n\", prop.maxGridSize[0],prop.maxGridSize[1],prop.maxGridSize[2]);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(\"Warp size - %d\\n\",prop.warpSize);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(\"Major -%d\\n\",prop.major);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(\"Minor -%d\\n\",prop.minor);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fflush(stdin);</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getchar();</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>}</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Для обозначение возможностей CUDA использует понятие Compute Capability, выражаемое парой чисел – major и minor. Первое число обозначает глобальную архитектурную версию, второе - небольшие изменения.</p>\n<!-- /wp:paragraph -->', 'Тема 3. Информация об устройстве. Характеристики GPU.', '', 'inherit', 'closed', 'closed', '', '305-revision-v1', '', '', '2021-06-09 18:06:51', '2021-06-09 15:06:51', '', 305, 'http://brainfood-project/?p=306', 0, 'revision', '', 0),
(307, 1, '2021-06-09 18:08:33', '2021-06-09 15:08:33', '<!-- wp:paragraph -->\n<p><strong>Спецификаторы функций:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Перед именем функции указывается спецификатор, который определяет, где будет запускаться функция и где она будет выполняться.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>__device__ </strong>- вызывается на устройстве, выполняется на устройстве;</li><li><strong>__host__</strong> - вызывается на хосте, выполняется на хосте;</li><li><strong>__global__</strong> - вызывается на хосте, выполняется на устройстве.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Спецификатор «__global__» запускает функцию ядра «Kernel». Функция ядра не имеет возвращаемого значения.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Спецификатор «__global__» не может быть объединен с другими спецификаторами.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Если функция помечена спецификаторами «__device__» и «__host__», то компилятор создаёт две версии кода – для хоста и для устройства (CPU и GPU соответственно).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Примеры:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>__device__ float func1 (float a, float b, float *c)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;{…};</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>__host__ int func2 (double *mas, int n)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>{…};</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>__global__ void Kernel (float a, float b)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>{…};</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Спецификаторы типов переменных:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Для размещения в памяти GPU переменных используются следующие спецификаторы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>__device__ </strong>- в глобальной памяти GPU. Доступно для чтения на устройстве;</li><li><strong>__constant__</strong> - в константой памяти GPU. Доступно для чтения и записи на устройстве и хосте;</li><li><strong>__shared__</strong> - в общей памяти GPU. Доступно для чтения и записи блоками тредов.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Если спецификатор «__device__» не указан, то по умолчанию переменная располагается в глобальной памяти.</p>\n<!-- /wp:paragraph -->', 'Тема 4. Расширение языка C. Спецификаторы функций, спецификаторы типов.', '', 'publish', 'closed', 'closed', '', 'tema-4-rasshirenie-jazyka-c-specifikatory-funkcij-specifikatory-tipov', '', '', '2021-06-09 18:14:20', '2021-06-09 15:14:20', '', 296, 'http://brainfood-project/?page_id=307', 0, 'page', '', 0),
(308, 1, '2021-06-09 18:08:33', '2021-06-09 15:08:33', '<!-- wp:paragraph -->\n<p><strong>Спецификаторы функций:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Перед именем функции указывается спецификатор, который определяет, где будет запускаться функция и где она будет выполняться.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>__device__ </strong>- вызывается на устройстве, выполняется на устройстве;</li><li><strong>__host__</strong> - вызывается на хосте, выполняется на хосте;</li><li><strong>__global__</strong> - вызывается на хосте, выполняется на устройстве.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Спецификатор «__global__» запускает функцию ядра «Kernel». Функция ядра не имеет возвращаемого значения.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Спецификатор «__global__» не может быть объединен с другими спецификаторами.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Если функция помечена спецификаторами «__device__» и «__host__», то компилятор создаёт две версии кода – для хоста и для устройства (CPU и GPU соответственно).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Примеры:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>__device__ float func1 (float a, float b, float *c)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;{…};</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>__host__ int func2 (double *mas, int n)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>{…};</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>__global__ void Kernel (float a, float b)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>{…};</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Спецификаторы типов переменных:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Для размещения в памяти GPU переменных используются следующие спецификаторы:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>__device__ </strong>- в глобальной памяти GPU. Доступно для чтения на устройстве;</li><li><strong>__constant__</strong> - в константой памяти GPU. Доступно для чтения и записи на устройстве и хосте;</li><li><strong>__shared__</strong> - в общей памяти GPU. Доступно для чтения и записи блоками тредов.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Если спецификатор «__device__» не указан, то по умолчанию переменная располагается в глобальной памяти.</p>\n<!-- /wp:paragraph -->', 'Тема 4. Расширение языка C. Спецификаторы функций, спецификаторы типов.', '', 'inherit', 'closed', 'closed', '', '307-revision-v1', '', '', '2021-06-09 18:08:33', '2021-06-09 15:08:33', '', 307, 'http://brainfood-project/?p=308', 0, 'revision', '', 0),
(309, 1, '2021-06-09 18:12:10', '2021-06-09 15:12:10', '<!-- wp:paragraph -->\n<p><strong>Добавленные типы:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>В технологии CUDA добавлены следующие типы данных:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Одномерные: int1, uint1, long1, ulong1, float1, char1, uchar1, short1, ushort1</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Двумерные: int2, uint2, long2, ulong2, float2, char2, uchar2, short2, ushort2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Трехмерные: int3, uint3, long3, ulong3, float3, char3, uchar3, short3, ushort3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Четырехмерные: int4, uint4, long4, ulong4, float4, char4, uchar4, short4, ushort4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Для задания размерности вводится тип: «dim3», который основан на «uint3», но содержит конструктор, который инициализирует единицами необъявленные координаты вектора.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Добавленные переменные:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>В язык «C» добавлены следующие переменные:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>dim</strong><strong>3 </strong><strong>gridDim</strong><strong> </strong>– размер грида в блоках</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>gridDim.x<strong>&nbsp; </strong>– размер грида в блоках по оси x<strong></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>gridDim.x<strong>&nbsp; </strong>– размер грида в блоках по оси y</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>dim3 BlockDim </strong>– размер блока в тредах/нитях</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>blockDim.x<strong>&nbsp; </strong>– размер блока в тредах по оси x<strong></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>blockDim.y<strong>&nbsp; </strong>– размер блока в тредах по оси y</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>uint blockIdx </strong>– индекс текущего блока в гриде</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>blockIdx.x – индекс текущего блока в гриде по оси x</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>blockIdx.y – индекс текущего блока в гриде по оси y</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>uint threadIdx </strong>– индекс текущего треда в блоке</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>threadIdx.x – индекс текущего треда в блоке по оси x</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>threadIdx.y – индекс текущего треда в блоке по оси y</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>int warpsize </strong>– размер варпа, т.е. количества тредов, которые физически работают одновременно. В современных GPU размер варпа равен 32.</li></ol>\n<!-- /wp:list -->', 'Тема 5. Добавленные типы. Добавленные переменные.', '', 'publish', 'closed', 'closed', '', 'tema-5-dobavlennye-tipy-dobavlennye-peremennye', '', '', '2021-06-09 18:14:26', '2021-06-09 15:14:26', '', 296, 'http://brainfood-project/?page_id=309', 0, 'page', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(310, 1, '2021-06-09 18:12:10', '2021-06-09 15:12:10', '<!-- wp:paragraph -->\n<p><strong>Добавленные типы:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>В технологии CUDA добавлены следующие типы данных:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Одномерные: int1, uint1, long1, ulong1, float1, char1, uchar1, short1, ushort1</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Двумерные: int2, uint2, long2, ulong2, float2, char2, uchar2, short2, ushort2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Трехмерные: int3, uint3, long3, ulong3, float3, char3, uchar3, short3, ushort3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Четырехмерные: int4, uint4, long4, ulong4, float4, char4, uchar4, short4, ushort4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>Для задания размерности вводится тип: «dim3», который основан на «uint3», но содержит конструктор, который инициализирует единицами необъявленные координаты вектора.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p><strong>Добавленные переменные:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":20} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph -->\n<p>В язык «C» добавлены следующие переменные:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"type\":\"1\"} -->\n<ol type=\"1\"><li><strong>dim</strong><strong>3 </strong><strong>gridDim</strong><strong> </strong>– размер грида в блоках</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>gridDim.x<strong>&nbsp; </strong>– размер грида в блоках по оси x<strong></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>gridDim.x<strong>&nbsp; </strong>– размер грида в блоках по оси y</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>dim3 BlockDim </strong>– размер блока в тредах/нитях</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>blockDim.x<strong>&nbsp; </strong>– размер блока в тредах по оси x<strong></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>blockDim.y<strong>&nbsp; </strong>– размер блока в тредах по оси y</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>uint blockIdx </strong>– индекс текущего блока в гриде</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>blockIdx.x – индекс текущего блока в гриде по оси x</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>blockIdx.y – индекс текущего блока в гриде по оси y</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>uint threadIdx </strong>– индекс текущего треда в блоке</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>threadIdx.x – индекс текущего треда в блоке по оси x</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>threadIdx.y – индекс текущего треда в блоке по оси y</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>int warpsize </strong>– размер варпа, т.е. количества тредов, которые физически работают одновременно. В современных GPU размер варпа равен 32.</li></ol>\n<!-- /wp:list -->', 'Тема 5. Добавленные типы. Добавленные переменные.', '', 'inherit', 'closed', 'closed', '', '309-revision-v1', '', '', '2021-06-09 18:12:10', '2021-06-09 15:12:10', '', 309, 'http://brainfood-project/?p=310', 0, 'revision', '', 0),
(311, 1, '2021-06-09 18:13:17', '2021-06-09 15:13:17', ' ', '', '', 'publish', 'closed', 'closed', '', '311', '', '', '2021-06-09 18:13:17', '2021-06-09 15:13:17', '', 0, 'http://brainfood-project/?p=311', 1, 'nav_menu_item', '', 0),
(312, 1, '2021-06-09 18:13:17', '2021-06-09 15:13:17', ' ', '', '', 'publish', 'closed', 'closed', '', '312', '', '', '2021-06-09 18:13:17', '2021-06-09 15:13:17', '', 296, 'http://brainfood-project/?p=312', 6, 'nav_menu_item', '', 0),
(313, 1, '2021-06-09 18:13:17', '2021-06-09 15:13:17', ' ', '', '', 'publish', 'closed', 'closed', '', '313', '', '', '2021-06-09 18:13:17', '2021-06-09 15:13:17', '', 296, 'http://brainfood-project/?p=313', 5, 'nav_menu_item', '', 0),
(314, 1, '2021-06-09 18:13:17', '2021-06-09 15:13:17', ' ', '', '', 'publish', 'closed', 'closed', '', '314', '', '', '2021-06-09 18:13:17', '2021-06-09 15:13:17', '', 296, 'http://brainfood-project/?p=314', 4, 'nav_menu_item', '', 0),
(315, 1, '2021-06-09 18:13:17', '2021-06-09 15:13:17', ' ', '', '', 'publish', 'closed', 'closed', '', '315', '', '', '2021-06-09 18:13:17', '2021-06-09 15:13:17', '', 296, 'http://brainfood-project/?p=315', 3, 'nav_menu_item', '', 0),
(316, 1, '2021-06-09 18:13:17', '2021-06-09 15:13:17', ' ', '', '', 'publish', 'closed', 'closed', '', '316', '', '', '2021-06-09 18:13:17', '2021-06-09 15:13:17', '', 296, 'http://brainfood-project/?p=316', 2, 'nav_menu_item', '', 0),
(317, 1, '2021-06-09 19:28:29', '2021-06-09 16:28:29', 'Usage tracker failed due to following reason: cURL error 6: Could not resolve host: data.quizandsurveymaster.com', 'Error 0024', '', 'publish', 'closed', 'closed', '', 'error-0024-3', '', '', '2021-06-09 19:28:29', '2021-06-09 16:28:29', '', 0, 'http://brainfood-project/?p=317', 0, 'qmn_log', '', 0),
(318, 1, '2021-06-09 20:30:01', '2021-06-09 17:30:01', '<p>[user_registration_my_account]</p>\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Мой аккаунт', '', 'inherit', 'closed', 'closed', '', '95-revision-v1', '', '', '2021-06-09 20:30:01', '2021-06-09 17:30:01', '', 95, 'http://brainfood-project/?p=318', 0, 'revision', '', 0),
(319, 1, '2021-06-09 20:30:20', '2021-06-09 17:30:20', '[user_registration_form id=\"97\"]', 'Регистрация', '', 'inherit', 'closed', 'closed', '', '96-revision-v1', '', '', '2021-06-09 20:30:20', '2021-06-09 17:30:20', '', 96, 'http://brainfood-project/?p=319', 0, 'revision', '', 0);

-- --------------------------------------------------------

--
-- Структура таблицы `wp_termmeta`
--

CREATE TABLE `wp_termmeta` (
  `meta_id` bigint UNSIGNED NOT NULL,
  `term_id` bigint UNSIGNED NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_520_ci
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

-- --------------------------------------------------------

--
-- Структура таблицы `wp_terms`
--

CREATE TABLE `wp_terms` (
  `term_id` bigint UNSIGNED NOT NULL,
  `name` varchar(200) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `slug` varchar(200) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `term_group` bigint NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- Дамп данных таблицы `wp_terms`
--

INSERT INTO `wp_terms` (`term_id`, `name`, `slug`, `term_group`) VALUES
(1, 'Без рубрики', '%d0%b1%d0%b5%d0%b7-%d1%80%d1%83%d0%b1%d1%80%d0%b8%d0%ba%d0%b8', 0),
(2, 'mpi', 'mpi', 0),
(3, 'Параллельное программирование', 'parallelnoe-programmirovanie', 0),
(4, 'web', 'web', 0),
(5, 'C Sharp', 'c-sharp', 0),
(6, 'Open Mp', 'open-mp', 0),
(7, 'MPI', 'mpi', 0),
(8, 'Cuda', 'cuda', 0),
(9, 'JavaScript', 'javascript', 0),
(10, 'javascript', 'javascript', 0),
(12, 'Page Menu', 'page-menu', 0),
(13, 'error', 'error', 0),
(14, 'event', 'event', 0),
(15, 'Меню авторизации в шапке', 'menju-avtorizacii-v-shapke', 0),
(16, 'open-mp', 'open-mp', 0),
(17, 'cuda', 'cuda', 0);

-- --------------------------------------------------------

--
-- Структура таблицы `wp_term_relationships`
--

CREATE TABLE `wp_term_relationships` (
  `object_id` bigint UNSIGNED NOT NULL DEFAULT '0',
  `term_taxonomy_id` bigint UNSIGNED NOT NULL DEFAULT '0',
  `term_order` int NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- Дамп данных таблицы `wp_term_relationships`
--

INSERT INTO `wp_term_relationships` (`object_id`, `term_taxonomy_id`, `term_order`) VALUES
(18, 3, 0),
(18, 7, 0),
(20, 3, 0),
(20, 6, 0),
(22, 3, 0),
(22, 8, 0),
(24, 5, 0),
(26, 4, 0),
(26, 9, 0),
(92, 2, 0),
(99, 10, 0),
(110, 15, 0),
(111, 15, 0),
(134, 2, 0),
(136, 2, 0),
(141, 2, 0),
(179, 2, 0),
(180, 2, 0),
(181, 2, 0),
(182, 2, 0),
(186, 16, 0),
(234, 16, 0),
(235, 16, 0),
(236, 16, 0),
(237, 16, 0),
(238, 16, 0),
(239, 16, 0),
(240, 16, 0),
(247, 2, 0),
(287, 2, 0),
(288, 2, 0),
(289, 2, 0),
(290, 2, 0),
(291, 2, 0),
(292, 2, 0),
(293, 2, 0),
(311, 17, 0),
(312, 17, 0),
(313, 17, 0),
(314, 17, 0),
(315, 17, 0),
(316, 17, 0);

-- --------------------------------------------------------

--
-- Структура таблицы `wp_term_taxonomy`
--

CREATE TABLE `wp_term_taxonomy` (
  `term_taxonomy_id` bigint UNSIGNED NOT NULL,
  `term_id` bigint UNSIGNED NOT NULL DEFAULT '0',
  `taxonomy` varchar(32) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `description` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `parent` bigint UNSIGNED NOT NULL DEFAULT '0',
  `count` bigint NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- Дамп данных таблицы `wp_term_taxonomy`
--

INSERT INTO `wp_term_taxonomy` (`term_taxonomy_id`, `term_id`, `taxonomy`, `description`, `parent`, `count`) VALUES
(1, 1, 'category', '', 0, 0),
(2, 2, 'nav_menu', '', 0, 16),
(3, 3, 'disciplin-categories', '', 0, 3),
(4, 4, 'disciplin-categories', '', 0, 1),
(5, 5, 'disciplin-categories', '', 0, 1),
(6, 6, 'disciplin-categories', '', 3, 1),
(7, 7, 'disciplin-categories', '', 3, 1),
(8, 8, 'disciplin-categories', '', 3, 1),
(9, 9, 'disciplin-categories', '', 4, 1),
(10, 10, 'nav_menu', '', 0, 1),
(12, 12, 'nav_menu', '', 0, 0),
(13, 13, 'qmn_log_type', '', 0, 0),
(14, 14, 'qmn_log_type', '', 0, 0),
(15, 15, 'nav_menu', '', 0, 2),
(16, 16, 'nav_menu', '', 0, 8),
(17, 17, 'nav_menu', '', 0, 6);

-- --------------------------------------------------------

--
-- Структура таблицы `wp_usermeta`
--

CREATE TABLE `wp_usermeta` (
  `umeta_id` bigint UNSIGNED NOT NULL,
  `user_id` bigint UNSIGNED NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_520_ci
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- Дамп данных таблицы `wp_usermeta`
--

INSERT INTO `wp_usermeta` (`umeta_id`, `user_id`, `meta_key`, `meta_value`) VALUES
(1, 1, 'nickname', 'admin'),
(2, 1, 'first_name', ''),
(3, 1, 'last_name', ''),
(4, 1, 'description', ''),
(5, 1, 'rich_editing', 'true'),
(6, 1, 'syntax_highlighting', 'true'),
(7, 1, 'comment_shortcuts', 'false'),
(8, 1, 'admin_color', 'fresh'),
(9, 1, 'use_ssl', '0'),
(10, 1, 'show_admin_bar_front', 'true'),
(11, 1, 'locale', 'ru_RU'),
(12, 1, 'wp_capabilities', 'a:1:{s:13:\"administrator\";b:1;}'),
(13, 1, 'wp_user_level', '10'),
(14, 1, 'dismissed_wp_pointers', ''),
(15, 1, 'show_welcome_panel', '1'),
(16, 1, 'session_tokens', 'a:3:{s:64:\"2b370694de65c1b9cd55f4a768b19417285e5a38fe228b06ca9eba22ec477776\";a:4:{s:10:\"expiration\";i:1623325259;s:2:\"ip\";s:9:\"127.0.0.1\";s:2:\"ua\";s:115:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\";s:5:\"login\";i:1622115659;}s:64:\"67e4fc329f640c168063a4185b3f5686e17688f43bc6ecc64a2fb871b9ee62a4\";a:4:{s:10:\"expiration\";i:1623342575;s:2:\"ip\";s:9:\"127.0.0.1\";s:2:\"ua\";s:114:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36\";s:5:\"login\";i:1623169775;}s:64:\"6d6db8e705c3601f35c286db4e20a912cfd725d9a99b10b40f93caa81144cade\";a:4:{s:10:\"expiration\";i:1623433700;s:2:\"ip\";s:9:\"127.0.0.1\";s:2:\"ua\";s:114:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36\";s:5:\"login\";i:1623260900;}}'),
(17, 1, 'wp_dashboard_quick_press_last_post_id', '120'),
(18, 1, 'community-events-location', 'a:1:{s:2:\"ip\";s:9:\"127.0.0.0\";}'),
(19, 1, 'wp_user-settings', 'libraryContent=browse&editor=html&mfold=o'),
(20, 1, 'wp_user-settings-time', '1622825597'),
(21, 1, 'managenav-menuscolumnshidden', 'a:5:{i:0;s:11:\"link-target\";i:1;s:11:\"css-classes\";i:2;s:3:\"xfn\";i:3;s:11:\"description\";i:4;s:15:\"title-attribute\";}'),
(22, 1, 'metaboxhidden_nav-menus', 'a:1:{i:0;s:12:\"add-post_tag\";}'),
(23, 1, 'nav_menu_recently_edited', '2'),
(24, 1, 'closedpostboxes_', 'a:0:{}'),
(25, 1, 'metaboxhidden_', 'a:0:{}'),
(26, 2, 'nickname', 'admin1'),
(27, 2, 'first_name', ''),
(28, 2, 'last_name', 'михаил1'),
(29, 2, 'description', ''),
(30, 2, 'rich_editing', 'true'),
(31, 2, 'syntax_highlighting', 'true'),
(32, 2, 'comment_shortcuts', 'false'),
(33, 2, 'admin_color', 'fresh'),
(34, 2, 'use_ssl', '0'),
(35, 2, 'show_admin_bar_front', 'true'),
(36, 2, 'locale', ''),
(37, 2, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(38, 2, 'wp_user_level', '0'),
(39, 2, 'dismissed_wp_pointers', ''),
(40, 2, 'ur_form_id', '97'),
(42, 3, 'nickname', 'adminfbd'),
(43, 3, 'first_name', ''),
(44, 3, 'last_name', 'fdbdfbfd'),
(45, 3, 'description', ''),
(46, 3, 'rich_editing', 'true'),
(47, 3, 'syntax_highlighting', 'true'),
(48, 3, 'comment_shortcuts', 'false'),
(49, 3, 'admin_color', 'fresh'),
(50, 3, 'use_ssl', '0'),
(51, 3, 'show_admin_bar_front', 'true'),
(52, 3, 'locale', ''),
(53, 3, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(54, 3, 'wp_user_level', '0'),
(55, 3, 'dismissed_wp_pointers', ''),
(56, 3, 'ur_form_id', '97'),
(58, 4, 'nickname', 'admin12323'),
(59, 4, 'first_name', ''),
(60, 4, 'last_name', '12323'),
(61, 4, 'description', ''),
(62, 4, 'rich_editing', 'true'),
(63, 4, 'syntax_highlighting', 'true'),
(64, 4, 'comment_shortcuts', 'false'),
(65, 4, 'admin_color', 'fresh'),
(66, 4, 'use_ssl', '0'),
(67, 4, 'show_admin_bar_front', 'true'),
(68, 4, 'locale', ''),
(69, 4, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(70, 4, 'wp_user_level', '0'),
(71, 4, 'dismissed_wp_pointers', ''),
(72, 4, 'ur_form_id', '97'),
(74, 1, 'closedpostboxes_toplevel_page_qsm_dashboard', 'a:1:{i:0;s:23:\"dashboard_popular_addon\";}'),
(75, 1, 'metaboxhidden_toplevel_page_qsm_dashboard', 'a:0:{}'),
(76, 5, 'nickname', 'Mihail'),
(77, 5, 'first_name', ''),
(78, 5, 'last_name', 'Egorov'),
(79, 5, 'description', ''),
(80, 5, 'rich_editing', 'true'),
(81, 5, 'syntax_highlighting', 'true'),
(82, 5, 'comment_shortcuts', 'false'),
(83, 5, 'admin_color', 'fresh'),
(84, 5, 'use_ssl', '0'),
(85, 5, 'show_admin_bar_front', 'true'),
(86, 5, 'locale', ''),
(87, 5, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(88, 5, 'wp_user_level', '0'),
(89, 5, 'dismissed_wp_pointers', ''),
(90, 5, 'ur_form_id', '97'),
(92, 6, 'nickname', 'Mihail123'),
(93, 6, 'first_name', ''),
(94, 6, 'last_name', 'Egorov'),
(95, 6, 'description', ''),
(96, 6, 'rich_editing', 'true'),
(97, 6, 'syntax_highlighting', 'true'),
(98, 6, 'comment_shortcuts', 'false'),
(99, 6, 'admin_color', 'fresh'),
(100, 6, 'use_ssl', '0'),
(101, 6, 'show_admin_bar_front', 'true'),
(102, 6, 'locale', ''),
(103, 6, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(104, 6, 'wp_user_level', '0'),
(105, 6, 'dismissed_wp_pointers', ''),
(106, 6, 'ur_form_id', '97'),
(108, 6, 'session_tokens', 'a:1:{s:64:\"3ff0d8ccff8626a2b9e9c01209de6bc91b433741688204db0d5ec9f3cf8f3530\";a:4:{s:10:\"expiration\";i:1623346672;s:2:\"ip\";s:9:\"127.0.0.1\";s:2:\"ua\";s:115:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\";s:5:\"login\";i:1622137072;}}'),
(109, 7, 'nickname', 'Mihail12334'),
(110, 7, 'first_name', ''),
(111, 7, 'last_name', 'Egorov123'),
(112, 7, 'description', ''),
(113, 7, 'rich_editing', 'true'),
(114, 7, 'syntax_highlighting', 'true'),
(115, 7, 'comment_shortcuts', 'false'),
(116, 7, 'admin_color', 'fresh'),
(117, 7, 'use_ssl', '0'),
(118, 7, 'show_admin_bar_front', 'true'),
(119, 7, 'locale', ''),
(120, 7, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(121, 7, 'wp_user_level', '0'),
(122, 7, 'dismissed_wp_pointers', ''),
(123, 7, 'ur_form_id', '97'),
(125, 1, 'meta-box-order_toplevel_page_qsm_dashboard', 'a:2:{s:6:\"normal\";s:51:\"dashboard_popular_addon,dashboard_recent_taken_quiz\";s:4:\"side\";s:37:\"dashboard_what_new,dashboard_chagelog\";}'),
(126, 1, 'meta-box-order_dashboard', 'a:4:{s:6:\"normal\";s:133:\"dashboard_php_nag,dashboard_site_health,dashboard_right_now,dashboard_activity,qmn_snapshot_widget,user_registration_dashboard_status\";s:4:\"side\";s:39:\"dashboard_quick_press,dashboard_primary\";s:7:\"column3\";s:0:\"\";s:7:\"column4\";s:0:\"\";}');

-- --------------------------------------------------------

--
-- Структура таблицы `wp_users`
--

CREATE TABLE `wp_users` (
  `ID` bigint UNSIGNED NOT NULL,
  `user_login` varchar(60) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_pass` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_nicename` varchar(50) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_email` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_url` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_status` int NOT NULL DEFAULT '0',
  `display_name` varchar(250) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT ''
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- Дамп данных таблицы `wp_users`
--

INSERT INTO `wp_users` (`ID`, `user_login`, `user_pass`, `user_nicename`, `user_email`, `user_url`, `user_registered`, `user_activation_key`, `user_status`, `display_name`) VALUES
(1, 'admin', '$P$BEnOnvpne8oJLPeuo8puG6XYIublZi.', 'admin', '489257mihail@gmail.com', 'http://brainfood-project', '2021-05-15 13:36:40', '1623260872:$P$B6O9WqOHG8QCZNxAazA1xSNKaCN4Gr.', 0, 'admin'),
(2, 'admin1', '$P$BufwMrmtDC0cUYSfrxPrAe8LuEAV0B0', 'admin1', '489257mihail@yandex.ru', '', '2021-05-27 14:26:25', '', 0, 'admin1'),
(3, 'adminfbd', '$P$By3FrNcAHkutrB/0FYxanZ49LpFR9D.', 'adminfbd', 'dfbdfbfb@yandex.ru', '', '2021-05-27 14:27:31', '', 0, 'adminfbd'),
(4, 'admin12323', '$P$B0ruDcwfS8mB7RvA68JLu.M4iZdUiV1', 'admin12323', '13224@gmail.com', '', '2021-05-27 14:45:08', '', 0, 'admin12323'),
(5, 'Mihail', '$P$B.7xgHJojc9eVF/Q27HB/.2eWzhwOr0', 'mihail', '487mihail@gmail.com', '', '2021-05-27 16:18:54', '', 0, 'Mihail'),
(6, 'Mihail123', '$P$BrBfvmio560EsaWsw7NvFZQgOBGBMj.', 'mihail123', '57mihail@gmail.com', '', '2021-05-27 20:35:04', '', 0, 'Mihail123'),
(7, 'Mihail12334', '$P$BJ3Q/MDlHdoi37orRvidj9RSt6muVJ.', 'mihail12334', '4892324557mihail@gmail.com', '', '2021-05-30 17:33:49', '', 0, 'Mihail12334');

-- --------------------------------------------------------

--
-- Структура таблицы `wp_user_registration_sessions`
--

CREATE TABLE `wp_user_registration_sessions` (
  `session_id` bigint UNSIGNED NOT NULL,
  `session_key` char(32) COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `session_value` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `session_expiry` bigint UNSIGNED NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `wp_commentmeta`
--
ALTER TABLE `wp_commentmeta`
  ADD PRIMARY KEY (`meta_id`),
  ADD KEY `comment_id` (`comment_id`),
  ADD KEY `meta_key` (`meta_key`(191));

--
-- Индексы таблицы `wp_comments`
--
ALTER TABLE `wp_comments`
  ADD PRIMARY KEY (`comment_ID`),
  ADD KEY `comment_post_ID` (`comment_post_ID`),
  ADD KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  ADD KEY `comment_date_gmt` (`comment_date_gmt`),
  ADD KEY `comment_parent` (`comment_parent`),
  ADD KEY `comment_author_email` (`comment_author_email`(10));

--
-- Индексы таблицы `wp_links`
--
ALTER TABLE `wp_links`
  ADD PRIMARY KEY (`link_id`),
  ADD KEY `link_visible` (`link_visible`);

--
-- Индексы таблицы `wp_mlw_qm_audit_trail`
--
ALTER TABLE `wp_mlw_qm_audit_trail`
  ADD PRIMARY KEY (`trail_id`);

--
-- Индексы таблицы `wp_mlw_questions`
--
ALTER TABLE `wp_mlw_questions`
  ADD PRIMARY KEY (`question_id`);

--
-- Индексы таблицы `wp_mlw_quizzes`
--
ALTER TABLE `wp_mlw_quizzes`
  ADD PRIMARY KEY (`quiz_id`);

--
-- Индексы таблицы `wp_mlw_results`
--
ALTER TABLE `wp_mlw_results`
  ADD PRIMARY KEY (`result_id`);

--
-- Индексы таблицы `wp_options`
--
ALTER TABLE `wp_options`
  ADD PRIMARY KEY (`option_id`),
  ADD UNIQUE KEY `option_name` (`option_name`),
  ADD KEY `autoload` (`autoload`);

--
-- Индексы таблицы `wp_postmeta`
--
ALTER TABLE `wp_postmeta`
  ADD PRIMARY KEY (`meta_id`),
  ADD KEY `post_id` (`post_id`),
  ADD KEY `meta_key` (`meta_key`(191));

--
-- Индексы таблицы `wp_posts`
--
ALTER TABLE `wp_posts`
  ADD PRIMARY KEY (`ID`),
  ADD KEY `post_name` (`post_name`(191)),
  ADD KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  ADD KEY `post_parent` (`post_parent`),
  ADD KEY `post_author` (`post_author`);

--
-- Индексы таблицы `wp_termmeta`
--
ALTER TABLE `wp_termmeta`
  ADD PRIMARY KEY (`meta_id`),
  ADD KEY `term_id` (`term_id`),
  ADD KEY `meta_key` (`meta_key`(191));

--
-- Индексы таблицы `wp_terms`
--
ALTER TABLE `wp_terms`
  ADD PRIMARY KEY (`term_id`),
  ADD KEY `slug` (`slug`(191)),
  ADD KEY `name` (`name`(191));

--
-- Индексы таблицы `wp_term_relationships`
--
ALTER TABLE `wp_term_relationships`
  ADD PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  ADD KEY `term_taxonomy_id` (`term_taxonomy_id`);

--
-- Индексы таблицы `wp_term_taxonomy`
--
ALTER TABLE `wp_term_taxonomy`
  ADD PRIMARY KEY (`term_taxonomy_id`),
  ADD UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  ADD KEY `taxonomy` (`taxonomy`);

--
-- Индексы таблицы `wp_usermeta`
--
ALTER TABLE `wp_usermeta`
  ADD PRIMARY KEY (`umeta_id`),
  ADD KEY `user_id` (`user_id`),
  ADD KEY `meta_key` (`meta_key`(191));

--
-- Индексы таблицы `wp_users`
--
ALTER TABLE `wp_users`
  ADD PRIMARY KEY (`ID`),
  ADD KEY `user_login_key` (`user_login`),
  ADD KEY `user_nicename` (`user_nicename`),
  ADD KEY `user_email` (`user_email`);

--
-- Индексы таблицы `wp_user_registration_sessions`
--
ALTER TABLE `wp_user_registration_sessions`
  ADD PRIMARY KEY (`session_key`),
  ADD UNIQUE KEY `session_id` (`session_id`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `wp_commentmeta`
--
ALTER TABLE `wp_commentmeta`
  MODIFY `meta_id` bigint UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT для таблицы `wp_comments`
--
ALTER TABLE `wp_comments`
  MODIFY `comment_ID` bigint UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT для таблицы `wp_links`
--
ALTER TABLE `wp_links`
  MODIFY `link_id` bigint UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT для таблицы `wp_mlw_qm_audit_trail`
--
ALTER TABLE `wp_mlw_qm_audit_trail`
  MODIFY `trail_id` mediumint NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;

--
-- AUTO_INCREMENT для таблицы `wp_mlw_questions`
--
ALTER TABLE `wp_mlw_questions`
  MODIFY `question_id` mediumint NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=15;

--
-- AUTO_INCREMENT для таблицы `wp_mlw_quizzes`
--
ALTER TABLE `wp_mlw_quizzes`
  MODIFY `quiz_id` mediumint NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT для таблицы `wp_mlw_results`
--
ALTER TABLE `wp_mlw_results`
  MODIFY `result_id` mediumint NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=17;

--
-- AUTO_INCREMENT для таблицы `wp_options`
--
ALTER TABLE `wp_options`
  MODIFY `option_id` bigint UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1107;

--
-- AUTO_INCREMENT для таблицы `wp_postmeta`
--
ALTER TABLE `wp_postmeta`
  MODIFY `meta_id` bigint UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1196;

--
-- AUTO_INCREMENT для таблицы `wp_posts`
--
ALTER TABLE `wp_posts`
  MODIFY `ID` bigint UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=320;

--
-- AUTO_INCREMENT для таблицы `wp_termmeta`
--
ALTER TABLE `wp_termmeta`
  MODIFY `meta_id` bigint UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT для таблицы `wp_terms`
--
ALTER TABLE `wp_terms`
  MODIFY `term_id` bigint UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=18;

--
-- AUTO_INCREMENT для таблицы `wp_term_taxonomy`
--
ALTER TABLE `wp_term_taxonomy`
  MODIFY `term_taxonomy_id` bigint UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=18;

--
-- AUTO_INCREMENT для таблицы `wp_usermeta`
--
ALTER TABLE `wp_usermeta`
  MODIFY `umeta_id` bigint UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=127;

--
-- AUTO_INCREMENT для таблицы `wp_users`
--
ALTER TABLE `wp_users`
  MODIFY `ID` bigint UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;

--
-- AUTO_INCREMENT для таблицы `wp_user_registration_sessions`
--
ALTER TABLE `wp_user_registration_sessions`
  MODIFY `session_id` bigint UNSIGNED NOT NULL AUTO_INCREMENT;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
